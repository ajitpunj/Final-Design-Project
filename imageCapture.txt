//
//  full working algorithm for image detection and digit recognition with hard
//  coded arrays of weighting
//
//

#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>

volatile int * ready = (int *) 0xFF200050;
volatile int * sdram2hpsdata1 = (int *) 0xFF200040;
volatile int * sdram2hpsdata2 = (int *) 0xFF200030;
volatile int * istart = (int *) 0xFF200020;
volatile int * muxswitch = (int *) 0xFF200010;
volatile int * hps2vgadata2 = (int *) 0xFF200000;
//volatile int * ddr3 = (int *) 0x00100000;
volatile int * sdramstart = (int *) 0xFF200080;
volatile int * fifowe = (int *) 0xFF200090;
volatile int * greyparameter = (int *) 0xFF2000b0;
volatile int * binary = (int *) 0xFF2000a0;
volatile int * sdramclock = (int *) 0xFF200070;
volatile int * vgabinary = (int *) 0xFF2000c0;
volatile int * vgaclock = (int *) 0xFF2000d0;
volatile int * vgaread = (int *) 0xFF2000e0;
volatile int * hwreset = (int *) 0xFF200100;
volatile int * lval = (int * ) 0xFF200200;

int hardImage[480][640];
int written = 0;

bool errorDet = false;
int finalFirstEdge, finalSecondEdge, finalLeftEdge, finalRightEdge, finalTopEdge, finalBottomEdge, finalRows,finalCols;

unsigned char smallImage[28][28];//2d global array to store resized image
unsigned char smallImageReshape[28*28];//784 linear array

static inline unsigned int getCycles ()
{
  unsigned int cycleCount;
  // Read CCNT register
  asm volatile ("MRC p15, 0, %0, c9, c13, 0\t\n": "=r"(cycleCount));  
  return cycleCount;
}
static inline void initCounters ()
{
  // Enable user access to performance counter
  asm volatile ("MCR p15, 0, %0, C9, C14, 0\t\n" :: "r"(1));
  // Reset all counters to zero
  int MCRP15ResetAll = 23; 
  asm volatile ("MCR p15, 0, %0, c9, c12, 0\t\n" :: "r"(MCRP15ResetAll));  
  // Enable all counters:  
  asm volatile ("MCR p15, 0, %0, c9, c12, 1\t\n" :: "r"(0x8000000f));  
  // Disable counter interrupts
  asm volatile ("MCR p15, 0, %0, C9, C14, 2\t\n" :: "r"(0x8000000f));
  // Clear overflows:
  asm volatile ("MCR p15, 0, %0, c9, c12, 3\t\n" :: "r"(0x8000000f));
}



int main(void){
	int start;
    int i = 0;
	int m,n;
	char junk[10];
	int count = 0;
	int flag = 0;
	
	*(hwreset) = 1;
	*(greyparameter) = 210;
	*(ready) = 0;	
	*(fifowe) = 1;
	*(istart) = 1; 
	*(muxswitch) = 1;
	do{
		start = 0;
		printf("\nPress 1 when vga ready:");
		scanf("%d", &start);
		scanf("%c", &junk);
	}while(start != 1);
	*(muxswitch) = 0;
	for(i=0;i<10000000;i++){}
	
while(1){
	finalDigitToPrint=0;
	start = 0;
	errorDet = false;
	*(hwreset) = 1;	
	*(greyparameter) = 225;
	//*(ready) = 0;	
	*(fifowe) = 1;
    char junk;
	//*(hwreset) = 0;
	//*(hwreset) = 1;
	*(istart) = 0;
	*(istart) = 1;
	
	unsigned int time = getCycles();
	unsigned int OH = getCycles() - time;
	initCounters ();
/* 	do{
		start = 0;
		printf("\nPress 1 to start:");
		scanf("%d", &start);
		scanf("%c", &junk);
	}while(start != 1);
	 */
	time = getCycles();

	//if(flag == 0){
    //after this while loop, the read has been asserted low, now capture image
 	if(*(lval)==1){
		while(*(lval)!=0){
		}
	}
	//flag = 1;
	//}
	printf("\nThe ccd_dval value is%d\n", *(lval));
	 if(*(lval)==0){
	while(*(lval)!=1){
		}
	} 
	printf("\nThe ccd_dval value is%d\n", *(lval));
	while (*(vgaread)!=0) {
    }

	
	
		
		*(fifowe) = 0;
		//for(i=0;i<10000000;i++){}
		*(ready) = 0;
		*(ready) = 1;
		/*for(i  = 0;i < 480*640; i++){
			*(sdramclock) = 0;
			//for(i = 0; i < 100; i++){}
			ddr3[i] = *(binary);
			//graphtemp[count] = *(binary);
			//printf("%d",graphtemp[count]);
			count++;
			//for(i = 0; i < 100; i++){}
			*(sdramclock) = 1;
		}*/
		for(m = 0;m < 480; m++){
			for(n = 0;n < 640; n++){
				//*(ready) = 1;
				*(sdramclock) = 0;
				hardImage[m][n] =  *(binary);
 				//if(*(binary) == 1023)
					//hardImage[m][n] = 1;
				//if(*(binary) == 0)
					//hardImage[m][n] = 0;
				*(sdramclock) = 1;
			}
		}
	//*(ready) = 0;
	*(fifowe) = 1;	
	*(hwreset) = 0;
	*(hwreset) = 1;	

	for(m = 0; m < 70; m++){
		for(n = 0; n < 640; n++){
			printf("%d", hardImage[m][n]);
		}
		printf("\n");
	}
	
	for(i=0;i<1000;i++){}
	//*(ready) = 0;	
	//*(istart) = 1;
	
		//time = getCycles() - time;	
		//printf ("Elapsed Reading Time: %d cycles\n", time - OH);
		
		//time = getCycles();
		//time = getCycles() - time;
		//printf ("Elapsed Image Store Time: %d cycles\n", time - OH);
		
	//time = getCycles();
	/*int j=0;
	for(i  = 0;i < 70*640; i++){
		printf("%d", ddr3[i]);
		j++;
		if(j > 639){
			printf("\n");
			j=0;
		}
	}*/


}
    return 0;
}
