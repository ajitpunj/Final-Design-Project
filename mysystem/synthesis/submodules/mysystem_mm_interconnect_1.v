// mysystem_mm_interconnect_1.v

// This file was auto-generated from altera_merlin_interconnect_wrapper_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 13.1 162 at 2015.05.20.15:12:05

`timescale 1 ps / 1 ps
module mysystem_mm_interconnect_1 (
		input  wire [11:0] arm_a9_hps_h2f_lw_axi_master_awid,                                        //                                       arm_a9_hps_h2f_lw_axi_master.awid
		input  wire [20:0] arm_a9_hps_h2f_lw_axi_master_awaddr,                                      //                                                                   .awaddr
		input  wire [3:0]  arm_a9_hps_h2f_lw_axi_master_awlen,                                       //                                                                   .awlen
		input  wire [2:0]  arm_a9_hps_h2f_lw_axi_master_awsize,                                      //                                                                   .awsize
		input  wire [1:0]  arm_a9_hps_h2f_lw_axi_master_awburst,                                     //                                                                   .awburst
		input  wire [1:0]  arm_a9_hps_h2f_lw_axi_master_awlock,                                      //                                                                   .awlock
		input  wire [3:0]  arm_a9_hps_h2f_lw_axi_master_awcache,                                     //                                                                   .awcache
		input  wire [2:0]  arm_a9_hps_h2f_lw_axi_master_awprot,                                      //                                                                   .awprot
		input  wire        arm_a9_hps_h2f_lw_axi_master_awvalid,                                     //                                                                   .awvalid
		output wire        arm_a9_hps_h2f_lw_axi_master_awready,                                     //                                                                   .awready
		input  wire [11:0] arm_a9_hps_h2f_lw_axi_master_wid,                                         //                                                                   .wid
		input  wire [31:0] arm_a9_hps_h2f_lw_axi_master_wdata,                                       //                                                                   .wdata
		input  wire [3:0]  arm_a9_hps_h2f_lw_axi_master_wstrb,                                       //                                                                   .wstrb
		input  wire        arm_a9_hps_h2f_lw_axi_master_wlast,                                       //                                                                   .wlast
		input  wire        arm_a9_hps_h2f_lw_axi_master_wvalid,                                      //                                                                   .wvalid
		output wire        arm_a9_hps_h2f_lw_axi_master_wready,                                      //                                                                   .wready
		output wire [11:0] arm_a9_hps_h2f_lw_axi_master_bid,                                         //                                                                   .bid
		output wire [1:0]  arm_a9_hps_h2f_lw_axi_master_bresp,                                       //                                                                   .bresp
		output wire        arm_a9_hps_h2f_lw_axi_master_bvalid,                                      //                                                                   .bvalid
		input  wire        arm_a9_hps_h2f_lw_axi_master_bready,                                      //                                                                   .bready
		input  wire [11:0] arm_a9_hps_h2f_lw_axi_master_arid,                                        //                                                                   .arid
		input  wire [20:0] arm_a9_hps_h2f_lw_axi_master_araddr,                                      //                                                                   .araddr
		input  wire [3:0]  arm_a9_hps_h2f_lw_axi_master_arlen,                                       //                                                                   .arlen
		input  wire [2:0]  arm_a9_hps_h2f_lw_axi_master_arsize,                                      //                                                                   .arsize
		input  wire [1:0]  arm_a9_hps_h2f_lw_axi_master_arburst,                                     //                                                                   .arburst
		input  wire [1:0]  arm_a9_hps_h2f_lw_axi_master_arlock,                                      //                                                                   .arlock
		input  wire [3:0]  arm_a9_hps_h2f_lw_axi_master_arcache,                                     //                                                                   .arcache
		input  wire [2:0]  arm_a9_hps_h2f_lw_axi_master_arprot,                                      //                                                                   .arprot
		input  wire        arm_a9_hps_h2f_lw_axi_master_arvalid,                                     //                                                                   .arvalid
		output wire        arm_a9_hps_h2f_lw_axi_master_arready,                                     //                                                                   .arready
		output wire [11:0] arm_a9_hps_h2f_lw_axi_master_rid,                                         //                                                                   .rid
		output wire [31:0] arm_a9_hps_h2f_lw_axi_master_rdata,                                       //                                                                   .rdata
		output wire [1:0]  arm_a9_hps_h2f_lw_axi_master_rresp,                                       //                                                                   .rresp
		output wire        arm_a9_hps_h2f_lw_axi_master_rlast,                                       //                                                                   .rlast
		output wire        arm_a9_hps_h2f_lw_axi_master_rvalid,                                      //                                                                   .rvalid
		input  wire        arm_a9_hps_h2f_lw_axi_master_rready,                                      //                                                                   .rready
		input  wire        sdram_clk_sdram_clk_clk,                                                  //                                                sdram_clk_sdram_clk.clk
		input  wire        arm_a9_hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // arm_a9_hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire        pio0_reset_reset_bridge_in_reset_reset,                                   //                                   pio0_reset_reset_bridge_in_reset.reset
		output wire [1:0]  binaryscale_s1_address,                                                   //                                                     binaryscale_s1.address
		input  wire [31:0] binaryscale_s1_readdata,                                                  //                                                                   .readdata
		output wire [1:0]  FIFOWe_s1_address,                                                        //                                                          FIFOWe_s1.address
		output wire        FIFOWe_s1_write,                                                          //                                                                   .write
		input  wire [31:0] FIFOWe_s1_readdata,                                                       //                                                                   .readdata
		output wire [31:0] FIFOWe_s1_writedata,                                                      //                                                                   .writedata
		output wire        FIFOWe_s1_chipselect,                                                     //                                                                   .chipselect
		output wire [1:0]  greyparamter_s1_address,                                                  //                                                    greyparamter_s1.address
		output wire        greyparamter_s1_write,                                                    //                                                                   .write
		input  wire [31:0] greyparamter_s1_readdata,                                                 //                                                                   .readdata
		output wire [31:0] greyparamter_s1_writedata,                                                //                                                                   .writedata
		output wire        greyparamter_s1_chipselect,                                               //                                                                   .chipselect
		output wire [1:0]  hps_vga_data1_s1_address,                                                 //                                                   hps_vga_data1_s1.address
		output wire        hps_vga_data1_s1_write,                                                   //                                                                   .write
		input  wire [31:0] hps_vga_data1_s1_readdata,                                                //                                                                   .readdata
		output wire [31:0] hps_vga_data1_s1_writedata,                                               //                                                                   .writedata
		output wire        hps_vga_data1_s1_chipselect,                                              //                                                                   .chipselect
		output wire [1:0]  hps_vga_data2_s1_address,                                                 //                                                   hps_vga_data2_s1.address
		output wire        hps_vga_data2_s1_write,                                                   //                                                                   .write
		input  wire [31:0] hps_vga_data2_s1_readdata,                                                //                                                                   .readdata
		output wire [31:0] hps_vga_data2_s1_writedata,                                               //                                                                   .writedata
		output wire        hps_vga_data2_s1_chipselect,                                              //                                                                   .chipselect
		output wire [1:0]  hwreset_s1_address,                                                       //                                                         hwreset_s1.address
		output wire        hwreset_s1_write,                                                         //                                                                   .write
		input  wire [31:0] hwreset_s1_readdata,                                                      //                                                                   .readdata
		output wire [31:0] hwreset_s1_writedata,                                                     //                                                                   .writedata
		output wire        hwreset_s1_chipselect,                                                    //                                                                   .chipselect
		output wire [0:0]  jtag_uart_avalon_jtag_slave_address,                                      //                                        jtag_uart_avalon_jtag_slave.address
		output wire        jtag_uart_avalon_jtag_slave_write,                                        //                                                                   .write
		output wire        jtag_uart_avalon_jtag_slave_read,                                         //                                                                   .read
		input  wire [31:0] jtag_uart_avalon_jtag_slave_readdata,                                     //                                                                   .readdata
		output wire [31:0] jtag_uart_avalon_jtag_slave_writedata,                                    //                                                                   .writedata
		input  wire        jtag_uart_avalon_jtag_slave_waitrequest,                                  //                                                                   .waitrequest
		output wire        jtag_uart_avalon_jtag_slave_chipselect,                                   //                                                                   .chipselect
		output wire [1:0]  Lval_s1_address,                                                          //                                                            Lval_s1.address
		input  wire [31:0] Lval_s1_readdata,                                                         //                                                                   .readdata
		output wire [1:0]  pio0_s1_address,                                                          //                                                            pio0_s1.address
		output wire        pio0_s1_write,                                                            //                                                                   .write
		input  wire [31:0] pio0_s1_readdata,                                                         //                                                                   .readdata
		output wire [31:0] pio0_s1_writedata,                                                        //                                                                   .writedata
		output wire        pio0_s1_chipselect,                                                       //                                                                   .chipselect
		output wire [1:0]  pio_start_s1_address,                                                     //                                                       pio_start_s1.address
		output wire        pio_start_s1_write,                                                       //                                                                   .write
		input  wire [31:0] pio_start_s1_readdata,                                                    //                                                                   .readdata
		output wire [31:0] pio_start_s1_writedata,                                                   //                                                                   .writedata
		output wire        pio_start_s1_chipselect,                                                  //                                                                   .chipselect
		output wire [1:0]  Sdram_start_s1_address,                                                   //                                                     Sdram_start_s1.address
		output wire        Sdram_start_s1_write,                                                     //                                                                   .write
		input  wire [31:0] Sdram_start_s1_readdata,                                                  //                                                                   .readdata
		output wire [31:0] Sdram_start_s1_writedata,                                                 //                                                                   .writedata
		output wire        Sdram_start_s1_chipselect,                                                //                                                                   .chipselect
		output wire [1:0]  sdram_to_hps_data1_s1_address,                                            //                                              sdram_to_hps_data1_s1.address
		input  wire [31:0] sdram_to_hps_data1_s1_readdata,                                           //                                                                   .readdata
		output wire [1:0]  sdram_to_hps_data2_s1_address,                                            //                                              sdram_to_hps_data2_s1.address
		input  wire [31:0] sdram_to_hps_data2_s1_readdata,                                           //                                                                   .readdata
		output wire [1:0]  sdramclock_s1_address,                                                    //                                                      sdramclock_s1.address
		output wire        sdramclock_s1_write,                                                      //                                                                   .write
		input  wire [31:0] sdramclock_s1_readdata,                                                   //                                                                   .readdata
		output wire [31:0] sdramclock_s1_writedata,                                                  //                                                                   .writedata
		output wire        sdramclock_s1_chipselect,                                                 //                                                                   .chipselect
		output wire [1:0]  topedge_s1_address,                                                       //                                                         topedge_s1.address
		input  wire [31:0] topedge_s1_readdata,                                                      //                                                                   .readdata
		output wire [1:0]  vgabinary_s1_address,                                                     //                                                       vgabinary_s1.address
		output wire        vgabinary_s1_write,                                                       //                                                                   .write
		input  wire [31:0] vgabinary_s1_readdata,                                                    //                                                                   .readdata
		output wire [31:0] vgabinary_s1_writedata,                                                   //                                                                   .writedata
		output wire        vgabinary_s1_chipselect,                                                  //                                                                   .chipselect
		output wire [1:0]  vgaclock_s1_address,                                                      //                                                        vgaclock_s1.address
		input  wire [31:0] vgaclock_s1_readdata,                                                     //                                                                   .readdata
		output wire [1:0]  vgaread_s1_address,                                                       //                                                         vgaread_s1.address
		input  wire [31:0] vgaread_s1_readdata                                                       //                                                                   .readdata
	);

	wire          pio0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                                 // pio0_s1_translator:uav_waitrequest -> pio0_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] pio0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                                  // pio0_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> pio0_s1_translator:uav_burstcount
	wire   [31:0] pio0_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                   // pio0_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> pio0_s1_translator:uav_writedata
	wire   [20:0] pio0_s1_translator_avalon_universal_slave_0_agent_m0_address;                                     // pio0_s1_translator_avalon_universal_slave_0_agent:m0_address -> pio0_s1_translator:uav_address
	wire          pio0_s1_translator_avalon_universal_slave_0_agent_m0_write;                                       // pio0_s1_translator_avalon_universal_slave_0_agent:m0_write -> pio0_s1_translator:uav_write
	wire          pio0_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                        // pio0_s1_translator_avalon_universal_slave_0_agent:m0_lock -> pio0_s1_translator:uav_lock
	wire          pio0_s1_translator_avalon_universal_slave_0_agent_m0_read;                                        // pio0_s1_translator_avalon_universal_slave_0_agent:m0_read -> pio0_s1_translator:uav_read
	wire   [31:0] pio0_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                    // pio0_s1_translator:uav_readdata -> pio0_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          pio0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                               // pio0_s1_translator:uav_readdatavalid -> pio0_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          pio0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                                 // pio0_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> pio0_s1_translator:uav_debugaccess
	wire    [3:0] pio0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                                  // pio0_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> pio0_s1_translator:uav_byteenable
	wire          pio0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                          // pio0_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> pio0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          pio0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                                // pio0_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> pio0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          pio0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                        // pio0_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> pio0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [120:0] pio0_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                                 // pio0_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> pio0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          pio0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                                // pio0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> pio0_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          pio0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                       // pio0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> pio0_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          pio0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                             // pio0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> pio0_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          pio0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                     // pio0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> pio0_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [120:0] pio0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                              // pio0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> pio0_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          pio0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                             // pio0_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> pio0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          pio0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                           // pio0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> pio0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] pio0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                            // pio0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> pio0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          pio0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                           // pio0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> pio0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          pio0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                           // pio0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> pio0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] pio0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                            // pio0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> pio0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          pio0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                           // pio0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> pio0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_waitrequest;             // jtag_uart_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_burstcount;              // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_burstcount -> jtag_uart_avalon_jtag_slave_translator:uav_burstcount
	wire   [31:0] jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_writedata;               // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_writedata -> jtag_uart_avalon_jtag_slave_translator:uav_writedata
	wire   [20:0] jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_address;                 // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_address -> jtag_uart_avalon_jtag_slave_translator:uav_address
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_write;                   // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_write -> jtag_uart_avalon_jtag_slave_translator:uav_write
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_lock;                    // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_lock -> jtag_uart_avalon_jtag_slave_translator:uav_lock
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_read;                    // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_read -> jtag_uart_avalon_jtag_slave_translator:uav_read
	wire   [31:0] jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_readdata;                // jtag_uart_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_readdatavalid;           // jtag_uart_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_debugaccess;             // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_debugaccess -> jtag_uart_avalon_jtag_slave_translator:uav_debugaccess
	wire    [3:0] jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_byteenable;              // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_byteenable -> jtag_uart_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;      // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_valid;            // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rf_source_valid -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;    // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [120:0] jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_data;             // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rf_source_data -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_ready;            // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;   // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;         // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket; // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [120:0] jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;          // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;         // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rf_sink_ready -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;       // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;        // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;       // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;       // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;        // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;       // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                   // sdram_to_hps_data1_s1_translator:uav_waitrequest -> sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                    // sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> sdram_to_hps_data1_s1_translator:uav_burstcount
	wire   [31:0] sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                     // sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> sdram_to_hps_data1_s1_translator:uav_writedata
	wire   [20:0] sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_m0_address;                       // sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent:m0_address -> sdram_to_hps_data1_s1_translator:uav_address
	wire          sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_m0_write;                         // sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent:m0_write -> sdram_to_hps_data1_s1_translator:uav_write
	wire          sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_m0_lock;                          // sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent:m0_lock -> sdram_to_hps_data1_s1_translator:uav_lock
	wire          sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_m0_read;                          // sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent:m0_read -> sdram_to_hps_data1_s1_translator:uav_read
	wire   [31:0] sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                      // sdram_to_hps_data1_s1_translator:uav_readdata -> sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                 // sdram_to_hps_data1_s1_translator:uav_readdatavalid -> sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                   // sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> sdram_to_hps_data1_s1_translator:uav_debugaccess
	wire    [3:0] sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                    // sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> sdram_to_hps_data1_s1_translator:uav_byteenable
	wire          sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;            // sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                  // sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;          // sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [120:0] sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                   // sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                  // sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;         // sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;               // sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;       // sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [120:0] sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                // sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;               // sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;             // sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;              // sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;             // sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;             // sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;              // sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;             // sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                   // sdram_to_hps_data2_s1_translator:uav_waitrequest -> sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                    // sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> sdram_to_hps_data2_s1_translator:uav_burstcount
	wire   [31:0] sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                     // sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> sdram_to_hps_data2_s1_translator:uav_writedata
	wire   [20:0] sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_m0_address;                       // sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent:m0_address -> sdram_to_hps_data2_s1_translator:uav_address
	wire          sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_m0_write;                         // sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent:m0_write -> sdram_to_hps_data2_s1_translator:uav_write
	wire          sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_m0_lock;                          // sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent:m0_lock -> sdram_to_hps_data2_s1_translator:uav_lock
	wire          sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_m0_read;                          // sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent:m0_read -> sdram_to_hps_data2_s1_translator:uav_read
	wire   [31:0] sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                      // sdram_to_hps_data2_s1_translator:uav_readdata -> sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                 // sdram_to_hps_data2_s1_translator:uav_readdatavalid -> sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                   // sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> sdram_to_hps_data2_s1_translator:uav_debugaccess
	wire    [3:0] sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                    // sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> sdram_to_hps_data2_s1_translator:uav_byteenable
	wire          sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;            // sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                  // sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;          // sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [120:0] sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                   // sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                  // sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;         // sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;               // sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;       // sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [120:0] sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                // sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;               // sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;             // sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;              // sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;             // sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;             // sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;              // sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;             // sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          pio_start_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                            // pio_start_s1_translator:uav_waitrequest -> pio_start_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] pio_start_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                             // pio_start_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> pio_start_s1_translator:uav_burstcount
	wire   [31:0] pio_start_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                              // pio_start_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> pio_start_s1_translator:uav_writedata
	wire   [20:0] pio_start_s1_translator_avalon_universal_slave_0_agent_m0_address;                                // pio_start_s1_translator_avalon_universal_slave_0_agent:m0_address -> pio_start_s1_translator:uav_address
	wire          pio_start_s1_translator_avalon_universal_slave_0_agent_m0_write;                                  // pio_start_s1_translator_avalon_universal_slave_0_agent:m0_write -> pio_start_s1_translator:uav_write
	wire          pio_start_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                   // pio_start_s1_translator_avalon_universal_slave_0_agent:m0_lock -> pio_start_s1_translator:uav_lock
	wire          pio_start_s1_translator_avalon_universal_slave_0_agent_m0_read;                                   // pio_start_s1_translator_avalon_universal_slave_0_agent:m0_read -> pio_start_s1_translator:uav_read
	wire   [31:0] pio_start_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                               // pio_start_s1_translator:uav_readdata -> pio_start_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          pio_start_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                          // pio_start_s1_translator:uav_readdatavalid -> pio_start_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          pio_start_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                            // pio_start_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> pio_start_s1_translator:uav_debugaccess
	wire    [3:0] pio_start_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                             // pio_start_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> pio_start_s1_translator:uav_byteenable
	wire          pio_start_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                     // pio_start_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> pio_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          pio_start_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                           // pio_start_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> pio_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          pio_start_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                   // pio_start_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> pio_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [120:0] pio_start_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                            // pio_start_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> pio_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          pio_start_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                           // pio_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> pio_start_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          pio_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                  // pio_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> pio_start_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          pio_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                        // pio_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> pio_start_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          pio_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                // pio_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> pio_start_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [120:0] pio_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                         // pio_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> pio_start_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          pio_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                        // pio_start_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> pio_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          pio_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                      // pio_start_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> pio_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] pio_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                       // pio_start_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> pio_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          pio_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                      // pio_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> pio_start_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          pio_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                      // pio_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> pio_start_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] pio_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                       // pio_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> pio_start_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          pio_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                      // pio_start_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> pio_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                        // hps_vga_data1_s1_translator:uav_waitrequest -> hps_vga_data1_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                         // hps_vga_data1_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> hps_vga_data1_s1_translator:uav_burstcount
	wire   [31:0] hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                          // hps_vga_data1_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> hps_vga_data1_s1_translator:uav_writedata
	wire   [20:0] hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_m0_address;                            // hps_vga_data1_s1_translator_avalon_universal_slave_0_agent:m0_address -> hps_vga_data1_s1_translator:uav_address
	wire          hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_m0_write;                              // hps_vga_data1_s1_translator_avalon_universal_slave_0_agent:m0_write -> hps_vga_data1_s1_translator:uav_write
	wire          hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_m0_lock;                               // hps_vga_data1_s1_translator_avalon_universal_slave_0_agent:m0_lock -> hps_vga_data1_s1_translator:uav_lock
	wire          hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_m0_read;                               // hps_vga_data1_s1_translator_avalon_universal_slave_0_agent:m0_read -> hps_vga_data1_s1_translator:uav_read
	wire   [31:0] hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                           // hps_vga_data1_s1_translator:uav_readdata -> hps_vga_data1_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                      // hps_vga_data1_s1_translator:uav_readdatavalid -> hps_vga_data1_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                        // hps_vga_data1_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> hps_vga_data1_s1_translator:uav_debugaccess
	wire    [3:0] hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                         // hps_vga_data1_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> hps_vga_data1_s1_translator:uav_byteenable
	wire          hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                 // hps_vga_data1_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                       // hps_vga_data1_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;               // hps_vga_data1_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [120:0] hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                        // hps_vga_data1_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                       // hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> hps_vga_data1_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;              // hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> hps_vga_data1_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                    // hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> hps_vga_data1_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;            // hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> hps_vga_data1_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [120:0] hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                     // hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> hps_vga_data1_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                    // hps_vga_data1_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                  // hps_vga_data1_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                   // hps_vga_data1_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                  // hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> hps_vga_data1_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                  // hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> hps_vga_data1_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                   // hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> hps_vga_data1_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                  // hps_vga_data1_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                        // hps_vga_data2_s1_translator:uav_waitrequest -> hps_vga_data2_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                         // hps_vga_data2_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> hps_vga_data2_s1_translator:uav_burstcount
	wire   [31:0] hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                          // hps_vga_data2_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> hps_vga_data2_s1_translator:uav_writedata
	wire   [20:0] hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_m0_address;                            // hps_vga_data2_s1_translator_avalon_universal_slave_0_agent:m0_address -> hps_vga_data2_s1_translator:uav_address
	wire          hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_m0_write;                              // hps_vga_data2_s1_translator_avalon_universal_slave_0_agent:m0_write -> hps_vga_data2_s1_translator:uav_write
	wire          hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_m0_lock;                               // hps_vga_data2_s1_translator_avalon_universal_slave_0_agent:m0_lock -> hps_vga_data2_s1_translator:uav_lock
	wire          hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_m0_read;                               // hps_vga_data2_s1_translator_avalon_universal_slave_0_agent:m0_read -> hps_vga_data2_s1_translator:uav_read
	wire   [31:0] hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                           // hps_vga_data2_s1_translator:uav_readdata -> hps_vga_data2_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                      // hps_vga_data2_s1_translator:uav_readdatavalid -> hps_vga_data2_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                        // hps_vga_data2_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> hps_vga_data2_s1_translator:uav_debugaccess
	wire    [3:0] hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                         // hps_vga_data2_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> hps_vga_data2_s1_translator:uav_byteenable
	wire          hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                 // hps_vga_data2_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                       // hps_vga_data2_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;               // hps_vga_data2_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [120:0] hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                        // hps_vga_data2_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                       // hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> hps_vga_data2_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;              // hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> hps_vga_data2_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                    // hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> hps_vga_data2_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;            // hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> hps_vga_data2_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [120:0] hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                     // hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> hps_vga_data2_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                    // hps_vga_data2_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                  // hps_vga_data2_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                   // hps_vga_data2_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                  // hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> hps_vga_data2_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                  // hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> hps_vga_data2_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                   // hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> hps_vga_data2_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                  // hps_vga_data2_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          sdramclock_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                           // sdramclock_s1_translator:uav_waitrequest -> sdramclock_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] sdramclock_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                            // sdramclock_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> sdramclock_s1_translator:uav_burstcount
	wire   [31:0] sdramclock_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                             // sdramclock_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> sdramclock_s1_translator:uav_writedata
	wire   [20:0] sdramclock_s1_translator_avalon_universal_slave_0_agent_m0_address;                               // sdramclock_s1_translator_avalon_universal_slave_0_agent:m0_address -> sdramclock_s1_translator:uav_address
	wire          sdramclock_s1_translator_avalon_universal_slave_0_agent_m0_write;                                 // sdramclock_s1_translator_avalon_universal_slave_0_agent:m0_write -> sdramclock_s1_translator:uav_write
	wire          sdramclock_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                  // sdramclock_s1_translator_avalon_universal_slave_0_agent:m0_lock -> sdramclock_s1_translator:uav_lock
	wire          sdramclock_s1_translator_avalon_universal_slave_0_agent_m0_read;                                  // sdramclock_s1_translator_avalon_universal_slave_0_agent:m0_read -> sdramclock_s1_translator:uav_read
	wire   [31:0] sdramclock_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                              // sdramclock_s1_translator:uav_readdata -> sdramclock_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          sdramclock_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                         // sdramclock_s1_translator:uav_readdatavalid -> sdramclock_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          sdramclock_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                           // sdramclock_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> sdramclock_s1_translator:uav_debugaccess
	wire    [3:0] sdramclock_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                            // sdramclock_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> sdramclock_s1_translator:uav_byteenable
	wire          sdramclock_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                    // sdramclock_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> sdramclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          sdramclock_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                          // sdramclock_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> sdramclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          sdramclock_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                  // sdramclock_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> sdramclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [120:0] sdramclock_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                           // sdramclock_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> sdramclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          sdramclock_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                          // sdramclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> sdramclock_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          sdramclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                 // sdramclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> sdramclock_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          sdramclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                       // sdramclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> sdramclock_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          sdramclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;               // sdramclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> sdramclock_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [120:0] sdramclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                        // sdramclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> sdramclock_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          sdramclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                       // sdramclock_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> sdramclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          sdramclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                     // sdramclock_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> sdramclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] sdramclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                      // sdramclock_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> sdramclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          sdramclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                     // sdramclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> sdramclock_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          sdramclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                     // sdramclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> sdramclock_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] sdramclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                      // sdramclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> sdramclock_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          sdramclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                     // sdramclock_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> sdramclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          sdram_start_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                          // Sdram_start_s1_translator:uav_waitrequest -> Sdram_start_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] sdram_start_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                           // Sdram_start_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> Sdram_start_s1_translator:uav_burstcount
	wire   [31:0] sdram_start_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                            // Sdram_start_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> Sdram_start_s1_translator:uav_writedata
	wire   [20:0] sdram_start_s1_translator_avalon_universal_slave_0_agent_m0_address;                              // Sdram_start_s1_translator_avalon_universal_slave_0_agent:m0_address -> Sdram_start_s1_translator:uav_address
	wire          sdram_start_s1_translator_avalon_universal_slave_0_agent_m0_write;                                // Sdram_start_s1_translator_avalon_universal_slave_0_agent:m0_write -> Sdram_start_s1_translator:uav_write
	wire          sdram_start_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                 // Sdram_start_s1_translator_avalon_universal_slave_0_agent:m0_lock -> Sdram_start_s1_translator:uav_lock
	wire          sdram_start_s1_translator_avalon_universal_slave_0_agent_m0_read;                                 // Sdram_start_s1_translator_avalon_universal_slave_0_agent:m0_read -> Sdram_start_s1_translator:uav_read
	wire   [31:0] sdram_start_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                             // Sdram_start_s1_translator:uav_readdata -> Sdram_start_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          sdram_start_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                        // Sdram_start_s1_translator:uav_readdatavalid -> Sdram_start_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          sdram_start_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                          // Sdram_start_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> Sdram_start_s1_translator:uav_debugaccess
	wire    [3:0] sdram_start_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                           // Sdram_start_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> Sdram_start_s1_translator:uav_byteenable
	wire          sdram_start_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                   // Sdram_start_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> Sdram_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          sdram_start_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                         // Sdram_start_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> Sdram_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          sdram_start_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                 // Sdram_start_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> Sdram_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [120:0] sdram_start_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                          // Sdram_start_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> Sdram_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          sdram_start_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                         // Sdram_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> Sdram_start_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          sdram_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                // Sdram_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> Sdram_start_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          sdram_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                      // Sdram_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> Sdram_start_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          sdram_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;              // Sdram_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> Sdram_start_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [120:0] sdram_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                       // Sdram_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> Sdram_start_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          sdram_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                      // Sdram_start_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> Sdram_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          sdram_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                    // Sdram_start_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> Sdram_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] sdram_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                     // Sdram_start_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> Sdram_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          sdram_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                    // Sdram_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> Sdram_start_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          sdram_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                    // Sdram_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> Sdram_start_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] sdram_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                     // Sdram_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> Sdram_start_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          sdram_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                    // Sdram_start_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> Sdram_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          fifowe_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                               // FIFOWe_s1_translator:uav_waitrequest -> FIFOWe_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] fifowe_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                                // FIFOWe_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> FIFOWe_s1_translator:uav_burstcount
	wire   [31:0] fifowe_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                 // FIFOWe_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> FIFOWe_s1_translator:uav_writedata
	wire   [20:0] fifowe_s1_translator_avalon_universal_slave_0_agent_m0_address;                                   // FIFOWe_s1_translator_avalon_universal_slave_0_agent:m0_address -> FIFOWe_s1_translator:uav_address
	wire          fifowe_s1_translator_avalon_universal_slave_0_agent_m0_write;                                     // FIFOWe_s1_translator_avalon_universal_slave_0_agent:m0_write -> FIFOWe_s1_translator:uav_write
	wire          fifowe_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                      // FIFOWe_s1_translator_avalon_universal_slave_0_agent:m0_lock -> FIFOWe_s1_translator:uav_lock
	wire          fifowe_s1_translator_avalon_universal_slave_0_agent_m0_read;                                      // FIFOWe_s1_translator_avalon_universal_slave_0_agent:m0_read -> FIFOWe_s1_translator:uav_read
	wire   [31:0] fifowe_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                  // FIFOWe_s1_translator:uav_readdata -> FIFOWe_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          fifowe_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                             // FIFOWe_s1_translator:uav_readdatavalid -> FIFOWe_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          fifowe_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                               // FIFOWe_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> FIFOWe_s1_translator:uav_debugaccess
	wire    [3:0] fifowe_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                                // FIFOWe_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> FIFOWe_s1_translator:uav_byteenable
	wire          fifowe_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                        // FIFOWe_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> FIFOWe_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          fifowe_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                              // FIFOWe_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> FIFOWe_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          fifowe_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                      // FIFOWe_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> FIFOWe_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [120:0] fifowe_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                               // FIFOWe_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> FIFOWe_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          fifowe_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                              // FIFOWe_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> FIFOWe_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          fifowe_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                     // FIFOWe_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> FIFOWe_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          fifowe_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                           // FIFOWe_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> FIFOWe_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          fifowe_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                   // FIFOWe_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> FIFOWe_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [120:0] fifowe_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                            // FIFOWe_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> FIFOWe_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          fifowe_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                           // FIFOWe_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> FIFOWe_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          fifowe_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                         // FIFOWe_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> FIFOWe_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] fifowe_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                          // FIFOWe_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> FIFOWe_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          fifowe_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                         // FIFOWe_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> FIFOWe_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          fifowe_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                         // FIFOWe_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> FIFOWe_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] fifowe_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                          // FIFOWe_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> FIFOWe_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          fifowe_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                         // FIFOWe_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> FIFOWe_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          binaryscale_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                          // binaryscale_s1_translator:uav_waitrequest -> binaryscale_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] binaryscale_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                           // binaryscale_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> binaryscale_s1_translator:uav_burstcount
	wire   [31:0] binaryscale_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                            // binaryscale_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> binaryscale_s1_translator:uav_writedata
	wire   [20:0] binaryscale_s1_translator_avalon_universal_slave_0_agent_m0_address;                              // binaryscale_s1_translator_avalon_universal_slave_0_agent:m0_address -> binaryscale_s1_translator:uav_address
	wire          binaryscale_s1_translator_avalon_universal_slave_0_agent_m0_write;                                // binaryscale_s1_translator_avalon_universal_slave_0_agent:m0_write -> binaryscale_s1_translator:uav_write
	wire          binaryscale_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                 // binaryscale_s1_translator_avalon_universal_slave_0_agent:m0_lock -> binaryscale_s1_translator:uav_lock
	wire          binaryscale_s1_translator_avalon_universal_slave_0_agent_m0_read;                                 // binaryscale_s1_translator_avalon_universal_slave_0_agent:m0_read -> binaryscale_s1_translator:uav_read
	wire   [31:0] binaryscale_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                             // binaryscale_s1_translator:uav_readdata -> binaryscale_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          binaryscale_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                        // binaryscale_s1_translator:uav_readdatavalid -> binaryscale_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          binaryscale_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                          // binaryscale_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> binaryscale_s1_translator:uav_debugaccess
	wire    [3:0] binaryscale_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                           // binaryscale_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> binaryscale_s1_translator:uav_byteenable
	wire          binaryscale_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                   // binaryscale_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> binaryscale_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          binaryscale_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                         // binaryscale_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> binaryscale_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          binaryscale_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                 // binaryscale_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> binaryscale_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [120:0] binaryscale_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                          // binaryscale_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> binaryscale_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          binaryscale_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                         // binaryscale_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> binaryscale_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          binaryscale_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                // binaryscale_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> binaryscale_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          binaryscale_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                      // binaryscale_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> binaryscale_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          binaryscale_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;              // binaryscale_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> binaryscale_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [120:0] binaryscale_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                       // binaryscale_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> binaryscale_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          binaryscale_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                      // binaryscale_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> binaryscale_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          binaryscale_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                    // binaryscale_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> binaryscale_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] binaryscale_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                     // binaryscale_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> binaryscale_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          binaryscale_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                    // binaryscale_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> binaryscale_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          binaryscale_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                    // binaryscale_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> binaryscale_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] binaryscale_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                     // binaryscale_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> binaryscale_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          binaryscale_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                    // binaryscale_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> binaryscale_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          greyparamter_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                         // greyparamter_s1_translator:uav_waitrequest -> greyparamter_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] greyparamter_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                          // greyparamter_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> greyparamter_s1_translator:uav_burstcount
	wire   [31:0] greyparamter_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                           // greyparamter_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> greyparamter_s1_translator:uav_writedata
	wire   [20:0] greyparamter_s1_translator_avalon_universal_slave_0_agent_m0_address;                             // greyparamter_s1_translator_avalon_universal_slave_0_agent:m0_address -> greyparamter_s1_translator:uav_address
	wire          greyparamter_s1_translator_avalon_universal_slave_0_agent_m0_write;                               // greyparamter_s1_translator_avalon_universal_slave_0_agent:m0_write -> greyparamter_s1_translator:uav_write
	wire          greyparamter_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                // greyparamter_s1_translator_avalon_universal_slave_0_agent:m0_lock -> greyparamter_s1_translator:uav_lock
	wire          greyparamter_s1_translator_avalon_universal_slave_0_agent_m0_read;                                // greyparamter_s1_translator_avalon_universal_slave_0_agent:m0_read -> greyparamter_s1_translator:uav_read
	wire   [31:0] greyparamter_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                            // greyparamter_s1_translator:uav_readdata -> greyparamter_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          greyparamter_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                       // greyparamter_s1_translator:uav_readdatavalid -> greyparamter_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          greyparamter_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                         // greyparamter_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> greyparamter_s1_translator:uav_debugaccess
	wire    [3:0] greyparamter_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                          // greyparamter_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> greyparamter_s1_translator:uav_byteenable
	wire          greyparamter_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                  // greyparamter_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> greyparamter_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          greyparamter_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                        // greyparamter_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> greyparamter_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          greyparamter_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                // greyparamter_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> greyparamter_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [120:0] greyparamter_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                         // greyparamter_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> greyparamter_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          greyparamter_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                        // greyparamter_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> greyparamter_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          greyparamter_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;               // greyparamter_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> greyparamter_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          greyparamter_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                     // greyparamter_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> greyparamter_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          greyparamter_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;             // greyparamter_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> greyparamter_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [120:0] greyparamter_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                      // greyparamter_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> greyparamter_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          greyparamter_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                     // greyparamter_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> greyparamter_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          greyparamter_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                   // greyparamter_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> greyparamter_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] greyparamter_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                    // greyparamter_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> greyparamter_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          greyparamter_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                   // greyparamter_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> greyparamter_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          greyparamter_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                   // greyparamter_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> greyparamter_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] greyparamter_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                    // greyparamter_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> greyparamter_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          greyparamter_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                   // greyparamter_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> greyparamter_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          vgaclock_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                             // vgaclock_s1_translator:uav_waitrequest -> vgaclock_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] vgaclock_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                              // vgaclock_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> vgaclock_s1_translator:uav_burstcount
	wire   [31:0] vgaclock_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                               // vgaclock_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> vgaclock_s1_translator:uav_writedata
	wire   [20:0] vgaclock_s1_translator_avalon_universal_slave_0_agent_m0_address;                                 // vgaclock_s1_translator_avalon_universal_slave_0_agent:m0_address -> vgaclock_s1_translator:uav_address
	wire          vgaclock_s1_translator_avalon_universal_slave_0_agent_m0_write;                                   // vgaclock_s1_translator_avalon_universal_slave_0_agent:m0_write -> vgaclock_s1_translator:uav_write
	wire          vgaclock_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                    // vgaclock_s1_translator_avalon_universal_slave_0_agent:m0_lock -> vgaclock_s1_translator:uav_lock
	wire          vgaclock_s1_translator_avalon_universal_slave_0_agent_m0_read;                                    // vgaclock_s1_translator_avalon_universal_slave_0_agent:m0_read -> vgaclock_s1_translator:uav_read
	wire   [31:0] vgaclock_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                // vgaclock_s1_translator:uav_readdata -> vgaclock_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          vgaclock_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                           // vgaclock_s1_translator:uav_readdatavalid -> vgaclock_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          vgaclock_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                             // vgaclock_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> vgaclock_s1_translator:uav_debugaccess
	wire    [3:0] vgaclock_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                              // vgaclock_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> vgaclock_s1_translator:uav_byteenable
	wire          vgaclock_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                      // vgaclock_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> vgaclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          vgaclock_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                            // vgaclock_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> vgaclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          vgaclock_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                    // vgaclock_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> vgaclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [120:0] vgaclock_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                             // vgaclock_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> vgaclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          vgaclock_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                            // vgaclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> vgaclock_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          vgaclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                   // vgaclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> vgaclock_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          vgaclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                         // vgaclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> vgaclock_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          vgaclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                 // vgaclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> vgaclock_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [120:0] vgaclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                          // vgaclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> vgaclock_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          vgaclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                         // vgaclock_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> vgaclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          vgaclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                       // vgaclock_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> vgaclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] vgaclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                        // vgaclock_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> vgaclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          vgaclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                       // vgaclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> vgaclock_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          vgaclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                       // vgaclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> vgaclock_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] vgaclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                        // vgaclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> vgaclock_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          vgaclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                       // vgaclock_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> vgaclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          vgabinary_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                            // vgabinary_s1_translator:uav_waitrequest -> vgabinary_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] vgabinary_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                             // vgabinary_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> vgabinary_s1_translator:uav_burstcount
	wire   [31:0] vgabinary_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                              // vgabinary_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> vgabinary_s1_translator:uav_writedata
	wire   [20:0] vgabinary_s1_translator_avalon_universal_slave_0_agent_m0_address;                                // vgabinary_s1_translator_avalon_universal_slave_0_agent:m0_address -> vgabinary_s1_translator:uav_address
	wire          vgabinary_s1_translator_avalon_universal_slave_0_agent_m0_write;                                  // vgabinary_s1_translator_avalon_universal_slave_0_agent:m0_write -> vgabinary_s1_translator:uav_write
	wire          vgabinary_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                   // vgabinary_s1_translator_avalon_universal_slave_0_agent:m0_lock -> vgabinary_s1_translator:uav_lock
	wire          vgabinary_s1_translator_avalon_universal_slave_0_agent_m0_read;                                   // vgabinary_s1_translator_avalon_universal_slave_0_agent:m0_read -> vgabinary_s1_translator:uav_read
	wire   [31:0] vgabinary_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                               // vgabinary_s1_translator:uav_readdata -> vgabinary_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          vgabinary_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                          // vgabinary_s1_translator:uav_readdatavalid -> vgabinary_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          vgabinary_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                            // vgabinary_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> vgabinary_s1_translator:uav_debugaccess
	wire    [3:0] vgabinary_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                             // vgabinary_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> vgabinary_s1_translator:uav_byteenable
	wire          vgabinary_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                     // vgabinary_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> vgabinary_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          vgabinary_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                           // vgabinary_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> vgabinary_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          vgabinary_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                   // vgabinary_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> vgabinary_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [120:0] vgabinary_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                            // vgabinary_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> vgabinary_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          vgabinary_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                           // vgabinary_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> vgabinary_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          vgabinary_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                  // vgabinary_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> vgabinary_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          vgabinary_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                        // vgabinary_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> vgabinary_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          vgabinary_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                // vgabinary_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> vgabinary_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [120:0] vgabinary_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                         // vgabinary_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> vgabinary_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          vgabinary_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                        // vgabinary_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> vgabinary_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          vgabinary_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                      // vgabinary_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> vgabinary_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] vgabinary_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                       // vgabinary_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> vgabinary_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          vgabinary_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                      // vgabinary_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> vgabinary_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          vgabinary_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                      // vgabinary_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> vgabinary_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] vgabinary_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                       // vgabinary_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> vgabinary_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          vgabinary_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                      // vgabinary_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> vgabinary_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          vgaread_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                              // vgaread_s1_translator:uav_waitrequest -> vgaread_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] vgaread_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                               // vgaread_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> vgaread_s1_translator:uav_burstcount
	wire   [31:0] vgaread_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                // vgaread_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> vgaread_s1_translator:uav_writedata
	wire   [20:0] vgaread_s1_translator_avalon_universal_slave_0_agent_m0_address;                                  // vgaread_s1_translator_avalon_universal_slave_0_agent:m0_address -> vgaread_s1_translator:uav_address
	wire          vgaread_s1_translator_avalon_universal_slave_0_agent_m0_write;                                    // vgaread_s1_translator_avalon_universal_slave_0_agent:m0_write -> vgaread_s1_translator:uav_write
	wire          vgaread_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                     // vgaread_s1_translator_avalon_universal_slave_0_agent:m0_lock -> vgaread_s1_translator:uav_lock
	wire          vgaread_s1_translator_avalon_universal_slave_0_agent_m0_read;                                     // vgaread_s1_translator_avalon_universal_slave_0_agent:m0_read -> vgaread_s1_translator:uav_read
	wire   [31:0] vgaread_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                 // vgaread_s1_translator:uav_readdata -> vgaread_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          vgaread_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                            // vgaread_s1_translator:uav_readdatavalid -> vgaread_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          vgaread_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                              // vgaread_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> vgaread_s1_translator:uav_debugaccess
	wire    [3:0] vgaread_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                               // vgaread_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> vgaread_s1_translator:uav_byteenable
	wire          vgaread_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                       // vgaread_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> vgaread_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          vgaread_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                             // vgaread_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> vgaread_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          vgaread_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                     // vgaread_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> vgaread_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [120:0] vgaread_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                              // vgaread_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> vgaread_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          vgaread_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                             // vgaread_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> vgaread_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          vgaread_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                    // vgaread_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> vgaread_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          vgaread_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                          // vgaread_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> vgaread_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          vgaread_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                  // vgaread_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> vgaread_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [120:0] vgaread_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                           // vgaread_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> vgaread_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          vgaread_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                          // vgaread_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> vgaread_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          vgaread_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                        // vgaread_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> vgaread_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] vgaread_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                         // vgaread_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> vgaread_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          vgaread_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                        // vgaread_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> vgaread_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          vgaread_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                        // vgaread_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> vgaread_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] vgaread_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                         // vgaread_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> vgaread_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          vgaread_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                        // vgaread_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> vgaread_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          topedge_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                              // topedge_s1_translator:uav_waitrequest -> topedge_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] topedge_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                               // topedge_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> topedge_s1_translator:uav_burstcount
	wire   [31:0] topedge_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                // topedge_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> topedge_s1_translator:uav_writedata
	wire   [20:0] topedge_s1_translator_avalon_universal_slave_0_agent_m0_address;                                  // topedge_s1_translator_avalon_universal_slave_0_agent:m0_address -> topedge_s1_translator:uav_address
	wire          topedge_s1_translator_avalon_universal_slave_0_agent_m0_write;                                    // topedge_s1_translator_avalon_universal_slave_0_agent:m0_write -> topedge_s1_translator:uav_write
	wire          topedge_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                     // topedge_s1_translator_avalon_universal_slave_0_agent:m0_lock -> topedge_s1_translator:uav_lock
	wire          topedge_s1_translator_avalon_universal_slave_0_agent_m0_read;                                     // topedge_s1_translator_avalon_universal_slave_0_agent:m0_read -> topedge_s1_translator:uav_read
	wire   [31:0] topedge_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                 // topedge_s1_translator:uav_readdata -> topedge_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          topedge_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                            // topedge_s1_translator:uav_readdatavalid -> topedge_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          topedge_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                              // topedge_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> topedge_s1_translator:uav_debugaccess
	wire    [3:0] topedge_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                               // topedge_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> topedge_s1_translator:uav_byteenable
	wire          topedge_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                       // topedge_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> topedge_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          topedge_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                             // topedge_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> topedge_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          topedge_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                     // topedge_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> topedge_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [120:0] topedge_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                              // topedge_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> topedge_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          topedge_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                             // topedge_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> topedge_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          topedge_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                    // topedge_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> topedge_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          topedge_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                          // topedge_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> topedge_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          topedge_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                  // topedge_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> topedge_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [120:0] topedge_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                           // topedge_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> topedge_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          topedge_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                          // topedge_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> topedge_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          topedge_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                        // topedge_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> topedge_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] topedge_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                         // topedge_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> topedge_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          topedge_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                        // topedge_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> topedge_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          topedge_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                        // topedge_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> topedge_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] topedge_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                         // topedge_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> topedge_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          topedge_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                        // topedge_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> topedge_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          hwreset_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                              // hwreset_s1_translator:uav_waitrequest -> hwreset_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] hwreset_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                               // hwreset_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> hwreset_s1_translator:uav_burstcount
	wire   [31:0] hwreset_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                // hwreset_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> hwreset_s1_translator:uav_writedata
	wire   [20:0] hwreset_s1_translator_avalon_universal_slave_0_agent_m0_address;                                  // hwreset_s1_translator_avalon_universal_slave_0_agent:m0_address -> hwreset_s1_translator:uav_address
	wire          hwreset_s1_translator_avalon_universal_slave_0_agent_m0_write;                                    // hwreset_s1_translator_avalon_universal_slave_0_agent:m0_write -> hwreset_s1_translator:uav_write
	wire          hwreset_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                     // hwreset_s1_translator_avalon_universal_slave_0_agent:m0_lock -> hwreset_s1_translator:uav_lock
	wire          hwreset_s1_translator_avalon_universal_slave_0_agent_m0_read;                                     // hwreset_s1_translator_avalon_universal_slave_0_agent:m0_read -> hwreset_s1_translator:uav_read
	wire   [31:0] hwreset_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                 // hwreset_s1_translator:uav_readdata -> hwreset_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          hwreset_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                            // hwreset_s1_translator:uav_readdatavalid -> hwreset_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          hwreset_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                              // hwreset_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> hwreset_s1_translator:uav_debugaccess
	wire    [3:0] hwreset_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                               // hwreset_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> hwreset_s1_translator:uav_byteenable
	wire          hwreset_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                       // hwreset_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> hwreset_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          hwreset_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                             // hwreset_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> hwreset_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          hwreset_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                     // hwreset_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> hwreset_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [120:0] hwreset_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                              // hwreset_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> hwreset_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          hwreset_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                             // hwreset_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> hwreset_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          hwreset_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                    // hwreset_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> hwreset_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          hwreset_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                          // hwreset_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> hwreset_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          hwreset_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                  // hwreset_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> hwreset_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [120:0] hwreset_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                           // hwreset_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> hwreset_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          hwreset_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                          // hwreset_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> hwreset_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          hwreset_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                        // hwreset_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> hwreset_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] hwreset_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                         // hwreset_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> hwreset_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          hwreset_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                        // hwreset_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> hwreset_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          hwreset_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                        // hwreset_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> hwreset_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] hwreset_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                         // hwreset_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> hwreset_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          hwreset_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                        // hwreset_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> hwreset_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          lval_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                                 // Lval_s1_translator:uav_waitrequest -> Lval_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] lval_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                                  // Lval_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> Lval_s1_translator:uav_burstcount
	wire   [31:0] lval_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                   // Lval_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> Lval_s1_translator:uav_writedata
	wire   [20:0] lval_s1_translator_avalon_universal_slave_0_agent_m0_address;                                     // Lval_s1_translator_avalon_universal_slave_0_agent:m0_address -> Lval_s1_translator:uav_address
	wire          lval_s1_translator_avalon_universal_slave_0_agent_m0_write;                                       // Lval_s1_translator_avalon_universal_slave_0_agent:m0_write -> Lval_s1_translator:uav_write
	wire          lval_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                        // Lval_s1_translator_avalon_universal_slave_0_agent:m0_lock -> Lval_s1_translator:uav_lock
	wire          lval_s1_translator_avalon_universal_slave_0_agent_m0_read;                                        // Lval_s1_translator_avalon_universal_slave_0_agent:m0_read -> Lval_s1_translator:uav_read
	wire   [31:0] lval_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                    // Lval_s1_translator:uav_readdata -> Lval_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          lval_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                               // Lval_s1_translator:uav_readdatavalid -> Lval_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          lval_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                                 // Lval_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> Lval_s1_translator:uav_debugaccess
	wire    [3:0] lval_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                                  // Lval_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> Lval_s1_translator:uav_byteenable
	wire          lval_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                          // Lval_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> Lval_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          lval_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                                // Lval_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> Lval_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          lval_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                        // Lval_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> Lval_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [120:0] lval_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                                 // Lval_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> Lval_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          lval_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                                // Lval_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> Lval_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          lval_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                       // Lval_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> Lval_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          lval_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                             // Lval_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> Lval_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          lval_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                     // Lval_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> Lval_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [120:0] lval_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                              // Lval_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> Lval_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          lval_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                             // Lval_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> Lval_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          lval_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                           // Lval_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> Lval_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] lval_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                            // Lval_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> Lval_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          lval_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                           // Lval_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> Lval_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          lval_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                           // Lval_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> Lval_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] lval_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                            // Lval_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> Lval_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          lval_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                           // Lval_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> Lval_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          arm_a9_hps_h2f_lw_axi_master_agent_write_cp_endofpacket;                                          // arm_a9_hps_h2f_lw_axi_master_agent:write_cp_endofpacket -> addr_router:sink_endofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_agent_write_cp_valid;                                                // arm_a9_hps_h2f_lw_axi_master_agent:write_cp_valid -> addr_router:sink_valid
	wire          arm_a9_hps_h2f_lw_axi_master_agent_write_cp_startofpacket;                                        // arm_a9_hps_h2f_lw_axi_master_agent:write_cp_startofpacket -> addr_router:sink_startofpacket
	wire  [119:0] arm_a9_hps_h2f_lw_axi_master_agent_write_cp_data;                                                 // arm_a9_hps_h2f_lw_axi_master_agent:write_cp_data -> addr_router:sink_data
	wire          arm_a9_hps_h2f_lw_axi_master_agent_write_cp_ready;                                                // addr_router:sink_ready -> arm_a9_hps_h2f_lw_axi_master_agent:write_cp_ready
	wire          arm_a9_hps_h2f_lw_axi_master_agent_read_cp_endofpacket;                                           // arm_a9_hps_h2f_lw_axi_master_agent:read_cp_endofpacket -> addr_router_001:sink_endofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_agent_read_cp_valid;                                                 // arm_a9_hps_h2f_lw_axi_master_agent:read_cp_valid -> addr_router_001:sink_valid
	wire          arm_a9_hps_h2f_lw_axi_master_agent_read_cp_startofpacket;                                         // arm_a9_hps_h2f_lw_axi_master_agent:read_cp_startofpacket -> addr_router_001:sink_startofpacket
	wire  [119:0] arm_a9_hps_h2f_lw_axi_master_agent_read_cp_data;                                                  // arm_a9_hps_h2f_lw_axi_master_agent:read_cp_data -> addr_router_001:sink_data
	wire          arm_a9_hps_h2f_lw_axi_master_agent_read_cp_ready;                                                 // addr_router_001:sink_ready -> arm_a9_hps_h2f_lw_axi_master_agent:read_cp_ready
	wire          pio0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                                 // pio0_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router:sink_endofpacket
	wire          pio0_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                       // pio0_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router:sink_valid
	wire          pio0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                               // pio0_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router:sink_startofpacket
	wire  [119:0] pio0_s1_translator_avalon_universal_slave_0_agent_rp_data;                                        // pio0_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router:sink_data
	wire          pio0_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                       // id_router:sink_ready -> pio0_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_src_endofpacket;                                                                        // id_router:src_endofpacket -> rsp_xbar_demux:sink_endofpacket
	wire          id_router_src_valid;                                                                              // id_router:src_valid -> rsp_xbar_demux:sink_valid
	wire          id_router_src_startofpacket;                                                                      // id_router:src_startofpacket -> rsp_xbar_demux:sink_startofpacket
	wire  [119:0] id_router_src_data;                                                                               // id_router:src_data -> rsp_xbar_demux:sink_data
	wire   [17:0] id_router_src_channel;                                                                            // id_router:src_channel -> rsp_xbar_demux:sink_channel
	wire          id_router_src_ready;                                                                              // rsp_xbar_demux:sink_ready -> id_router:src_ready
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_endofpacket;             // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_001:sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_valid;                   // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_001:sink_valid
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_startofpacket;           // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_001:sink_startofpacket
	wire  [119:0] jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_data;                    // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rp_data -> id_router_001:sink_data
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_ready;                   // id_router_001:sink_ready -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_001_src_endofpacket;                                                                    // id_router_001:src_endofpacket -> rsp_xbar_demux_001:sink_endofpacket
	wire          id_router_001_src_valid;                                                                          // id_router_001:src_valid -> rsp_xbar_demux_001:sink_valid
	wire          id_router_001_src_startofpacket;                                                                  // id_router_001:src_startofpacket -> rsp_xbar_demux_001:sink_startofpacket
	wire  [119:0] id_router_001_src_data;                                                                           // id_router_001:src_data -> rsp_xbar_demux_001:sink_data
	wire   [17:0] id_router_001_src_channel;                                                                        // id_router_001:src_channel -> rsp_xbar_demux_001:sink_channel
	wire          id_router_001_src_ready;                                                                          // rsp_xbar_demux_001:sink_ready -> id_router_001:src_ready
	wire          sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                   // sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_002:sink_endofpacket
	wire          sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rp_valid;                         // sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_002:sink_valid
	wire          sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                 // sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_002:sink_startofpacket
	wire  [119:0] sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rp_data;                          // sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_002:sink_data
	wire          sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rp_ready;                         // id_router_002:sink_ready -> sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_002_src_endofpacket;                                                                    // id_router_002:src_endofpacket -> rsp_xbar_demux_002:sink_endofpacket
	wire          id_router_002_src_valid;                                                                          // id_router_002:src_valid -> rsp_xbar_demux_002:sink_valid
	wire          id_router_002_src_startofpacket;                                                                  // id_router_002:src_startofpacket -> rsp_xbar_demux_002:sink_startofpacket
	wire  [119:0] id_router_002_src_data;                                                                           // id_router_002:src_data -> rsp_xbar_demux_002:sink_data
	wire   [17:0] id_router_002_src_channel;                                                                        // id_router_002:src_channel -> rsp_xbar_demux_002:sink_channel
	wire          id_router_002_src_ready;                                                                          // rsp_xbar_demux_002:sink_ready -> id_router_002:src_ready
	wire          sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                   // sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_003:sink_endofpacket
	wire          sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rp_valid;                         // sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_003:sink_valid
	wire          sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                 // sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_003:sink_startofpacket
	wire  [119:0] sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rp_data;                          // sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_003:sink_data
	wire          sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rp_ready;                         // id_router_003:sink_ready -> sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_003_src_endofpacket;                                                                    // id_router_003:src_endofpacket -> rsp_xbar_demux_003:sink_endofpacket
	wire          id_router_003_src_valid;                                                                          // id_router_003:src_valid -> rsp_xbar_demux_003:sink_valid
	wire          id_router_003_src_startofpacket;                                                                  // id_router_003:src_startofpacket -> rsp_xbar_demux_003:sink_startofpacket
	wire  [119:0] id_router_003_src_data;                                                                           // id_router_003:src_data -> rsp_xbar_demux_003:sink_data
	wire   [17:0] id_router_003_src_channel;                                                                        // id_router_003:src_channel -> rsp_xbar_demux_003:sink_channel
	wire          id_router_003_src_ready;                                                                          // rsp_xbar_demux_003:sink_ready -> id_router_003:src_ready
	wire          pio_start_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                            // pio_start_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_004:sink_endofpacket
	wire          pio_start_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                  // pio_start_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_004:sink_valid
	wire          pio_start_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                          // pio_start_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_004:sink_startofpacket
	wire  [119:0] pio_start_s1_translator_avalon_universal_slave_0_agent_rp_data;                                   // pio_start_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_004:sink_data
	wire          pio_start_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                  // id_router_004:sink_ready -> pio_start_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_004_src_endofpacket;                                                                    // id_router_004:src_endofpacket -> rsp_xbar_demux_004:sink_endofpacket
	wire          id_router_004_src_valid;                                                                          // id_router_004:src_valid -> rsp_xbar_demux_004:sink_valid
	wire          id_router_004_src_startofpacket;                                                                  // id_router_004:src_startofpacket -> rsp_xbar_demux_004:sink_startofpacket
	wire  [119:0] id_router_004_src_data;                                                                           // id_router_004:src_data -> rsp_xbar_demux_004:sink_data
	wire   [17:0] id_router_004_src_channel;                                                                        // id_router_004:src_channel -> rsp_xbar_demux_004:sink_channel
	wire          id_router_004_src_ready;                                                                          // rsp_xbar_demux_004:sink_ready -> id_router_004:src_ready
	wire          hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                        // hps_vga_data1_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_005:sink_endofpacket
	wire          hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rp_valid;                              // hps_vga_data1_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_005:sink_valid
	wire          hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                      // hps_vga_data1_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_005:sink_startofpacket
	wire  [119:0] hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rp_data;                               // hps_vga_data1_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_005:sink_data
	wire          hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rp_ready;                              // id_router_005:sink_ready -> hps_vga_data1_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_005_src_endofpacket;                                                                    // id_router_005:src_endofpacket -> rsp_xbar_demux_005:sink_endofpacket
	wire          id_router_005_src_valid;                                                                          // id_router_005:src_valid -> rsp_xbar_demux_005:sink_valid
	wire          id_router_005_src_startofpacket;                                                                  // id_router_005:src_startofpacket -> rsp_xbar_demux_005:sink_startofpacket
	wire  [119:0] id_router_005_src_data;                                                                           // id_router_005:src_data -> rsp_xbar_demux_005:sink_data
	wire   [17:0] id_router_005_src_channel;                                                                        // id_router_005:src_channel -> rsp_xbar_demux_005:sink_channel
	wire          id_router_005_src_ready;                                                                          // rsp_xbar_demux_005:sink_ready -> id_router_005:src_ready
	wire          hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                        // hps_vga_data2_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_006:sink_endofpacket
	wire          hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rp_valid;                              // hps_vga_data2_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_006:sink_valid
	wire          hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                      // hps_vga_data2_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_006:sink_startofpacket
	wire  [119:0] hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rp_data;                               // hps_vga_data2_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_006:sink_data
	wire          hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rp_ready;                              // id_router_006:sink_ready -> hps_vga_data2_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_006_src_endofpacket;                                                                    // id_router_006:src_endofpacket -> rsp_xbar_demux_006:sink_endofpacket
	wire          id_router_006_src_valid;                                                                          // id_router_006:src_valid -> rsp_xbar_demux_006:sink_valid
	wire          id_router_006_src_startofpacket;                                                                  // id_router_006:src_startofpacket -> rsp_xbar_demux_006:sink_startofpacket
	wire  [119:0] id_router_006_src_data;                                                                           // id_router_006:src_data -> rsp_xbar_demux_006:sink_data
	wire   [17:0] id_router_006_src_channel;                                                                        // id_router_006:src_channel -> rsp_xbar_demux_006:sink_channel
	wire          id_router_006_src_ready;                                                                          // rsp_xbar_demux_006:sink_ready -> id_router_006:src_ready
	wire          sdramclock_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                           // sdramclock_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_007:sink_endofpacket
	wire          sdramclock_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                 // sdramclock_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_007:sink_valid
	wire          sdramclock_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                         // sdramclock_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_007:sink_startofpacket
	wire  [119:0] sdramclock_s1_translator_avalon_universal_slave_0_agent_rp_data;                                  // sdramclock_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_007:sink_data
	wire          sdramclock_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                 // id_router_007:sink_ready -> sdramclock_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_007_src_endofpacket;                                                                    // id_router_007:src_endofpacket -> rsp_xbar_demux_007:sink_endofpacket
	wire          id_router_007_src_valid;                                                                          // id_router_007:src_valid -> rsp_xbar_demux_007:sink_valid
	wire          id_router_007_src_startofpacket;                                                                  // id_router_007:src_startofpacket -> rsp_xbar_demux_007:sink_startofpacket
	wire  [119:0] id_router_007_src_data;                                                                           // id_router_007:src_data -> rsp_xbar_demux_007:sink_data
	wire   [17:0] id_router_007_src_channel;                                                                        // id_router_007:src_channel -> rsp_xbar_demux_007:sink_channel
	wire          id_router_007_src_ready;                                                                          // rsp_xbar_demux_007:sink_ready -> id_router_007:src_ready
	wire          sdram_start_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                          // Sdram_start_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_008:sink_endofpacket
	wire          sdram_start_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                // Sdram_start_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_008:sink_valid
	wire          sdram_start_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                        // Sdram_start_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_008:sink_startofpacket
	wire  [119:0] sdram_start_s1_translator_avalon_universal_slave_0_agent_rp_data;                                 // Sdram_start_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_008:sink_data
	wire          sdram_start_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                // id_router_008:sink_ready -> Sdram_start_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_008_src_endofpacket;                                                                    // id_router_008:src_endofpacket -> rsp_xbar_demux_008:sink_endofpacket
	wire          id_router_008_src_valid;                                                                          // id_router_008:src_valid -> rsp_xbar_demux_008:sink_valid
	wire          id_router_008_src_startofpacket;                                                                  // id_router_008:src_startofpacket -> rsp_xbar_demux_008:sink_startofpacket
	wire  [119:0] id_router_008_src_data;                                                                           // id_router_008:src_data -> rsp_xbar_demux_008:sink_data
	wire   [17:0] id_router_008_src_channel;                                                                        // id_router_008:src_channel -> rsp_xbar_demux_008:sink_channel
	wire          id_router_008_src_ready;                                                                          // rsp_xbar_demux_008:sink_ready -> id_router_008:src_ready
	wire          fifowe_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                               // FIFOWe_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_009:sink_endofpacket
	wire          fifowe_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                     // FIFOWe_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_009:sink_valid
	wire          fifowe_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                             // FIFOWe_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_009:sink_startofpacket
	wire  [119:0] fifowe_s1_translator_avalon_universal_slave_0_agent_rp_data;                                      // FIFOWe_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_009:sink_data
	wire          fifowe_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                     // id_router_009:sink_ready -> FIFOWe_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_009_src_endofpacket;                                                                    // id_router_009:src_endofpacket -> rsp_xbar_demux_009:sink_endofpacket
	wire          id_router_009_src_valid;                                                                          // id_router_009:src_valid -> rsp_xbar_demux_009:sink_valid
	wire          id_router_009_src_startofpacket;                                                                  // id_router_009:src_startofpacket -> rsp_xbar_demux_009:sink_startofpacket
	wire  [119:0] id_router_009_src_data;                                                                           // id_router_009:src_data -> rsp_xbar_demux_009:sink_data
	wire   [17:0] id_router_009_src_channel;                                                                        // id_router_009:src_channel -> rsp_xbar_demux_009:sink_channel
	wire          id_router_009_src_ready;                                                                          // rsp_xbar_demux_009:sink_ready -> id_router_009:src_ready
	wire          binaryscale_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                          // binaryscale_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_010:sink_endofpacket
	wire          binaryscale_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                // binaryscale_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_010:sink_valid
	wire          binaryscale_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                        // binaryscale_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_010:sink_startofpacket
	wire  [119:0] binaryscale_s1_translator_avalon_universal_slave_0_agent_rp_data;                                 // binaryscale_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_010:sink_data
	wire          binaryscale_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                // id_router_010:sink_ready -> binaryscale_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_010_src_endofpacket;                                                                    // id_router_010:src_endofpacket -> rsp_xbar_demux_010:sink_endofpacket
	wire          id_router_010_src_valid;                                                                          // id_router_010:src_valid -> rsp_xbar_demux_010:sink_valid
	wire          id_router_010_src_startofpacket;                                                                  // id_router_010:src_startofpacket -> rsp_xbar_demux_010:sink_startofpacket
	wire  [119:0] id_router_010_src_data;                                                                           // id_router_010:src_data -> rsp_xbar_demux_010:sink_data
	wire   [17:0] id_router_010_src_channel;                                                                        // id_router_010:src_channel -> rsp_xbar_demux_010:sink_channel
	wire          id_router_010_src_ready;                                                                          // rsp_xbar_demux_010:sink_ready -> id_router_010:src_ready
	wire          greyparamter_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                         // greyparamter_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_011:sink_endofpacket
	wire          greyparamter_s1_translator_avalon_universal_slave_0_agent_rp_valid;                               // greyparamter_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_011:sink_valid
	wire          greyparamter_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                       // greyparamter_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_011:sink_startofpacket
	wire  [119:0] greyparamter_s1_translator_avalon_universal_slave_0_agent_rp_data;                                // greyparamter_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_011:sink_data
	wire          greyparamter_s1_translator_avalon_universal_slave_0_agent_rp_ready;                               // id_router_011:sink_ready -> greyparamter_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_011_src_endofpacket;                                                                    // id_router_011:src_endofpacket -> rsp_xbar_demux_011:sink_endofpacket
	wire          id_router_011_src_valid;                                                                          // id_router_011:src_valid -> rsp_xbar_demux_011:sink_valid
	wire          id_router_011_src_startofpacket;                                                                  // id_router_011:src_startofpacket -> rsp_xbar_demux_011:sink_startofpacket
	wire  [119:0] id_router_011_src_data;                                                                           // id_router_011:src_data -> rsp_xbar_demux_011:sink_data
	wire   [17:0] id_router_011_src_channel;                                                                        // id_router_011:src_channel -> rsp_xbar_demux_011:sink_channel
	wire          id_router_011_src_ready;                                                                          // rsp_xbar_demux_011:sink_ready -> id_router_011:src_ready
	wire          vgaclock_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                             // vgaclock_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_012:sink_endofpacket
	wire          vgaclock_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                   // vgaclock_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_012:sink_valid
	wire          vgaclock_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                           // vgaclock_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_012:sink_startofpacket
	wire  [119:0] vgaclock_s1_translator_avalon_universal_slave_0_agent_rp_data;                                    // vgaclock_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_012:sink_data
	wire          vgaclock_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                   // id_router_012:sink_ready -> vgaclock_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_012_src_endofpacket;                                                                    // id_router_012:src_endofpacket -> rsp_xbar_demux_012:sink_endofpacket
	wire          id_router_012_src_valid;                                                                          // id_router_012:src_valid -> rsp_xbar_demux_012:sink_valid
	wire          id_router_012_src_startofpacket;                                                                  // id_router_012:src_startofpacket -> rsp_xbar_demux_012:sink_startofpacket
	wire  [119:0] id_router_012_src_data;                                                                           // id_router_012:src_data -> rsp_xbar_demux_012:sink_data
	wire   [17:0] id_router_012_src_channel;                                                                        // id_router_012:src_channel -> rsp_xbar_demux_012:sink_channel
	wire          id_router_012_src_ready;                                                                          // rsp_xbar_demux_012:sink_ready -> id_router_012:src_ready
	wire          vgabinary_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                            // vgabinary_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_013:sink_endofpacket
	wire          vgabinary_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                  // vgabinary_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_013:sink_valid
	wire          vgabinary_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                          // vgabinary_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_013:sink_startofpacket
	wire  [119:0] vgabinary_s1_translator_avalon_universal_slave_0_agent_rp_data;                                   // vgabinary_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_013:sink_data
	wire          vgabinary_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                  // id_router_013:sink_ready -> vgabinary_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_013_src_endofpacket;                                                                    // id_router_013:src_endofpacket -> rsp_xbar_demux_013:sink_endofpacket
	wire          id_router_013_src_valid;                                                                          // id_router_013:src_valid -> rsp_xbar_demux_013:sink_valid
	wire          id_router_013_src_startofpacket;                                                                  // id_router_013:src_startofpacket -> rsp_xbar_demux_013:sink_startofpacket
	wire  [119:0] id_router_013_src_data;                                                                           // id_router_013:src_data -> rsp_xbar_demux_013:sink_data
	wire   [17:0] id_router_013_src_channel;                                                                        // id_router_013:src_channel -> rsp_xbar_demux_013:sink_channel
	wire          id_router_013_src_ready;                                                                          // rsp_xbar_demux_013:sink_ready -> id_router_013:src_ready
	wire          vgaread_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                              // vgaread_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_014:sink_endofpacket
	wire          vgaread_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                    // vgaread_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_014:sink_valid
	wire          vgaread_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                            // vgaread_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_014:sink_startofpacket
	wire  [119:0] vgaread_s1_translator_avalon_universal_slave_0_agent_rp_data;                                     // vgaread_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_014:sink_data
	wire          vgaread_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                    // id_router_014:sink_ready -> vgaread_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_014_src_endofpacket;                                                                    // id_router_014:src_endofpacket -> rsp_xbar_demux_014:sink_endofpacket
	wire          id_router_014_src_valid;                                                                          // id_router_014:src_valid -> rsp_xbar_demux_014:sink_valid
	wire          id_router_014_src_startofpacket;                                                                  // id_router_014:src_startofpacket -> rsp_xbar_demux_014:sink_startofpacket
	wire  [119:0] id_router_014_src_data;                                                                           // id_router_014:src_data -> rsp_xbar_demux_014:sink_data
	wire   [17:0] id_router_014_src_channel;                                                                        // id_router_014:src_channel -> rsp_xbar_demux_014:sink_channel
	wire          id_router_014_src_ready;                                                                          // rsp_xbar_demux_014:sink_ready -> id_router_014:src_ready
	wire          topedge_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                              // topedge_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_015:sink_endofpacket
	wire          topedge_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                    // topedge_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_015:sink_valid
	wire          topedge_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                            // topedge_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_015:sink_startofpacket
	wire  [119:0] topedge_s1_translator_avalon_universal_slave_0_agent_rp_data;                                     // topedge_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_015:sink_data
	wire          topedge_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                    // id_router_015:sink_ready -> topedge_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_015_src_endofpacket;                                                                    // id_router_015:src_endofpacket -> rsp_xbar_demux_015:sink_endofpacket
	wire          id_router_015_src_valid;                                                                          // id_router_015:src_valid -> rsp_xbar_demux_015:sink_valid
	wire          id_router_015_src_startofpacket;                                                                  // id_router_015:src_startofpacket -> rsp_xbar_demux_015:sink_startofpacket
	wire  [119:0] id_router_015_src_data;                                                                           // id_router_015:src_data -> rsp_xbar_demux_015:sink_data
	wire   [17:0] id_router_015_src_channel;                                                                        // id_router_015:src_channel -> rsp_xbar_demux_015:sink_channel
	wire          id_router_015_src_ready;                                                                          // rsp_xbar_demux_015:sink_ready -> id_router_015:src_ready
	wire          hwreset_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                              // hwreset_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_016:sink_endofpacket
	wire          hwreset_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                    // hwreset_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_016:sink_valid
	wire          hwreset_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                            // hwreset_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_016:sink_startofpacket
	wire  [119:0] hwreset_s1_translator_avalon_universal_slave_0_agent_rp_data;                                     // hwreset_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_016:sink_data
	wire          hwreset_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                    // id_router_016:sink_ready -> hwreset_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_016_src_endofpacket;                                                                    // id_router_016:src_endofpacket -> rsp_xbar_demux_016:sink_endofpacket
	wire          id_router_016_src_valid;                                                                          // id_router_016:src_valid -> rsp_xbar_demux_016:sink_valid
	wire          id_router_016_src_startofpacket;                                                                  // id_router_016:src_startofpacket -> rsp_xbar_demux_016:sink_startofpacket
	wire  [119:0] id_router_016_src_data;                                                                           // id_router_016:src_data -> rsp_xbar_demux_016:sink_data
	wire   [17:0] id_router_016_src_channel;                                                                        // id_router_016:src_channel -> rsp_xbar_demux_016:sink_channel
	wire          id_router_016_src_ready;                                                                          // rsp_xbar_demux_016:sink_ready -> id_router_016:src_ready
	wire          lval_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                                 // Lval_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_017:sink_endofpacket
	wire          lval_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                       // Lval_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_017:sink_valid
	wire          lval_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                               // Lval_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_017:sink_startofpacket
	wire  [119:0] lval_s1_translator_avalon_universal_slave_0_agent_rp_data;                                        // Lval_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_017:sink_data
	wire          lval_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                       // id_router_017:sink_ready -> Lval_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_017_src_endofpacket;                                                                    // id_router_017:src_endofpacket -> rsp_xbar_demux_017:sink_endofpacket
	wire          id_router_017_src_valid;                                                                          // id_router_017:src_valid -> rsp_xbar_demux_017:sink_valid
	wire          id_router_017_src_startofpacket;                                                                  // id_router_017:src_startofpacket -> rsp_xbar_demux_017:sink_startofpacket
	wire  [119:0] id_router_017_src_data;                                                                           // id_router_017:src_data -> rsp_xbar_demux_017:sink_data
	wire   [17:0] id_router_017_src_channel;                                                                        // id_router_017:src_channel -> rsp_xbar_demux_017:sink_channel
	wire          id_router_017_src_ready;                                                                          // rsp_xbar_demux_017:sink_ready -> id_router_017:src_ready
	wire          addr_router_src_endofpacket;                                                                      // addr_router:src_endofpacket -> limiter:cmd_sink_endofpacket
	wire          addr_router_src_valid;                                                                            // addr_router:src_valid -> limiter:cmd_sink_valid
	wire          addr_router_src_startofpacket;                                                                    // addr_router:src_startofpacket -> limiter:cmd_sink_startofpacket
	wire  [119:0] addr_router_src_data;                                                                             // addr_router:src_data -> limiter:cmd_sink_data
	wire   [17:0] addr_router_src_channel;                                                                          // addr_router:src_channel -> limiter:cmd_sink_channel
	wire          addr_router_src_ready;                                                                            // limiter:cmd_sink_ready -> addr_router:src_ready
	wire          limiter_cmd_src_endofpacket;                                                                      // limiter:cmd_src_endofpacket -> cmd_xbar_demux:sink_endofpacket
	wire          limiter_cmd_src_startofpacket;                                                                    // limiter:cmd_src_startofpacket -> cmd_xbar_demux:sink_startofpacket
	wire  [119:0] limiter_cmd_src_data;                                                                             // limiter:cmd_src_data -> cmd_xbar_demux:sink_data
	wire   [17:0] limiter_cmd_src_channel;                                                                          // limiter:cmd_src_channel -> cmd_xbar_demux:sink_channel
	wire          limiter_cmd_src_ready;                                                                            // cmd_xbar_demux:sink_ready -> limiter:cmd_src_ready
	wire          rsp_xbar_mux_src_endofpacket;                                                                     // rsp_xbar_mux:src_endofpacket -> limiter:rsp_sink_endofpacket
	wire          rsp_xbar_mux_src_valid;                                                                           // rsp_xbar_mux:src_valid -> limiter:rsp_sink_valid
	wire          rsp_xbar_mux_src_startofpacket;                                                                   // rsp_xbar_mux:src_startofpacket -> limiter:rsp_sink_startofpacket
	wire  [119:0] rsp_xbar_mux_src_data;                                                                            // rsp_xbar_mux:src_data -> limiter:rsp_sink_data
	wire   [17:0] rsp_xbar_mux_src_channel;                                                                         // rsp_xbar_mux:src_channel -> limiter:rsp_sink_channel
	wire          rsp_xbar_mux_src_ready;                                                                           // limiter:rsp_sink_ready -> rsp_xbar_mux:src_ready
	wire          limiter_rsp_src_endofpacket;                                                                      // limiter:rsp_src_endofpacket -> arm_a9_hps_h2f_lw_axi_master_agent:write_rp_endofpacket
	wire          limiter_rsp_src_valid;                                                                            // limiter:rsp_src_valid -> arm_a9_hps_h2f_lw_axi_master_agent:write_rp_valid
	wire          limiter_rsp_src_startofpacket;                                                                    // limiter:rsp_src_startofpacket -> arm_a9_hps_h2f_lw_axi_master_agent:write_rp_startofpacket
	wire  [119:0] limiter_rsp_src_data;                                                                             // limiter:rsp_src_data -> arm_a9_hps_h2f_lw_axi_master_agent:write_rp_data
	wire   [17:0] limiter_rsp_src_channel;                                                                          // limiter:rsp_src_channel -> arm_a9_hps_h2f_lw_axi_master_agent:write_rp_channel
	wire          limiter_rsp_src_ready;                                                                            // arm_a9_hps_h2f_lw_axi_master_agent:write_rp_ready -> limiter:rsp_src_ready
	wire          addr_router_001_src_endofpacket;                                                                  // addr_router_001:src_endofpacket -> limiter_001:cmd_sink_endofpacket
	wire          addr_router_001_src_valid;                                                                        // addr_router_001:src_valid -> limiter_001:cmd_sink_valid
	wire          addr_router_001_src_startofpacket;                                                                // addr_router_001:src_startofpacket -> limiter_001:cmd_sink_startofpacket
	wire  [119:0] addr_router_001_src_data;                                                                         // addr_router_001:src_data -> limiter_001:cmd_sink_data
	wire   [17:0] addr_router_001_src_channel;                                                                      // addr_router_001:src_channel -> limiter_001:cmd_sink_channel
	wire          addr_router_001_src_ready;                                                                        // limiter_001:cmd_sink_ready -> addr_router_001:src_ready
	wire          limiter_001_cmd_src_endofpacket;                                                                  // limiter_001:cmd_src_endofpacket -> cmd_xbar_demux_001:sink_endofpacket
	wire          limiter_001_cmd_src_startofpacket;                                                                // limiter_001:cmd_src_startofpacket -> cmd_xbar_demux_001:sink_startofpacket
	wire  [119:0] limiter_001_cmd_src_data;                                                                         // limiter_001:cmd_src_data -> cmd_xbar_demux_001:sink_data
	wire   [17:0] limiter_001_cmd_src_channel;                                                                      // limiter_001:cmd_src_channel -> cmd_xbar_demux_001:sink_channel
	wire          limiter_001_cmd_src_ready;                                                                        // cmd_xbar_demux_001:sink_ready -> limiter_001:cmd_src_ready
	wire          rsp_xbar_mux_001_src_endofpacket;                                                                 // rsp_xbar_mux_001:src_endofpacket -> limiter_001:rsp_sink_endofpacket
	wire          rsp_xbar_mux_001_src_valid;                                                                       // rsp_xbar_mux_001:src_valid -> limiter_001:rsp_sink_valid
	wire          rsp_xbar_mux_001_src_startofpacket;                                                               // rsp_xbar_mux_001:src_startofpacket -> limiter_001:rsp_sink_startofpacket
	wire  [119:0] rsp_xbar_mux_001_src_data;                                                                        // rsp_xbar_mux_001:src_data -> limiter_001:rsp_sink_data
	wire   [17:0] rsp_xbar_mux_001_src_channel;                                                                     // rsp_xbar_mux_001:src_channel -> limiter_001:rsp_sink_channel
	wire          rsp_xbar_mux_001_src_ready;                                                                       // limiter_001:rsp_sink_ready -> rsp_xbar_mux_001:src_ready
	wire          limiter_001_rsp_src_endofpacket;                                                                  // limiter_001:rsp_src_endofpacket -> arm_a9_hps_h2f_lw_axi_master_agent:read_rp_endofpacket
	wire          limiter_001_rsp_src_valid;                                                                        // limiter_001:rsp_src_valid -> arm_a9_hps_h2f_lw_axi_master_agent:read_rp_valid
	wire          limiter_001_rsp_src_startofpacket;                                                                // limiter_001:rsp_src_startofpacket -> arm_a9_hps_h2f_lw_axi_master_agent:read_rp_startofpacket
	wire  [119:0] limiter_001_rsp_src_data;                                                                         // limiter_001:rsp_src_data -> arm_a9_hps_h2f_lw_axi_master_agent:read_rp_data
	wire   [17:0] limiter_001_rsp_src_channel;                                                                      // limiter_001:rsp_src_channel -> arm_a9_hps_h2f_lw_axi_master_agent:read_rp_channel
	wire          limiter_001_rsp_src_ready;                                                                        // arm_a9_hps_h2f_lw_axi_master_agent:read_rp_ready -> limiter_001:rsp_src_ready
	wire          cmd_xbar_mux_src_endofpacket;                                                                     // cmd_xbar_mux:src_endofpacket -> burst_adapter:sink0_endofpacket
	wire          cmd_xbar_mux_src_valid;                                                                           // cmd_xbar_mux:src_valid -> burst_adapter:sink0_valid
	wire          cmd_xbar_mux_src_startofpacket;                                                                   // cmd_xbar_mux:src_startofpacket -> burst_adapter:sink0_startofpacket
	wire  [119:0] cmd_xbar_mux_src_data;                                                                            // cmd_xbar_mux:src_data -> burst_adapter:sink0_data
	wire   [17:0] cmd_xbar_mux_src_channel;                                                                         // cmd_xbar_mux:src_channel -> burst_adapter:sink0_channel
	wire          cmd_xbar_mux_src_ready;                                                                           // burst_adapter:sink0_ready -> cmd_xbar_mux:src_ready
	wire          burst_adapter_source0_endofpacket;                                                                // burst_adapter:source0_endofpacket -> pio0_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_source0_valid;                                                                      // burst_adapter:source0_valid -> pio0_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_source0_startofpacket;                                                              // burst_adapter:source0_startofpacket -> pio0_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [119:0] burst_adapter_source0_data;                                                                       // burst_adapter:source0_data -> pio0_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_source0_ready;                                                                      // pio0_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter:source0_ready
	wire   [17:0] burst_adapter_source0_channel;                                                                    // burst_adapter:source0_channel -> pio0_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_001_src_endofpacket;                                                                 // cmd_xbar_mux_001:src_endofpacket -> burst_adapter_001:sink0_endofpacket
	wire          cmd_xbar_mux_001_src_valid;                                                                       // cmd_xbar_mux_001:src_valid -> burst_adapter_001:sink0_valid
	wire          cmd_xbar_mux_001_src_startofpacket;                                                               // cmd_xbar_mux_001:src_startofpacket -> burst_adapter_001:sink0_startofpacket
	wire  [119:0] cmd_xbar_mux_001_src_data;                                                                        // cmd_xbar_mux_001:src_data -> burst_adapter_001:sink0_data
	wire   [17:0] cmd_xbar_mux_001_src_channel;                                                                     // cmd_xbar_mux_001:src_channel -> burst_adapter_001:sink0_channel
	wire          cmd_xbar_mux_001_src_ready;                                                                       // burst_adapter_001:sink0_ready -> cmd_xbar_mux_001:src_ready
	wire          burst_adapter_001_source0_endofpacket;                                                            // burst_adapter_001:source0_endofpacket -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_001_source0_valid;                                                                  // burst_adapter_001:source0_valid -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_001_source0_startofpacket;                                                          // burst_adapter_001:source0_startofpacket -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [119:0] burst_adapter_001_source0_data;                                                                   // burst_adapter_001:source0_data -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_001_source0_ready;                                                                  // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_001:source0_ready
	wire   [17:0] burst_adapter_001_source0_channel;                                                                // burst_adapter_001:source0_channel -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_002_src_endofpacket;                                                                 // cmd_xbar_mux_002:src_endofpacket -> burst_adapter_002:sink0_endofpacket
	wire          cmd_xbar_mux_002_src_valid;                                                                       // cmd_xbar_mux_002:src_valid -> burst_adapter_002:sink0_valid
	wire          cmd_xbar_mux_002_src_startofpacket;                                                               // cmd_xbar_mux_002:src_startofpacket -> burst_adapter_002:sink0_startofpacket
	wire  [119:0] cmd_xbar_mux_002_src_data;                                                                        // cmd_xbar_mux_002:src_data -> burst_adapter_002:sink0_data
	wire   [17:0] cmd_xbar_mux_002_src_channel;                                                                     // cmd_xbar_mux_002:src_channel -> burst_adapter_002:sink0_channel
	wire          cmd_xbar_mux_002_src_ready;                                                                       // burst_adapter_002:sink0_ready -> cmd_xbar_mux_002:src_ready
	wire          burst_adapter_002_source0_endofpacket;                                                            // burst_adapter_002:source0_endofpacket -> sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_002_source0_valid;                                                                  // burst_adapter_002:source0_valid -> sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_002_source0_startofpacket;                                                          // burst_adapter_002:source0_startofpacket -> sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [119:0] burst_adapter_002_source0_data;                                                                   // burst_adapter_002:source0_data -> sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_002_source0_ready;                                                                  // sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_002:source0_ready
	wire   [17:0] burst_adapter_002_source0_channel;                                                                // burst_adapter_002:source0_channel -> sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_003_src_endofpacket;                                                                 // cmd_xbar_mux_003:src_endofpacket -> burst_adapter_003:sink0_endofpacket
	wire          cmd_xbar_mux_003_src_valid;                                                                       // cmd_xbar_mux_003:src_valid -> burst_adapter_003:sink0_valid
	wire          cmd_xbar_mux_003_src_startofpacket;                                                               // cmd_xbar_mux_003:src_startofpacket -> burst_adapter_003:sink0_startofpacket
	wire  [119:0] cmd_xbar_mux_003_src_data;                                                                        // cmd_xbar_mux_003:src_data -> burst_adapter_003:sink0_data
	wire   [17:0] cmd_xbar_mux_003_src_channel;                                                                     // cmd_xbar_mux_003:src_channel -> burst_adapter_003:sink0_channel
	wire          cmd_xbar_mux_003_src_ready;                                                                       // burst_adapter_003:sink0_ready -> cmd_xbar_mux_003:src_ready
	wire          burst_adapter_003_source0_endofpacket;                                                            // burst_adapter_003:source0_endofpacket -> sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_003_source0_valid;                                                                  // burst_adapter_003:source0_valid -> sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_003_source0_startofpacket;                                                          // burst_adapter_003:source0_startofpacket -> sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [119:0] burst_adapter_003_source0_data;                                                                   // burst_adapter_003:source0_data -> sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_003_source0_ready;                                                                  // sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_003:source0_ready
	wire   [17:0] burst_adapter_003_source0_channel;                                                                // burst_adapter_003:source0_channel -> sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_004_src_endofpacket;                                                                 // cmd_xbar_mux_004:src_endofpacket -> burst_adapter_004:sink0_endofpacket
	wire          cmd_xbar_mux_004_src_valid;                                                                       // cmd_xbar_mux_004:src_valid -> burst_adapter_004:sink0_valid
	wire          cmd_xbar_mux_004_src_startofpacket;                                                               // cmd_xbar_mux_004:src_startofpacket -> burst_adapter_004:sink0_startofpacket
	wire  [119:0] cmd_xbar_mux_004_src_data;                                                                        // cmd_xbar_mux_004:src_data -> burst_adapter_004:sink0_data
	wire   [17:0] cmd_xbar_mux_004_src_channel;                                                                     // cmd_xbar_mux_004:src_channel -> burst_adapter_004:sink0_channel
	wire          cmd_xbar_mux_004_src_ready;                                                                       // burst_adapter_004:sink0_ready -> cmd_xbar_mux_004:src_ready
	wire          burst_adapter_004_source0_endofpacket;                                                            // burst_adapter_004:source0_endofpacket -> pio_start_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_004_source0_valid;                                                                  // burst_adapter_004:source0_valid -> pio_start_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_004_source0_startofpacket;                                                          // burst_adapter_004:source0_startofpacket -> pio_start_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [119:0] burst_adapter_004_source0_data;                                                                   // burst_adapter_004:source0_data -> pio_start_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_004_source0_ready;                                                                  // pio_start_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_004:source0_ready
	wire   [17:0] burst_adapter_004_source0_channel;                                                                // burst_adapter_004:source0_channel -> pio_start_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_005_src_endofpacket;                                                                 // cmd_xbar_mux_005:src_endofpacket -> burst_adapter_005:sink0_endofpacket
	wire          cmd_xbar_mux_005_src_valid;                                                                       // cmd_xbar_mux_005:src_valid -> burst_adapter_005:sink0_valid
	wire          cmd_xbar_mux_005_src_startofpacket;                                                               // cmd_xbar_mux_005:src_startofpacket -> burst_adapter_005:sink0_startofpacket
	wire  [119:0] cmd_xbar_mux_005_src_data;                                                                        // cmd_xbar_mux_005:src_data -> burst_adapter_005:sink0_data
	wire   [17:0] cmd_xbar_mux_005_src_channel;                                                                     // cmd_xbar_mux_005:src_channel -> burst_adapter_005:sink0_channel
	wire          cmd_xbar_mux_005_src_ready;                                                                       // burst_adapter_005:sink0_ready -> cmd_xbar_mux_005:src_ready
	wire          burst_adapter_005_source0_endofpacket;                                                            // burst_adapter_005:source0_endofpacket -> hps_vga_data1_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_005_source0_valid;                                                                  // burst_adapter_005:source0_valid -> hps_vga_data1_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_005_source0_startofpacket;                                                          // burst_adapter_005:source0_startofpacket -> hps_vga_data1_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [119:0] burst_adapter_005_source0_data;                                                                   // burst_adapter_005:source0_data -> hps_vga_data1_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_005_source0_ready;                                                                  // hps_vga_data1_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_005:source0_ready
	wire   [17:0] burst_adapter_005_source0_channel;                                                                // burst_adapter_005:source0_channel -> hps_vga_data1_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_006_src_endofpacket;                                                                 // cmd_xbar_mux_006:src_endofpacket -> burst_adapter_006:sink0_endofpacket
	wire          cmd_xbar_mux_006_src_valid;                                                                       // cmd_xbar_mux_006:src_valid -> burst_adapter_006:sink0_valid
	wire          cmd_xbar_mux_006_src_startofpacket;                                                               // cmd_xbar_mux_006:src_startofpacket -> burst_adapter_006:sink0_startofpacket
	wire  [119:0] cmd_xbar_mux_006_src_data;                                                                        // cmd_xbar_mux_006:src_data -> burst_adapter_006:sink0_data
	wire   [17:0] cmd_xbar_mux_006_src_channel;                                                                     // cmd_xbar_mux_006:src_channel -> burst_adapter_006:sink0_channel
	wire          cmd_xbar_mux_006_src_ready;                                                                       // burst_adapter_006:sink0_ready -> cmd_xbar_mux_006:src_ready
	wire          burst_adapter_006_source0_endofpacket;                                                            // burst_adapter_006:source0_endofpacket -> hps_vga_data2_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_006_source0_valid;                                                                  // burst_adapter_006:source0_valid -> hps_vga_data2_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_006_source0_startofpacket;                                                          // burst_adapter_006:source0_startofpacket -> hps_vga_data2_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [119:0] burst_adapter_006_source0_data;                                                                   // burst_adapter_006:source0_data -> hps_vga_data2_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_006_source0_ready;                                                                  // hps_vga_data2_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_006:source0_ready
	wire   [17:0] burst_adapter_006_source0_channel;                                                                // burst_adapter_006:source0_channel -> hps_vga_data2_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_007_src_endofpacket;                                                                 // cmd_xbar_mux_007:src_endofpacket -> burst_adapter_007:sink0_endofpacket
	wire          cmd_xbar_mux_007_src_valid;                                                                       // cmd_xbar_mux_007:src_valid -> burst_adapter_007:sink0_valid
	wire          cmd_xbar_mux_007_src_startofpacket;                                                               // cmd_xbar_mux_007:src_startofpacket -> burst_adapter_007:sink0_startofpacket
	wire  [119:0] cmd_xbar_mux_007_src_data;                                                                        // cmd_xbar_mux_007:src_data -> burst_adapter_007:sink0_data
	wire   [17:0] cmd_xbar_mux_007_src_channel;                                                                     // cmd_xbar_mux_007:src_channel -> burst_adapter_007:sink0_channel
	wire          cmd_xbar_mux_007_src_ready;                                                                       // burst_adapter_007:sink0_ready -> cmd_xbar_mux_007:src_ready
	wire          burst_adapter_007_source0_endofpacket;                                                            // burst_adapter_007:source0_endofpacket -> sdramclock_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_007_source0_valid;                                                                  // burst_adapter_007:source0_valid -> sdramclock_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_007_source0_startofpacket;                                                          // burst_adapter_007:source0_startofpacket -> sdramclock_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [119:0] burst_adapter_007_source0_data;                                                                   // burst_adapter_007:source0_data -> sdramclock_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_007_source0_ready;                                                                  // sdramclock_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_007:source0_ready
	wire   [17:0] burst_adapter_007_source0_channel;                                                                // burst_adapter_007:source0_channel -> sdramclock_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_008_src_endofpacket;                                                                 // cmd_xbar_mux_008:src_endofpacket -> burst_adapter_008:sink0_endofpacket
	wire          cmd_xbar_mux_008_src_valid;                                                                       // cmd_xbar_mux_008:src_valid -> burst_adapter_008:sink0_valid
	wire          cmd_xbar_mux_008_src_startofpacket;                                                               // cmd_xbar_mux_008:src_startofpacket -> burst_adapter_008:sink0_startofpacket
	wire  [119:0] cmd_xbar_mux_008_src_data;                                                                        // cmd_xbar_mux_008:src_data -> burst_adapter_008:sink0_data
	wire   [17:0] cmd_xbar_mux_008_src_channel;                                                                     // cmd_xbar_mux_008:src_channel -> burst_adapter_008:sink0_channel
	wire          cmd_xbar_mux_008_src_ready;                                                                       // burst_adapter_008:sink0_ready -> cmd_xbar_mux_008:src_ready
	wire          burst_adapter_008_source0_endofpacket;                                                            // burst_adapter_008:source0_endofpacket -> Sdram_start_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_008_source0_valid;                                                                  // burst_adapter_008:source0_valid -> Sdram_start_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_008_source0_startofpacket;                                                          // burst_adapter_008:source0_startofpacket -> Sdram_start_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [119:0] burst_adapter_008_source0_data;                                                                   // burst_adapter_008:source0_data -> Sdram_start_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_008_source0_ready;                                                                  // Sdram_start_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_008:source0_ready
	wire   [17:0] burst_adapter_008_source0_channel;                                                                // burst_adapter_008:source0_channel -> Sdram_start_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_009_src_endofpacket;                                                                 // cmd_xbar_mux_009:src_endofpacket -> burst_adapter_009:sink0_endofpacket
	wire          cmd_xbar_mux_009_src_valid;                                                                       // cmd_xbar_mux_009:src_valid -> burst_adapter_009:sink0_valid
	wire          cmd_xbar_mux_009_src_startofpacket;                                                               // cmd_xbar_mux_009:src_startofpacket -> burst_adapter_009:sink0_startofpacket
	wire  [119:0] cmd_xbar_mux_009_src_data;                                                                        // cmd_xbar_mux_009:src_data -> burst_adapter_009:sink0_data
	wire   [17:0] cmd_xbar_mux_009_src_channel;                                                                     // cmd_xbar_mux_009:src_channel -> burst_adapter_009:sink0_channel
	wire          cmd_xbar_mux_009_src_ready;                                                                       // burst_adapter_009:sink0_ready -> cmd_xbar_mux_009:src_ready
	wire          burst_adapter_009_source0_endofpacket;                                                            // burst_adapter_009:source0_endofpacket -> FIFOWe_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_009_source0_valid;                                                                  // burst_adapter_009:source0_valid -> FIFOWe_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_009_source0_startofpacket;                                                          // burst_adapter_009:source0_startofpacket -> FIFOWe_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [119:0] burst_adapter_009_source0_data;                                                                   // burst_adapter_009:source0_data -> FIFOWe_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_009_source0_ready;                                                                  // FIFOWe_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_009:source0_ready
	wire   [17:0] burst_adapter_009_source0_channel;                                                                // burst_adapter_009:source0_channel -> FIFOWe_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_010_src_endofpacket;                                                                 // cmd_xbar_mux_010:src_endofpacket -> burst_adapter_010:sink0_endofpacket
	wire          cmd_xbar_mux_010_src_valid;                                                                       // cmd_xbar_mux_010:src_valid -> burst_adapter_010:sink0_valid
	wire          cmd_xbar_mux_010_src_startofpacket;                                                               // cmd_xbar_mux_010:src_startofpacket -> burst_adapter_010:sink0_startofpacket
	wire  [119:0] cmd_xbar_mux_010_src_data;                                                                        // cmd_xbar_mux_010:src_data -> burst_adapter_010:sink0_data
	wire   [17:0] cmd_xbar_mux_010_src_channel;                                                                     // cmd_xbar_mux_010:src_channel -> burst_adapter_010:sink0_channel
	wire          cmd_xbar_mux_010_src_ready;                                                                       // burst_adapter_010:sink0_ready -> cmd_xbar_mux_010:src_ready
	wire          burst_adapter_010_source0_endofpacket;                                                            // burst_adapter_010:source0_endofpacket -> binaryscale_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_010_source0_valid;                                                                  // burst_adapter_010:source0_valid -> binaryscale_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_010_source0_startofpacket;                                                          // burst_adapter_010:source0_startofpacket -> binaryscale_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [119:0] burst_adapter_010_source0_data;                                                                   // burst_adapter_010:source0_data -> binaryscale_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_010_source0_ready;                                                                  // binaryscale_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_010:source0_ready
	wire   [17:0] burst_adapter_010_source0_channel;                                                                // burst_adapter_010:source0_channel -> binaryscale_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_011_src_endofpacket;                                                                 // cmd_xbar_mux_011:src_endofpacket -> burst_adapter_011:sink0_endofpacket
	wire          cmd_xbar_mux_011_src_valid;                                                                       // cmd_xbar_mux_011:src_valid -> burst_adapter_011:sink0_valid
	wire          cmd_xbar_mux_011_src_startofpacket;                                                               // cmd_xbar_mux_011:src_startofpacket -> burst_adapter_011:sink0_startofpacket
	wire  [119:0] cmd_xbar_mux_011_src_data;                                                                        // cmd_xbar_mux_011:src_data -> burst_adapter_011:sink0_data
	wire   [17:0] cmd_xbar_mux_011_src_channel;                                                                     // cmd_xbar_mux_011:src_channel -> burst_adapter_011:sink0_channel
	wire          cmd_xbar_mux_011_src_ready;                                                                       // burst_adapter_011:sink0_ready -> cmd_xbar_mux_011:src_ready
	wire          burst_adapter_011_source0_endofpacket;                                                            // burst_adapter_011:source0_endofpacket -> greyparamter_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_011_source0_valid;                                                                  // burst_adapter_011:source0_valid -> greyparamter_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_011_source0_startofpacket;                                                          // burst_adapter_011:source0_startofpacket -> greyparamter_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [119:0] burst_adapter_011_source0_data;                                                                   // burst_adapter_011:source0_data -> greyparamter_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_011_source0_ready;                                                                  // greyparamter_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_011:source0_ready
	wire   [17:0] burst_adapter_011_source0_channel;                                                                // burst_adapter_011:source0_channel -> greyparamter_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_012_src_endofpacket;                                                                 // cmd_xbar_mux_012:src_endofpacket -> burst_adapter_012:sink0_endofpacket
	wire          cmd_xbar_mux_012_src_valid;                                                                       // cmd_xbar_mux_012:src_valid -> burst_adapter_012:sink0_valid
	wire          cmd_xbar_mux_012_src_startofpacket;                                                               // cmd_xbar_mux_012:src_startofpacket -> burst_adapter_012:sink0_startofpacket
	wire  [119:0] cmd_xbar_mux_012_src_data;                                                                        // cmd_xbar_mux_012:src_data -> burst_adapter_012:sink0_data
	wire   [17:0] cmd_xbar_mux_012_src_channel;                                                                     // cmd_xbar_mux_012:src_channel -> burst_adapter_012:sink0_channel
	wire          cmd_xbar_mux_012_src_ready;                                                                       // burst_adapter_012:sink0_ready -> cmd_xbar_mux_012:src_ready
	wire          burst_adapter_012_source0_endofpacket;                                                            // burst_adapter_012:source0_endofpacket -> vgaclock_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_012_source0_valid;                                                                  // burst_adapter_012:source0_valid -> vgaclock_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_012_source0_startofpacket;                                                          // burst_adapter_012:source0_startofpacket -> vgaclock_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [119:0] burst_adapter_012_source0_data;                                                                   // burst_adapter_012:source0_data -> vgaclock_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_012_source0_ready;                                                                  // vgaclock_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_012:source0_ready
	wire   [17:0] burst_adapter_012_source0_channel;                                                                // burst_adapter_012:source0_channel -> vgaclock_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_013_src_endofpacket;                                                                 // cmd_xbar_mux_013:src_endofpacket -> burst_adapter_013:sink0_endofpacket
	wire          cmd_xbar_mux_013_src_valid;                                                                       // cmd_xbar_mux_013:src_valid -> burst_adapter_013:sink0_valid
	wire          cmd_xbar_mux_013_src_startofpacket;                                                               // cmd_xbar_mux_013:src_startofpacket -> burst_adapter_013:sink0_startofpacket
	wire  [119:0] cmd_xbar_mux_013_src_data;                                                                        // cmd_xbar_mux_013:src_data -> burst_adapter_013:sink0_data
	wire   [17:0] cmd_xbar_mux_013_src_channel;                                                                     // cmd_xbar_mux_013:src_channel -> burst_adapter_013:sink0_channel
	wire          cmd_xbar_mux_013_src_ready;                                                                       // burst_adapter_013:sink0_ready -> cmd_xbar_mux_013:src_ready
	wire          burst_adapter_013_source0_endofpacket;                                                            // burst_adapter_013:source0_endofpacket -> vgabinary_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_013_source0_valid;                                                                  // burst_adapter_013:source0_valid -> vgabinary_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_013_source0_startofpacket;                                                          // burst_adapter_013:source0_startofpacket -> vgabinary_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [119:0] burst_adapter_013_source0_data;                                                                   // burst_adapter_013:source0_data -> vgabinary_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_013_source0_ready;                                                                  // vgabinary_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_013:source0_ready
	wire   [17:0] burst_adapter_013_source0_channel;                                                                // burst_adapter_013:source0_channel -> vgabinary_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_014_src_endofpacket;                                                                 // cmd_xbar_mux_014:src_endofpacket -> burst_adapter_014:sink0_endofpacket
	wire          cmd_xbar_mux_014_src_valid;                                                                       // cmd_xbar_mux_014:src_valid -> burst_adapter_014:sink0_valid
	wire          cmd_xbar_mux_014_src_startofpacket;                                                               // cmd_xbar_mux_014:src_startofpacket -> burst_adapter_014:sink0_startofpacket
	wire  [119:0] cmd_xbar_mux_014_src_data;                                                                        // cmd_xbar_mux_014:src_data -> burst_adapter_014:sink0_data
	wire   [17:0] cmd_xbar_mux_014_src_channel;                                                                     // cmd_xbar_mux_014:src_channel -> burst_adapter_014:sink0_channel
	wire          cmd_xbar_mux_014_src_ready;                                                                       // burst_adapter_014:sink0_ready -> cmd_xbar_mux_014:src_ready
	wire          burst_adapter_014_source0_endofpacket;                                                            // burst_adapter_014:source0_endofpacket -> vgaread_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_014_source0_valid;                                                                  // burst_adapter_014:source0_valid -> vgaread_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_014_source0_startofpacket;                                                          // burst_adapter_014:source0_startofpacket -> vgaread_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [119:0] burst_adapter_014_source0_data;                                                                   // burst_adapter_014:source0_data -> vgaread_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_014_source0_ready;                                                                  // vgaread_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_014:source0_ready
	wire   [17:0] burst_adapter_014_source0_channel;                                                                // burst_adapter_014:source0_channel -> vgaread_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_015_src_endofpacket;                                                                 // cmd_xbar_mux_015:src_endofpacket -> burst_adapter_015:sink0_endofpacket
	wire          cmd_xbar_mux_015_src_valid;                                                                       // cmd_xbar_mux_015:src_valid -> burst_adapter_015:sink0_valid
	wire          cmd_xbar_mux_015_src_startofpacket;                                                               // cmd_xbar_mux_015:src_startofpacket -> burst_adapter_015:sink0_startofpacket
	wire  [119:0] cmd_xbar_mux_015_src_data;                                                                        // cmd_xbar_mux_015:src_data -> burst_adapter_015:sink0_data
	wire   [17:0] cmd_xbar_mux_015_src_channel;                                                                     // cmd_xbar_mux_015:src_channel -> burst_adapter_015:sink0_channel
	wire          cmd_xbar_mux_015_src_ready;                                                                       // burst_adapter_015:sink0_ready -> cmd_xbar_mux_015:src_ready
	wire          burst_adapter_015_source0_endofpacket;                                                            // burst_adapter_015:source0_endofpacket -> topedge_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_015_source0_valid;                                                                  // burst_adapter_015:source0_valid -> topedge_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_015_source0_startofpacket;                                                          // burst_adapter_015:source0_startofpacket -> topedge_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [119:0] burst_adapter_015_source0_data;                                                                   // burst_adapter_015:source0_data -> topedge_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_015_source0_ready;                                                                  // topedge_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_015:source0_ready
	wire   [17:0] burst_adapter_015_source0_channel;                                                                // burst_adapter_015:source0_channel -> topedge_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_016_src_endofpacket;                                                                 // cmd_xbar_mux_016:src_endofpacket -> burst_adapter_016:sink0_endofpacket
	wire          cmd_xbar_mux_016_src_valid;                                                                       // cmd_xbar_mux_016:src_valid -> burst_adapter_016:sink0_valid
	wire          cmd_xbar_mux_016_src_startofpacket;                                                               // cmd_xbar_mux_016:src_startofpacket -> burst_adapter_016:sink0_startofpacket
	wire  [119:0] cmd_xbar_mux_016_src_data;                                                                        // cmd_xbar_mux_016:src_data -> burst_adapter_016:sink0_data
	wire   [17:0] cmd_xbar_mux_016_src_channel;                                                                     // cmd_xbar_mux_016:src_channel -> burst_adapter_016:sink0_channel
	wire          cmd_xbar_mux_016_src_ready;                                                                       // burst_adapter_016:sink0_ready -> cmd_xbar_mux_016:src_ready
	wire          burst_adapter_016_source0_endofpacket;                                                            // burst_adapter_016:source0_endofpacket -> hwreset_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_016_source0_valid;                                                                  // burst_adapter_016:source0_valid -> hwreset_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_016_source0_startofpacket;                                                          // burst_adapter_016:source0_startofpacket -> hwreset_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [119:0] burst_adapter_016_source0_data;                                                                   // burst_adapter_016:source0_data -> hwreset_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_016_source0_ready;                                                                  // hwreset_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_016:source0_ready
	wire   [17:0] burst_adapter_016_source0_channel;                                                                // burst_adapter_016:source0_channel -> hwreset_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_017_src_endofpacket;                                                                 // cmd_xbar_mux_017:src_endofpacket -> burst_adapter_017:sink0_endofpacket
	wire          cmd_xbar_mux_017_src_valid;                                                                       // cmd_xbar_mux_017:src_valid -> burst_adapter_017:sink0_valid
	wire          cmd_xbar_mux_017_src_startofpacket;                                                               // cmd_xbar_mux_017:src_startofpacket -> burst_adapter_017:sink0_startofpacket
	wire  [119:0] cmd_xbar_mux_017_src_data;                                                                        // cmd_xbar_mux_017:src_data -> burst_adapter_017:sink0_data
	wire   [17:0] cmd_xbar_mux_017_src_channel;                                                                     // cmd_xbar_mux_017:src_channel -> burst_adapter_017:sink0_channel
	wire          cmd_xbar_mux_017_src_ready;                                                                       // burst_adapter_017:sink0_ready -> cmd_xbar_mux_017:src_ready
	wire          burst_adapter_017_source0_endofpacket;                                                            // burst_adapter_017:source0_endofpacket -> Lval_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_017_source0_valid;                                                                  // burst_adapter_017:source0_valid -> Lval_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_017_source0_startofpacket;                                                          // burst_adapter_017:source0_startofpacket -> Lval_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [119:0] burst_adapter_017_source0_data;                                                                   // burst_adapter_017:source0_data -> Lval_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_017_source0_ready;                                                                  // Lval_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_017:source0_ready
	wire   [17:0] burst_adapter_017_source0_channel;                                                                // burst_adapter_017:source0_channel -> Lval_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_demux_src0_endofpacket;                                                                  // cmd_xbar_demux:src0_endofpacket -> cmd_xbar_mux:sink0_endofpacket
	wire          cmd_xbar_demux_src0_valid;                                                                        // cmd_xbar_demux:src0_valid -> cmd_xbar_mux:sink0_valid
	wire          cmd_xbar_demux_src0_startofpacket;                                                                // cmd_xbar_demux:src0_startofpacket -> cmd_xbar_mux:sink0_startofpacket
	wire  [119:0] cmd_xbar_demux_src0_data;                                                                         // cmd_xbar_demux:src0_data -> cmd_xbar_mux:sink0_data
	wire   [17:0] cmd_xbar_demux_src0_channel;                                                                      // cmd_xbar_demux:src0_channel -> cmd_xbar_mux:sink0_channel
	wire          cmd_xbar_demux_src0_ready;                                                                        // cmd_xbar_mux:sink0_ready -> cmd_xbar_demux:src0_ready
	wire          cmd_xbar_demux_src1_endofpacket;                                                                  // cmd_xbar_demux:src1_endofpacket -> cmd_xbar_mux_001:sink0_endofpacket
	wire          cmd_xbar_demux_src1_valid;                                                                        // cmd_xbar_demux:src1_valid -> cmd_xbar_mux_001:sink0_valid
	wire          cmd_xbar_demux_src1_startofpacket;                                                                // cmd_xbar_demux:src1_startofpacket -> cmd_xbar_mux_001:sink0_startofpacket
	wire  [119:0] cmd_xbar_demux_src1_data;                                                                         // cmd_xbar_demux:src1_data -> cmd_xbar_mux_001:sink0_data
	wire   [17:0] cmd_xbar_demux_src1_channel;                                                                      // cmd_xbar_demux:src1_channel -> cmd_xbar_mux_001:sink0_channel
	wire          cmd_xbar_demux_src1_ready;                                                                        // cmd_xbar_mux_001:sink0_ready -> cmd_xbar_demux:src1_ready
	wire          cmd_xbar_demux_src2_endofpacket;                                                                  // cmd_xbar_demux:src2_endofpacket -> cmd_xbar_mux_002:sink0_endofpacket
	wire          cmd_xbar_demux_src2_valid;                                                                        // cmd_xbar_demux:src2_valid -> cmd_xbar_mux_002:sink0_valid
	wire          cmd_xbar_demux_src2_startofpacket;                                                                // cmd_xbar_demux:src2_startofpacket -> cmd_xbar_mux_002:sink0_startofpacket
	wire  [119:0] cmd_xbar_demux_src2_data;                                                                         // cmd_xbar_demux:src2_data -> cmd_xbar_mux_002:sink0_data
	wire   [17:0] cmd_xbar_demux_src2_channel;                                                                      // cmd_xbar_demux:src2_channel -> cmd_xbar_mux_002:sink0_channel
	wire          cmd_xbar_demux_src2_ready;                                                                        // cmd_xbar_mux_002:sink0_ready -> cmd_xbar_demux:src2_ready
	wire          cmd_xbar_demux_src3_endofpacket;                                                                  // cmd_xbar_demux:src3_endofpacket -> cmd_xbar_mux_003:sink0_endofpacket
	wire          cmd_xbar_demux_src3_valid;                                                                        // cmd_xbar_demux:src3_valid -> cmd_xbar_mux_003:sink0_valid
	wire          cmd_xbar_demux_src3_startofpacket;                                                                // cmd_xbar_demux:src3_startofpacket -> cmd_xbar_mux_003:sink0_startofpacket
	wire  [119:0] cmd_xbar_demux_src3_data;                                                                         // cmd_xbar_demux:src3_data -> cmd_xbar_mux_003:sink0_data
	wire   [17:0] cmd_xbar_demux_src3_channel;                                                                      // cmd_xbar_demux:src3_channel -> cmd_xbar_mux_003:sink0_channel
	wire          cmd_xbar_demux_src3_ready;                                                                        // cmd_xbar_mux_003:sink0_ready -> cmd_xbar_demux:src3_ready
	wire          cmd_xbar_demux_src4_endofpacket;                                                                  // cmd_xbar_demux:src4_endofpacket -> cmd_xbar_mux_004:sink0_endofpacket
	wire          cmd_xbar_demux_src4_valid;                                                                        // cmd_xbar_demux:src4_valid -> cmd_xbar_mux_004:sink0_valid
	wire          cmd_xbar_demux_src4_startofpacket;                                                                // cmd_xbar_demux:src4_startofpacket -> cmd_xbar_mux_004:sink0_startofpacket
	wire  [119:0] cmd_xbar_demux_src4_data;                                                                         // cmd_xbar_demux:src4_data -> cmd_xbar_mux_004:sink0_data
	wire   [17:0] cmd_xbar_demux_src4_channel;                                                                      // cmd_xbar_demux:src4_channel -> cmd_xbar_mux_004:sink0_channel
	wire          cmd_xbar_demux_src4_ready;                                                                        // cmd_xbar_mux_004:sink0_ready -> cmd_xbar_demux:src4_ready
	wire          cmd_xbar_demux_src5_endofpacket;                                                                  // cmd_xbar_demux:src5_endofpacket -> cmd_xbar_mux_005:sink0_endofpacket
	wire          cmd_xbar_demux_src5_valid;                                                                        // cmd_xbar_demux:src5_valid -> cmd_xbar_mux_005:sink0_valid
	wire          cmd_xbar_demux_src5_startofpacket;                                                                // cmd_xbar_demux:src5_startofpacket -> cmd_xbar_mux_005:sink0_startofpacket
	wire  [119:0] cmd_xbar_demux_src5_data;                                                                         // cmd_xbar_demux:src5_data -> cmd_xbar_mux_005:sink0_data
	wire   [17:0] cmd_xbar_demux_src5_channel;                                                                      // cmd_xbar_demux:src5_channel -> cmd_xbar_mux_005:sink0_channel
	wire          cmd_xbar_demux_src5_ready;                                                                        // cmd_xbar_mux_005:sink0_ready -> cmd_xbar_demux:src5_ready
	wire          cmd_xbar_demux_src6_endofpacket;                                                                  // cmd_xbar_demux:src6_endofpacket -> cmd_xbar_mux_006:sink0_endofpacket
	wire          cmd_xbar_demux_src6_valid;                                                                        // cmd_xbar_demux:src6_valid -> cmd_xbar_mux_006:sink0_valid
	wire          cmd_xbar_demux_src6_startofpacket;                                                                // cmd_xbar_demux:src6_startofpacket -> cmd_xbar_mux_006:sink0_startofpacket
	wire  [119:0] cmd_xbar_demux_src6_data;                                                                         // cmd_xbar_demux:src6_data -> cmd_xbar_mux_006:sink0_data
	wire   [17:0] cmd_xbar_demux_src6_channel;                                                                      // cmd_xbar_demux:src6_channel -> cmd_xbar_mux_006:sink0_channel
	wire          cmd_xbar_demux_src6_ready;                                                                        // cmd_xbar_mux_006:sink0_ready -> cmd_xbar_demux:src6_ready
	wire          cmd_xbar_demux_src7_endofpacket;                                                                  // cmd_xbar_demux:src7_endofpacket -> cmd_xbar_mux_007:sink0_endofpacket
	wire          cmd_xbar_demux_src7_valid;                                                                        // cmd_xbar_demux:src7_valid -> cmd_xbar_mux_007:sink0_valid
	wire          cmd_xbar_demux_src7_startofpacket;                                                                // cmd_xbar_demux:src7_startofpacket -> cmd_xbar_mux_007:sink0_startofpacket
	wire  [119:0] cmd_xbar_demux_src7_data;                                                                         // cmd_xbar_demux:src7_data -> cmd_xbar_mux_007:sink0_data
	wire   [17:0] cmd_xbar_demux_src7_channel;                                                                      // cmd_xbar_demux:src7_channel -> cmd_xbar_mux_007:sink0_channel
	wire          cmd_xbar_demux_src7_ready;                                                                        // cmd_xbar_mux_007:sink0_ready -> cmd_xbar_demux:src7_ready
	wire          cmd_xbar_demux_src8_endofpacket;                                                                  // cmd_xbar_demux:src8_endofpacket -> cmd_xbar_mux_008:sink0_endofpacket
	wire          cmd_xbar_demux_src8_valid;                                                                        // cmd_xbar_demux:src8_valid -> cmd_xbar_mux_008:sink0_valid
	wire          cmd_xbar_demux_src8_startofpacket;                                                                // cmd_xbar_demux:src8_startofpacket -> cmd_xbar_mux_008:sink0_startofpacket
	wire  [119:0] cmd_xbar_demux_src8_data;                                                                         // cmd_xbar_demux:src8_data -> cmd_xbar_mux_008:sink0_data
	wire   [17:0] cmd_xbar_demux_src8_channel;                                                                      // cmd_xbar_demux:src8_channel -> cmd_xbar_mux_008:sink0_channel
	wire          cmd_xbar_demux_src8_ready;                                                                        // cmd_xbar_mux_008:sink0_ready -> cmd_xbar_demux:src8_ready
	wire          cmd_xbar_demux_src9_endofpacket;                                                                  // cmd_xbar_demux:src9_endofpacket -> cmd_xbar_mux_009:sink0_endofpacket
	wire          cmd_xbar_demux_src9_valid;                                                                        // cmd_xbar_demux:src9_valid -> cmd_xbar_mux_009:sink0_valid
	wire          cmd_xbar_demux_src9_startofpacket;                                                                // cmd_xbar_demux:src9_startofpacket -> cmd_xbar_mux_009:sink0_startofpacket
	wire  [119:0] cmd_xbar_demux_src9_data;                                                                         // cmd_xbar_demux:src9_data -> cmd_xbar_mux_009:sink0_data
	wire   [17:0] cmd_xbar_demux_src9_channel;                                                                      // cmd_xbar_demux:src9_channel -> cmd_xbar_mux_009:sink0_channel
	wire          cmd_xbar_demux_src9_ready;                                                                        // cmd_xbar_mux_009:sink0_ready -> cmd_xbar_demux:src9_ready
	wire          cmd_xbar_demux_src10_endofpacket;                                                                 // cmd_xbar_demux:src10_endofpacket -> cmd_xbar_mux_010:sink0_endofpacket
	wire          cmd_xbar_demux_src10_valid;                                                                       // cmd_xbar_demux:src10_valid -> cmd_xbar_mux_010:sink0_valid
	wire          cmd_xbar_demux_src10_startofpacket;                                                               // cmd_xbar_demux:src10_startofpacket -> cmd_xbar_mux_010:sink0_startofpacket
	wire  [119:0] cmd_xbar_demux_src10_data;                                                                        // cmd_xbar_demux:src10_data -> cmd_xbar_mux_010:sink0_data
	wire   [17:0] cmd_xbar_demux_src10_channel;                                                                     // cmd_xbar_demux:src10_channel -> cmd_xbar_mux_010:sink0_channel
	wire          cmd_xbar_demux_src10_ready;                                                                       // cmd_xbar_mux_010:sink0_ready -> cmd_xbar_demux:src10_ready
	wire          cmd_xbar_demux_src11_endofpacket;                                                                 // cmd_xbar_demux:src11_endofpacket -> cmd_xbar_mux_011:sink0_endofpacket
	wire          cmd_xbar_demux_src11_valid;                                                                       // cmd_xbar_demux:src11_valid -> cmd_xbar_mux_011:sink0_valid
	wire          cmd_xbar_demux_src11_startofpacket;                                                               // cmd_xbar_demux:src11_startofpacket -> cmd_xbar_mux_011:sink0_startofpacket
	wire  [119:0] cmd_xbar_demux_src11_data;                                                                        // cmd_xbar_demux:src11_data -> cmd_xbar_mux_011:sink0_data
	wire   [17:0] cmd_xbar_demux_src11_channel;                                                                     // cmd_xbar_demux:src11_channel -> cmd_xbar_mux_011:sink0_channel
	wire          cmd_xbar_demux_src11_ready;                                                                       // cmd_xbar_mux_011:sink0_ready -> cmd_xbar_demux:src11_ready
	wire          cmd_xbar_demux_src12_endofpacket;                                                                 // cmd_xbar_demux:src12_endofpacket -> cmd_xbar_mux_012:sink0_endofpacket
	wire          cmd_xbar_demux_src12_valid;                                                                       // cmd_xbar_demux:src12_valid -> cmd_xbar_mux_012:sink0_valid
	wire          cmd_xbar_demux_src12_startofpacket;                                                               // cmd_xbar_demux:src12_startofpacket -> cmd_xbar_mux_012:sink0_startofpacket
	wire  [119:0] cmd_xbar_demux_src12_data;                                                                        // cmd_xbar_demux:src12_data -> cmd_xbar_mux_012:sink0_data
	wire   [17:0] cmd_xbar_demux_src12_channel;                                                                     // cmd_xbar_demux:src12_channel -> cmd_xbar_mux_012:sink0_channel
	wire          cmd_xbar_demux_src12_ready;                                                                       // cmd_xbar_mux_012:sink0_ready -> cmd_xbar_demux:src12_ready
	wire          cmd_xbar_demux_src13_endofpacket;                                                                 // cmd_xbar_demux:src13_endofpacket -> cmd_xbar_mux_013:sink0_endofpacket
	wire          cmd_xbar_demux_src13_valid;                                                                       // cmd_xbar_demux:src13_valid -> cmd_xbar_mux_013:sink0_valid
	wire          cmd_xbar_demux_src13_startofpacket;                                                               // cmd_xbar_demux:src13_startofpacket -> cmd_xbar_mux_013:sink0_startofpacket
	wire  [119:0] cmd_xbar_demux_src13_data;                                                                        // cmd_xbar_demux:src13_data -> cmd_xbar_mux_013:sink0_data
	wire   [17:0] cmd_xbar_demux_src13_channel;                                                                     // cmd_xbar_demux:src13_channel -> cmd_xbar_mux_013:sink0_channel
	wire          cmd_xbar_demux_src13_ready;                                                                       // cmd_xbar_mux_013:sink0_ready -> cmd_xbar_demux:src13_ready
	wire          cmd_xbar_demux_src14_endofpacket;                                                                 // cmd_xbar_demux:src14_endofpacket -> cmd_xbar_mux_014:sink0_endofpacket
	wire          cmd_xbar_demux_src14_valid;                                                                       // cmd_xbar_demux:src14_valid -> cmd_xbar_mux_014:sink0_valid
	wire          cmd_xbar_demux_src14_startofpacket;                                                               // cmd_xbar_demux:src14_startofpacket -> cmd_xbar_mux_014:sink0_startofpacket
	wire  [119:0] cmd_xbar_demux_src14_data;                                                                        // cmd_xbar_demux:src14_data -> cmd_xbar_mux_014:sink0_data
	wire   [17:0] cmd_xbar_demux_src14_channel;                                                                     // cmd_xbar_demux:src14_channel -> cmd_xbar_mux_014:sink0_channel
	wire          cmd_xbar_demux_src14_ready;                                                                       // cmd_xbar_mux_014:sink0_ready -> cmd_xbar_demux:src14_ready
	wire          cmd_xbar_demux_src15_endofpacket;                                                                 // cmd_xbar_demux:src15_endofpacket -> cmd_xbar_mux_015:sink0_endofpacket
	wire          cmd_xbar_demux_src15_valid;                                                                       // cmd_xbar_demux:src15_valid -> cmd_xbar_mux_015:sink0_valid
	wire          cmd_xbar_demux_src15_startofpacket;                                                               // cmd_xbar_demux:src15_startofpacket -> cmd_xbar_mux_015:sink0_startofpacket
	wire  [119:0] cmd_xbar_demux_src15_data;                                                                        // cmd_xbar_demux:src15_data -> cmd_xbar_mux_015:sink0_data
	wire   [17:0] cmd_xbar_demux_src15_channel;                                                                     // cmd_xbar_demux:src15_channel -> cmd_xbar_mux_015:sink0_channel
	wire          cmd_xbar_demux_src15_ready;                                                                       // cmd_xbar_mux_015:sink0_ready -> cmd_xbar_demux:src15_ready
	wire          cmd_xbar_demux_src16_endofpacket;                                                                 // cmd_xbar_demux:src16_endofpacket -> cmd_xbar_mux_016:sink0_endofpacket
	wire          cmd_xbar_demux_src16_valid;                                                                       // cmd_xbar_demux:src16_valid -> cmd_xbar_mux_016:sink0_valid
	wire          cmd_xbar_demux_src16_startofpacket;                                                               // cmd_xbar_demux:src16_startofpacket -> cmd_xbar_mux_016:sink0_startofpacket
	wire  [119:0] cmd_xbar_demux_src16_data;                                                                        // cmd_xbar_demux:src16_data -> cmd_xbar_mux_016:sink0_data
	wire   [17:0] cmd_xbar_demux_src16_channel;                                                                     // cmd_xbar_demux:src16_channel -> cmd_xbar_mux_016:sink0_channel
	wire          cmd_xbar_demux_src16_ready;                                                                       // cmd_xbar_mux_016:sink0_ready -> cmd_xbar_demux:src16_ready
	wire          cmd_xbar_demux_src17_endofpacket;                                                                 // cmd_xbar_demux:src17_endofpacket -> cmd_xbar_mux_017:sink0_endofpacket
	wire          cmd_xbar_demux_src17_valid;                                                                       // cmd_xbar_demux:src17_valid -> cmd_xbar_mux_017:sink0_valid
	wire          cmd_xbar_demux_src17_startofpacket;                                                               // cmd_xbar_demux:src17_startofpacket -> cmd_xbar_mux_017:sink0_startofpacket
	wire  [119:0] cmd_xbar_demux_src17_data;                                                                        // cmd_xbar_demux:src17_data -> cmd_xbar_mux_017:sink0_data
	wire   [17:0] cmd_xbar_demux_src17_channel;                                                                     // cmd_xbar_demux:src17_channel -> cmd_xbar_mux_017:sink0_channel
	wire          cmd_xbar_demux_src17_ready;                                                                       // cmd_xbar_mux_017:sink0_ready -> cmd_xbar_demux:src17_ready
	wire          cmd_xbar_demux_001_src0_endofpacket;                                                              // cmd_xbar_demux_001:src0_endofpacket -> cmd_xbar_mux:sink1_endofpacket
	wire          cmd_xbar_demux_001_src0_valid;                                                                    // cmd_xbar_demux_001:src0_valid -> cmd_xbar_mux:sink1_valid
	wire          cmd_xbar_demux_001_src0_startofpacket;                                                            // cmd_xbar_demux_001:src0_startofpacket -> cmd_xbar_mux:sink1_startofpacket
	wire  [119:0] cmd_xbar_demux_001_src0_data;                                                                     // cmd_xbar_demux_001:src0_data -> cmd_xbar_mux:sink1_data
	wire   [17:0] cmd_xbar_demux_001_src0_channel;                                                                  // cmd_xbar_demux_001:src0_channel -> cmd_xbar_mux:sink1_channel
	wire          cmd_xbar_demux_001_src0_ready;                                                                    // cmd_xbar_mux:sink1_ready -> cmd_xbar_demux_001:src0_ready
	wire          cmd_xbar_demux_001_src1_endofpacket;                                                              // cmd_xbar_demux_001:src1_endofpacket -> cmd_xbar_mux_001:sink1_endofpacket
	wire          cmd_xbar_demux_001_src1_valid;                                                                    // cmd_xbar_demux_001:src1_valid -> cmd_xbar_mux_001:sink1_valid
	wire          cmd_xbar_demux_001_src1_startofpacket;                                                            // cmd_xbar_demux_001:src1_startofpacket -> cmd_xbar_mux_001:sink1_startofpacket
	wire  [119:0] cmd_xbar_demux_001_src1_data;                                                                     // cmd_xbar_demux_001:src1_data -> cmd_xbar_mux_001:sink1_data
	wire   [17:0] cmd_xbar_demux_001_src1_channel;                                                                  // cmd_xbar_demux_001:src1_channel -> cmd_xbar_mux_001:sink1_channel
	wire          cmd_xbar_demux_001_src1_ready;                                                                    // cmd_xbar_mux_001:sink1_ready -> cmd_xbar_demux_001:src1_ready
	wire          cmd_xbar_demux_001_src2_endofpacket;                                                              // cmd_xbar_demux_001:src2_endofpacket -> cmd_xbar_mux_002:sink1_endofpacket
	wire          cmd_xbar_demux_001_src2_valid;                                                                    // cmd_xbar_demux_001:src2_valid -> cmd_xbar_mux_002:sink1_valid
	wire          cmd_xbar_demux_001_src2_startofpacket;                                                            // cmd_xbar_demux_001:src2_startofpacket -> cmd_xbar_mux_002:sink1_startofpacket
	wire  [119:0] cmd_xbar_demux_001_src2_data;                                                                     // cmd_xbar_demux_001:src2_data -> cmd_xbar_mux_002:sink1_data
	wire   [17:0] cmd_xbar_demux_001_src2_channel;                                                                  // cmd_xbar_demux_001:src2_channel -> cmd_xbar_mux_002:sink1_channel
	wire          cmd_xbar_demux_001_src2_ready;                                                                    // cmd_xbar_mux_002:sink1_ready -> cmd_xbar_demux_001:src2_ready
	wire          cmd_xbar_demux_001_src3_endofpacket;                                                              // cmd_xbar_demux_001:src3_endofpacket -> cmd_xbar_mux_003:sink1_endofpacket
	wire          cmd_xbar_demux_001_src3_valid;                                                                    // cmd_xbar_demux_001:src3_valid -> cmd_xbar_mux_003:sink1_valid
	wire          cmd_xbar_demux_001_src3_startofpacket;                                                            // cmd_xbar_demux_001:src3_startofpacket -> cmd_xbar_mux_003:sink1_startofpacket
	wire  [119:0] cmd_xbar_demux_001_src3_data;                                                                     // cmd_xbar_demux_001:src3_data -> cmd_xbar_mux_003:sink1_data
	wire   [17:0] cmd_xbar_demux_001_src3_channel;                                                                  // cmd_xbar_demux_001:src3_channel -> cmd_xbar_mux_003:sink1_channel
	wire          cmd_xbar_demux_001_src3_ready;                                                                    // cmd_xbar_mux_003:sink1_ready -> cmd_xbar_demux_001:src3_ready
	wire          cmd_xbar_demux_001_src4_endofpacket;                                                              // cmd_xbar_demux_001:src4_endofpacket -> cmd_xbar_mux_004:sink1_endofpacket
	wire          cmd_xbar_demux_001_src4_valid;                                                                    // cmd_xbar_demux_001:src4_valid -> cmd_xbar_mux_004:sink1_valid
	wire          cmd_xbar_demux_001_src4_startofpacket;                                                            // cmd_xbar_demux_001:src4_startofpacket -> cmd_xbar_mux_004:sink1_startofpacket
	wire  [119:0] cmd_xbar_demux_001_src4_data;                                                                     // cmd_xbar_demux_001:src4_data -> cmd_xbar_mux_004:sink1_data
	wire   [17:0] cmd_xbar_demux_001_src4_channel;                                                                  // cmd_xbar_demux_001:src4_channel -> cmd_xbar_mux_004:sink1_channel
	wire          cmd_xbar_demux_001_src4_ready;                                                                    // cmd_xbar_mux_004:sink1_ready -> cmd_xbar_demux_001:src4_ready
	wire          cmd_xbar_demux_001_src5_endofpacket;                                                              // cmd_xbar_demux_001:src5_endofpacket -> cmd_xbar_mux_005:sink1_endofpacket
	wire          cmd_xbar_demux_001_src5_valid;                                                                    // cmd_xbar_demux_001:src5_valid -> cmd_xbar_mux_005:sink1_valid
	wire          cmd_xbar_demux_001_src5_startofpacket;                                                            // cmd_xbar_demux_001:src5_startofpacket -> cmd_xbar_mux_005:sink1_startofpacket
	wire  [119:0] cmd_xbar_demux_001_src5_data;                                                                     // cmd_xbar_demux_001:src5_data -> cmd_xbar_mux_005:sink1_data
	wire   [17:0] cmd_xbar_demux_001_src5_channel;                                                                  // cmd_xbar_demux_001:src5_channel -> cmd_xbar_mux_005:sink1_channel
	wire          cmd_xbar_demux_001_src5_ready;                                                                    // cmd_xbar_mux_005:sink1_ready -> cmd_xbar_demux_001:src5_ready
	wire          cmd_xbar_demux_001_src6_endofpacket;                                                              // cmd_xbar_demux_001:src6_endofpacket -> cmd_xbar_mux_006:sink1_endofpacket
	wire          cmd_xbar_demux_001_src6_valid;                                                                    // cmd_xbar_demux_001:src6_valid -> cmd_xbar_mux_006:sink1_valid
	wire          cmd_xbar_demux_001_src6_startofpacket;                                                            // cmd_xbar_demux_001:src6_startofpacket -> cmd_xbar_mux_006:sink1_startofpacket
	wire  [119:0] cmd_xbar_demux_001_src6_data;                                                                     // cmd_xbar_demux_001:src6_data -> cmd_xbar_mux_006:sink1_data
	wire   [17:0] cmd_xbar_demux_001_src6_channel;                                                                  // cmd_xbar_demux_001:src6_channel -> cmd_xbar_mux_006:sink1_channel
	wire          cmd_xbar_demux_001_src6_ready;                                                                    // cmd_xbar_mux_006:sink1_ready -> cmd_xbar_demux_001:src6_ready
	wire          cmd_xbar_demux_001_src7_endofpacket;                                                              // cmd_xbar_demux_001:src7_endofpacket -> cmd_xbar_mux_007:sink1_endofpacket
	wire          cmd_xbar_demux_001_src7_valid;                                                                    // cmd_xbar_demux_001:src7_valid -> cmd_xbar_mux_007:sink1_valid
	wire          cmd_xbar_demux_001_src7_startofpacket;                                                            // cmd_xbar_demux_001:src7_startofpacket -> cmd_xbar_mux_007:sink1_startofpacket
	wire  [119:0] cmd_xbar_demux_001_src7_data;                                                                     // cmd_xbar_demux_001:src7_data -> cmd_xbar_mux_007:sink1_data
	wire   [17:0] cmd_xbar_demux_001_src7_channel;                                                                  // cmd_xbar_demux_001:src7_channel -> cmd_xbar_mux_007:sink1_channel
	wire          cmd_xbar_demux_001_src7_ready;                                                                    // cmd_xbar_mux_007:sink1_ready -> cmd_xbar_demux_001:src7_ready
	wire          cmd_xbar_demux_001_src8_endofpacket;                                                              // cmd_xbar_demux_001:src8_endofpacket -> cmd_xbar_mux_008:sink1_endofpacket
	wire          cmd_xbar_demux_001_src8_valid;                                                                    // cmd_xbar_demux_001:src8_valid -> cmd_xbar_mux_008:sink1_valid
	wire          cmd_xbar_demux_001_src8_startofpacket;                                                            // cmd_xbar_demux_001:src8_startofpacket -> cmd_xbar_mux_008:sink1_startofpacket
	wire  [119:0] cmd_xbar_demux_001_src8_data;                                                                     // cmd_xbar_demux_001:src8_data -> cmd_xbar_mux_008:sink1_data
	wire   [17:0] cmd_xbar_demux_001_src8_channel;                                                                  // cmd_xbar_demux_001:src8_channel -> cmd_xbar_mux_008:sink1_channel
	wire          cmd_xbar_demux_001_src8_ready;                                                                    // cmd_xbar_mux_008:sink1_ready -> cmd_xbar_demux_001:src8_ready
	wire          cmd_xbar_demux_001_src9_endofpacket;                                                              // cmd_xbar_demux_001:src9_endofpacket -> cmd_xbar_mux_009:sink1_endofpacket
	wire          cmd_xbar_demux_001_src9_valid;                                                                    // cmd_xbar_demux_001:src9_valid -> cmd_xbar_mux_009:sink1_valid
	wire          cmd_xbar_demux_001_src9_startofpacket;                                                            // cmd_xbar_demux_001:src9_startofpacket -> cmd_xbar_mux_009:sink1_startofpacket
	wire  [119:0] cmd_xbar_demux_001_src9_data;                                                                     // cmd_xbar_demux_001:src9_data -> cmd_xbar_mux_009:sink1_data
	wire   [17:0] cmd_xbar_demux_001_src9_channel;                                                                  // cmd_xbar_demux_001:src9_channel -> cmd_xbar_mux_009:sink1_channel
	wire          cmd_xbar_demux_001_src9_ready;                                                                    // cmd_xbar_mux_009:sink1_ready -> cmd_xbar_demux_001:src9_ready
	wire          cmd_xbar_demux_001_src10_endofpacket;                                                             // cmd_xbar_demux_001:src10_endofpacket -> cmd_xbar_mux_010:sink1_endofpacket
	wire          cmd_xbar_demux_001_src10_valid;                                                                   // cmd_xbar_demux_001:src10_valid -> cmd_xbar_mux_010:sink1_valid
	wire          cmd_xbar_demux_001_src10_startofpacket;                                                           // cmd_xbar_demux_001:src10_startofpacket -> cmd_xbar_mux_010:sink1_startofpacket
	wire  [119:0] cmd_xbar_demux_001_src10_data;                                                                    // cmd_xbar_demux_001:src10_data -> cmd_xbar_mux_010:sink1_data
	wire   [17:0] cmd_xbar_demux_001_src10_channel;                                                                 // cmd_xbar_demux_001:src10_channel -> cmd_xbar_mux_010:sink1_channel
	wire          cmd_xbar_demux_001_src10_ready;                                                                   // cmd_xbar_mux_010:sink1_ready -> cmd_xbar_demux_001:src10_ready
	wire          cmd_xbar_demux_001_src11_endofpacket;                                                             // cmd_xbar_demux_001:src11_endofpacket -> cmd_xbar_mux_011:sink1_endofpacket
	wire          cmd_xbar_demux_001_src11_valid;                                                                   // cmd_xbar_demux_001:src11_valid -> cmd_xbar_mux_011:sink1_valid
	wire          cmd_xbar_demux_001_src11_startofpacket;                                                           // cmd_xbar_demux_001:src11_startofpacket -> cmd_xbar_mux_011:sink1_startofpacket
	wire  [119:0] cmd_xbar_demux_001_src11_data;                                                                    // cmd_xbar_demux_001:src11_data -> cmd_xbar_mux_011:sink1_data
	wire   [17:0] cmd_xbar_demux_001_src11_channel;                                                                 // cmd_xbar_demux_001:src11_channel -> cmd_xbar_mux_011:sink1_channel
	wire          cmd_xbar_demux_001_src11_ready;                                                                   // cmd_xbar_mux_011:sink1_ready -> cmd_xbar_demux_001:src11_ready
	wire          cmd_xbar_demux_001_src12_endofpacket;                                                             // cmd_xbar_demux_001:src12_endofpacket -> cmd_xbar_mux_012:sink1_endofpacket
	wire          cmd_xbar_demux_001_src12_valid;                                                                   // cmd_xbar_demux_001:src12_valid -> cmd_xbar_mux_012:sink1_valid
	wire          cmd_xbar_demux_001_src12_startofpacket;                                                           // cmd_xbar_demux_001:src12_startofpacket -> cmd_xbar_mux_012:sink1_startofpacket
	wire  [119:0] cmd_xbar_demux_001_src12_data;                                                                    // cmd_xbar_demux_001:src12_data -> cmd_xbar_mux_012:sink1_data
	wire   [17:0] cmd_xbar_demux_001_src12_channel;                                                                 // cmd_xbar_demux_001:src12_channel -> cmd_xbar_mux_012:sink1_channel
	wire          cmd_xbar_demux_001_src12_ready;                                                                   // cmd_xbar_mux_012:sink1_ready -> cmd_xbar_demux_001:src12_ready
	wire          cmd_xbar_demux_001_src13_endofpacket;                                                             // cmd_xbar_demux_001:src13_endofpacket -> cmd_xbar_mux_013:sink1_endofpacket
	wire          cmd_xbar_demux_001_src13_valid;                                                                   // cmd_xbar_demux_001:src13_valid -> cmd_xbar_mux_013:sink1_valid
	wire          cmd_xbar_demux_001_src13_startofpacket;                                                           // cmd_xbar_demux_001:src13_startofpacket -> cmd_xbar_mux_013:sink1_startofpacket
	wire  [119:0] cmd_xbar_demux_001_src13_data;                                                                    // cmd_xbar_demux_001:src13_data -> cmd_xbar_mux_013:sink1_data
	wire   [17:0] cmd_xbar_demux_001_src13_channel;                                                                 // cmd_xbar_demux_001:src13_channel -> cmd_xbar_mux_013:sink1_channel
	wire          cmd_xbar_demux_001_src13_ready;                                                                   // cmd_xbar_mux_013:sink1_ready -> cmd_xbar_demux_001:src13_ready
	wire          cmd_xbar_demux_001_src14_endofpacket;                                                             // cmd_xbar_demux_001:src14_endofpacket -> cmd_xbar_mux_014:sink1_endofpacket
	wire          cmd_xbar_demux_001_src14_valid;                                                                   // cmd_xbar_demux_001:src14_valid -> cmd_xbar_mux_014:sink1_valid
	wire          cmd_xbar_demux_001_src14_startofpacket;                                                           // cmd_xbar_demux_001:src14_startofpacket -> cmd_xbar_mux_014:sink1_startofpacket
	wire  [119:0] cmd_xbar_demux_001_src14_data;                                                                    // cmd_xbar_demux_001:src14_data -> cmd_xbar_mux_014:sink1_data
	wire   [17:0] cmd_xbar_demux_001_src14_channel;                                                                 // cmd_xbar_demux_001:src14_channel -> cmd_xbar_mux_014:sink1_channel
	wire          cmd_xbar_demux_001_src14_ready;                                                                   // cmd_xbar_mux_014:sink1_ready -> cmd_xbar_demux_001:src14_ready
	wire          cmd_xbar_demux_001_src15_endofpacket;                                                             // cmd_xbar_demux_001:src15_endofpacket -> cmd_xbar_mux_015:sink1_endofpacket
	wire          cmd_xbar_demux_001_src15_valid;                                                                   // cmd_xbar_demux_001:src15_valid -> cmd_xbar_mux_015:sink1_valid
	wire          cmd_xbar_demux_001_src15_startofpacket;                                                           // cmd_xbar_demux_001:src15_startofpacket -> cmd_xbar_mux_015:sink1_startofpacket
	wire  [119:0] cmd_xbar_demux_001_src15_data;                                                                    // cmd_xbar_demux_001:src15_data -> cmd_xbar_mux_015:sink1_data
	wire   [17:0] cmd_xbar_demux_001_src15_channel;                                                                 // cmd_xbar_demux_001:src15_channel -> cmd_xbar_mux_015:sink1_channel
	wire          cmd_xbar_demux_001_src15_ready;                                                                   // cmd_xbar_mux_015:sink1_ready -> cmd_xbar_demux_001:src15_ready
	wire          cmd_xbar_demux_001_src16_endofpacket;                                                             // cmd_xbar_demux_001:src16_endofpacket -> cmd_xbar_mux_016:sink1_endofpacket
	wire          cmd_xbar_demux_001_src16_valid;                                                                   // cmd_xbar_demux_001:src16_valid -> cmd_xbar_mux_016:sink1_valid
	wire          cmd_xbar_demux_001_src16_startofpacket;                                                           // cmd_xbar_demux_001:src16_startofpacket -> cmd_xbar_mux_016:sink1_startofpacket
	wire  [119:0] cmd_xbar_demux_001_src16_data;                                                                    // cmd_xbar_demux_001:src16_data -> cmd_xbar_mux_016:sink1_data
	wire   [17:0] cmd_xbar_demux_001_src16_channel;                                                                 // cmd_xbar_demux_001:src16_channel -> cmd_xbar_mux_016:sink1_channel
	wire          cmd_xbar_demux_001_src16_ready;                                                                   // cmd_xbar_mux_016:sink1_ready -> cmd_xbar_demux_001:src16_ready
	wire          cmd_xbar_demux_001_src17_endofpacket;                                                             // cmd_xbar_demux_001:src17_endofpacket -> cmd_xbar_mux_017:sink1_endofpacket
	wire          cmd_xbar_demux_001_src17_valid;                                                                   // cmd_xbar_demux_001:src17_valid -> cmd_xbar_mux_017:sink1_valid
	wire          cmd_xbar_demux_001_src17_startofpacket;                                                           // cmd_xbar_demux_001:src17_startofpacket -> cmd_xbar_mux_017:sink1_startofpacket
	wire  [119:0] cmd_xbar_demux_001_src17_data;                                                                    // cmd_xbar_demux_001:src17_data -> cmd_xbar_mux_017:sink1_data
	wire   [17:0] cmd_xbar_demux_001_src17_channel;                                                                 // cmd_xbar_demux_001:src17_channel -> cmd_xbar_mux_017:sink1_channel
	wire          cmd_xbar_demux_001_src17_ready;                                                                   // cmd_xbar_mux_017:sink1_ready -> cmd_xbar_demux_001:src17_ready
	wire          rsp_xbar_demux_src0_endofpacket;                                                                  // rsp_xbar_demux:src0_endofpacket -> rsp_xbar_mux:sink0_endofpacket
	wire          rsp_xbar_demux_src0_valid;                                                                        // rsp_xbar_demux:src0_valid -> rsp_xbar_mux:sink0_valid
	wire          rsp_xbar_demux_src0_startofpacket;                                                                // rsp_xbar_demux:src0_startofpacket -> rsp_xbar_mux:sink0_startofpacket
	wire  [119:0] rsp_xbar_demux_src0_data;                                                                         // rsp_xbar_demux:src0_data -> rsp_xbar_mux:sink0_data
	wire   [17:0] rsp_xbar_demux_src0_channel;                                                                      // rsp_xbar_demux:src0_channel -> rsp_xbar_mux:sink0_channel
	wire          rsp_xbar_demux_src0_ready;                                                                        // rsp_xbar_mux:sink0_ready -> rsp_xbar_demux:src0_ready
	wire          rsp_xbar_demux_src1_endofpacket;                                                                  // rsp_xbar_demux:src1_endofpacket -> rsp_xbar_mux_001:sink0_endofpacket
	wire          rsp_xbar_demux_src1_valid;                                                                        // rsp_xbar_demux:src1_valid -> rsp_xbar_mux_001:sink0_valid
	wire          rsp_xbar_demux_src1_startofpacket;                                                                // rsp_xbar_demux:src1_startofpacket -> rsp_xbar_mux_001:sink0_startofpacket
	wire  [119:0] rsp_xbar_demux_src1_data;                                                                         // rsp_xbar_demux:src1_data -> rsp_xbar_mux_001:sink0_data
	wire   [17:0] rsp_xbar_demux_src1_channel;                                                                      // rsp_xbar_demux:src1_channel -> rsp_xbar_mux_001:sink0_channel
	wire          rsp_xbar_demux_src1_ready;                                                                        // rsp_xbar_mux_001:sink0_ready -> rsp_xbar_demux:src1_ready
	wire          rsp_xbar_demux_001_src0_endofpacket;                                                              // rsp_xbar_demux_001:src0_endofpacket -> rsp_xbar_mux:sink1_endofpacket
	wire          rsp_xbar_demux_001_src0_valid;                                                                    // rsp_xbar_demux_001:src0_valid -> rsp_xbar_mux:sink1_valid
	wire          rsp_xbar_demux_001_src0_startofpacket;                                                            // rsp_xbar_demux_001:src0_startofpacket -> rsp_xbar_mux:sink1_startofpacket
	wire  [119:0] rsp_xbar_demux_001_src0_data;                                                                     // rsp_xbar_demux_001:src0_data -> rsp_xbar_mux:sink1_data
	wire   [17:0] rsp_xbar_demux_001_src0_channel;                                                                  // rsp_xbar_demux_001:src0_channel -> rsp_xbar_mux:sink1_channel
	wire          rsp_xbar_demux_001_src0_ready;                                                                    // rsp_xbar_mux:sink1_ready -> rsp_xbar_demux_001:src0_ready
	wire          rsp_xbar_demux_001_src1_endofpacket;                                                              // rsp_xbar_demux_001:src1_endofpacket -> rsp_xbar_mux_001:sink1_endofpacket
	wire          rsp_xbar_demux_001_src1_valid;                                                                    // rsp_xbar_demux_001:src1_valid -> rsp_xbar_mux_001:sink1_valid
	wire          rsp_xbar_demux_001_src1_startofpacket;                                                            // rsp_xbar_demux_001:src1_startofpacket -> rsp_xbar_mux_001:sink1_startofpacket
	wire  [119:0] rsp_xbar_demux_001_src1_data;                                                                     // rsp_xbar_demux_001:src1_data -> rsp_xbar_mux_001:sink1_data
	wire   [17:0] rsp_xbar_demux_001_src1_channel;                                                                  // rsp_xbar_demux_001:src1_channel -> rsp_xbar_mux_001:sink1_channel
	wire          rsp_xbar_demux_001_src1_ready;                                                                    // rsp_xbar_mux_001:sink1_ready -> rsp_xbar_demux_001:src1_ready
	wire          rsp_xbar_demux_002_src0_endofpacket;                                                              // rsp_xbar_demux_002:src0_endofpacket -> rsp_xbar_mux:sink2_endofpacket
	wire          rsp_xbar_demux_002_src0_valid;                                                                    // rsp_xbar_demux_002:src0_valid -> rsp_xbar_mux:sink2_valid
	wire          rsp_xbar_demux_002_src0_startofpacket;                                                            // rsp_xbar_demux_002:src0_startofpacket -> rsp_xbar_mux:sink2_startofpacket
	wire  [119:0] rsp_xbar_demux_002_src0_data;                                                                     // rsp_xbar_demux_002:src0_data -> rsp_xbar_mux:sink2_data
	wire   [17:0] rsp_xbar_demux_002_src0_channel;                                                                  // rsp_xbar_demux_002:src0_channel -> rsp_xbar_mux:sink2_channel
	wire          rsp_xbar_demux_002_src0_ready;                                                                    // rsp_xbar_mux:sink2_ready -> rsp_xbar_demux_002:src0_ready
	wire          rsp_xbar_demux_002_src1_endofpacket;                                                              // rsp_xbar_demux_002:src1_endofpacket -> rsp_xbar_mux_001:sink2_endofpacket
	wire          rsp_xbar_demux_002_src1_valid;                                                                    // rsp_xbar_demux_002:src1_valid -> rsp_xbar_mux_001:sink2_valid
	wire          rsp_xbar_demux_002_src1_startofpacket;                                                            // rsp_xbar_demux_002:src1_startofpacket -> rsp_xbar_mux_001:sink2_startofpacket
	wire  [119:0] rsp_xbar_demux_002_src1_data;                                                                     // rsp_xbar_demux_002:src1_data -> rsp_xbar_mux_001:sink2_data
	wire   [17:0] rsp_xbar_demux_002_src1_channel;                                                                  // rsp_xbar_demux_002:src1_channel -> rsp_xbar_mux_001:sink2_channel
	wire          rsp_xbar_demux_002_src1_ready;                                                                    // rsp_xbar_mux_001:sink2_ready -> rsp_xbar_demux_002:src1_ready
	wire          rsp_xbar_demux_003_src0_endofpacket;                                                              // rsp_xbar_demux_003:src0_endofpacket -> rsp_xbar_mux:sink3_endofpacket
	wire          rsp_xbar_demux_003_src0_valid;                                                                    // rsp_xbar_demux_003:src0_valid -> rsp_xbar_mux:sink3_valid
	wire          rsp_xbar_demux_003_src0_startofpacket;                                                            // rsp_xbar_demux_003:src0_startofpacket -> rsp_xbar_mux:sink3_startofpacket
	wire  [119:0] rsp_xbar_demux_003_src0_data;                                                                     // rsp_xbar_demux_003:src0_data -> rsp_xbar_mux:sink3_data
	wire   [17:0] rsp_xbar_demux_003_src0_channel;                                                                  // rsp_xbar_demux_003:src0_channel -> rsp_xbar_mux:sink3_channel
	wire          rsp_xbar_demux_003_src0_ready;                                                                    // rsp_xbar_mux:sink3_ready -> rsp_xbar_demux_003:src0_ready
	wire          rsp_xbar_demux_003_src1_endofpacket;                                                              // rsp_xbar_demux_003:src1_endofpacket -> rsp_xbar_mux_001:sink3_endofpacket
	wire          rsp_xbar_demux_003_src1_valid;                                                                    // rsp_xbar_demux_003:src1_valid -> rsp_xbar_mux_001:sink3_valid
	wire          rsp_xbar_demux_003_src1_startofpacket;                                                            // rsp_xbar_demux_003:src1_startofpacket -> rsp_xbar_mux_001:sink3_startofpacket
	wire  [119:0] rsp_xbar_demux_003_src1_data;                                                                     // rsp_xbar_demux_003:src1_data -> rsp_xbar_mux_001:sink3_data
	wire   [17:0] rsp_xbar_demux_003_src1_channel;                                                                  // rsp_xbar_demux_003:src1_channel -> rsp_xbar_mux_001:sink3_channel
	wire          rsp_xbar_demux_003_src1_ready;                                                                    // rsp_xbar_mux_001:sink3_ready -> rsp_xbar_demux_003:src1_ready
	wire          rsp_xbar_demux_004_src0_endofpacket;                                                              // rsp_xbar_demux_004:src0_endofpacket -> rsp_xbar_mux:sink4_endofpacket
	wire          rsp_xbar_demux_004_src0_valid;                                                                    // rsp_xbar_demux_004:src0_valid -> rsp_xbar_mux:sink4_valid
	wire          rsp_xbar_demux_004_src0_startofpacket;                                                            // rsp_xbar_demux_004:src0_startofpacket -> rsp_xbar_mux:sink4_startofpacket
	wire  [119:0] rsp_xbar_demux_004_src0_data;                                                                     // rsp_xbar_demux_004:src0_data -> rsp_xbar_mux:sink4_data
	wire   [17:0] rsp_xbar_demux_004_src0_channel;                                                                  // rsp_xbar_demux_004:src0_channel -> rsp_xbar_mux:sink4_channel
	wire          rsp_xbar_demux_004_src0_ready;                                                                    // rsp_xbar_mux:sink4_ready -> rsp_xbar_demux_004:src0_ready
	wire          rsp_xbar_demux_004_src1_endofpacket;                                                              // rsp_xbar_demux_004:src1_endofpacket -> rsp_xbar_mux_001:sink4_endofpacket
	wire          rsp_xbar_demux_004_src1_valid;                                                                    // rsp_xbar_demux_004:src1_valid -> rsp_xbar_mux_001:sink4_valid
	wire          rsp_xbar_demux_004_src1_startofpacket;                                                            // rsp_xbar_demux_004:src1_startofpacket -> rsp_xbar_mux_001:sink4_startofpacket
	wire  [119:0] rsp_xbar_demux_004_src1_data;                                                                     // rsp_xbar_demux_004:src1_data -> rsp_xbar_mux_001:sink4_data
	wire   [17:0] rsp_xbar_demux_004_src1_channel;                                                                  // rsp_xbar_demux_004:src1_channel -> rsp_xbar_mux_001:sink4_channel
	wire          rsp_xbar_demux_004_src1_ready;                                                                    // rsp_xbar_mux_001:sink4_ready -> rsp_xbar_demux_004:src1_ready
	wire          rsp_xbar_demux_005_src0_endofpacket;                                                              // rsp_xbar_demux_005:src0_endofpacket -> rsp_xbar_mux:sink5_endofpacket
	wire          rsp_xbar_demux_005_src0_valid;                                                                    // rsp_xbar_demux_005:src0_valid -> rsp_xbar_mux:sink5_valid
	wire          rsp_xbar_demux_005_src0_startofpacket;                                                            // rsp_xbar_demux_005:src0_startofpacket -> rsp_xbar_mux:sink5_startofpacket
	wire  [119:0] rsp_xbar_demux_005_src0_data;                                                                     // rsp_xbar_demux_005:src0_data -> rsp_xbar_mux:sink5_data
	wire   [17:0] rsp_xbar_demux_005_src0_channel;                                                                  // rsp_xbar_demux_005:src0_channel -> rsp_xbar_mux:sink5_channel
	wire          rsp_xbar_demux_005_src0_ready;                                                                    // rsp_xbar_mux:sink5_ready -> rsp_xbar_demux_005:src0_ready
	wire          rsp_xbar_demux_005_src1_endofpacket;                                                              // rsp_xbar_demux_005:src1_endofpacket -> rsp_xbar_mux_001:sink5_endofpacket
	wire          rsp_xbar_demux_005_src1_valid;                                                                    // rsp_xbar_demux_005:src1_valid -> rsp_xbar_mux_001:sink5_valid
	wire          rsp_xbar_demux_005_src1_startofpacket;                                                            // rsp_xbar_demux_005:src1_startofpacket -> rsp_xbar_mux_001:sink5_startofpacket
	wire  [119:0] rsp_xbar_demux_005_src1_data;                                                                     // rsp_xbar_demux_005:src1_data -> rsp_xbar_mux_001:sink5_data
	wire   [17:0] rsp_xbar_demux_005_src1_channel;                                                                  // rsp_xbar_demux_005:src1_channel -> rsp_xbar_mux_001:sink5_channel
	wire          rsp_xbar_demux_005_src1_ready;                                                                    // rsp_xbar_mux_001:sink5_ready -> rsp_xbar_demux_005:src1_ready
	wire          rsp_xbar_demux_006_src0_endofpacket;                                                              // rsp_xbar_demux_006:src0_endofpacket -> rsp_xbar_mux:sink6_endofpacket
	wire          rsp_xbar_demux_006_src0_valid;                                                                    // rsp_xbar_demux_006:src0_valid -> rsp_xbar_mux:sink6_valid
	wire          rsp_xbar_demux_006_src0_startofpacket;                                                            // rsp_xbar_demux_006:src0_startofpacket -> rsp_xbar_mux:sink6_startofpacket
	wire  [119:0] rsp_xbar_demux_006_src0_data;                                                                     // rsp_xbar_demux_006:src0_data -> rsp_xbar_mux:sink6_data
	wire   [17:0] rsp_xbar_demux_006_src0_channel;                                                                  // rsp_xbar_demux_006:src0_channel -> rsp_xbar_mux:sink6_channel
	wire          rsp_xbar_demux_006_src0_ready;                                                                    // rsp_xbar_mux:sink6_ready -> rsp_xbar_demux_006:src0_ready
	wire          rsp_xbar_demux_006_src1_endofpacket;                                                              // rsp_xbar_demux_006:src1_endofpacket -> rsp_xbar_mux_001:sink6_endofpacket
	wire          rsp_xbar_demux_006_src1_valid;                                                                    // rsp_xbar_demux_006:src1_valid -> rsp_xbar_mux_001:sink6_valid
	wire          rsp_xbar_demux_006_src1_startofpacket;                                                            // rsp_xbar_demux_006:src1_startofpacket -> rsp_xbar_mux_001:sink6_startofpacket
	wire  [119:0] rsp_xbar_demux_006_src1_data;                                                                     // rsp_xbar_demux_006:src1_data -> rsp_xbar_mux_001:sink6_data
	wire   [17:0] rsp_xbar_demux_006_src1_channel;                                                                  // rsp_xbar_demux_006:src1_channel -> rsp_xbar_mux_001:sink6_channel
	wire          rsp_xbar_demux_006_src1_ready;                                                                    // rsp_xbar_mux_001:sink6_ready -> rsp_xbar_demux_006:src1_ready
	wire          rsp_xbar_demux_007_src0_endofpacket;                                                              // rsp_xbar_demux_007:src0_endofpacket -> rsp_xbar_mux:sink7_endofpacket
	wire          rsp_xbar_demux_007_src0_valid;                                                                    // rsp_xbar_demux_007:src0_valid -> rsp_xbar_mux:sink7_valid
	wire          rsp_xbar_demux_007_src0_startofpacket;                                                            // rsp_xbar_demux_007:src0_startofpacket -> rsp_xbar_mux:sink7_startofpacket
	wire  [119:0] rsp_xbar_demux_007_src0_data;                                                                     // rsp_xbar_demux_007:src0_data -> rsp_xbar_mux:sink7_data
	wire   [17:0] rsp_xbar_demux_007_src0_channel;                                                                  // rsp_xbar_demux_007:src0_channel -> rsp_xbar_mux:sink7_channel
	wire          rsp_xbar_demux_007_src0_ready;                                                                    // rsp_xbar_mux:sink7_ready -> rsp_xbar_demux_007:src0_ready
	wire          rsp_xbar_demux_007_src1_endofpacket;                                                              // rsp_xbar_demux_007:src1_endofpacket -> rsp_xbar_mux_001:sink7_endofpacket
	wire          rsp_xbar_demux_007_src1_valid;                                                                    // rsp_xbar_demux_007:src1_valid -> rsp_xbar_mux_001:sink7_valid
	wire          rsp_xbar_demux_007_src1_startofpacket;                                                            // rsp_xbar_demux_007:src1_startofpacket -> rsp_xbar_mux_001:sink7_startofpacket
	wire  [119:0] rsp_xbar_demux_007_src1_data;                                                                     // rsp_xbar_demux_007:src1_data -> rsp_xbar_mux_001:sink7_data
	wire   [17:0] rsp_xbar_demux_007_src1_channel;                                                                  // rsp_xbar_demux_007:src1_channel -> rsp_xbar_mux_001:sink7_channel
	wire          rsp_xbar_demux_007_src1_ready;                                                                    // rsp_xbar_mux_001:sink7_ready -> rsp_xbar_demux_007:src1_ready
	wire          rsp_xbar_demux_008_src0_endofpacket;                                                              // rsp_xbar_demux_008:src0_endofpacket -> rsp_xbar_mux:sink8_endofpacket
	wire          rsp_xbar_demux_008_src0_valid;                                                                    // rsp_xbar_demux_008:src0_valid -> rsp_xbar_mux:sink8_valid
	wire          rsp_xbar_demux_008_src0_startofpacket;                                                            // rsp_xbar_demux_008:src0_startofpacket -> rsp_xbar_mux:sink8_startofpacket
	wire  [119:0] rsp_xbar_demux_008_src0_data;                                                                     // rsp_xbar_demux_008:src0_data -> rsp_xbar_mux:sink8_data
	wire   [17:0] rsp_xbar_demux_008_src0_channel;                                                                  // rsp_xbar_demux_008:src0_channel -> rsp_xbar_mux:sink8_channel
	wire          rsp_xbar_demux_008_src0_ready;                                                                    // rsp_xbar_mux:sink8_ready -> rsp_xbar_demux_008:src0_ready
	wire          rsp_xbar_demux_008_src1_endofpacket;                                                              // rsp_xbar_demux_008:src1_endofpacket -> rsp_xbar_mux_001:sink8_endofpacket
	wire          rsp_xbar_demux_008_src1_valid;                                                                    // rsp_xbar_demux_008:src1_valid -> rsp_xbar_mux_001:sink8_valid
	wire          rsp_xbar_demux_008_src1_startofpacket;                                                            // rsp_xbar_demux_008:src1_startofpacket -> rsp_xbar_mux_001:sink8_startofpacket
	wire  [119:0] rsp_xbar_demux_008_src1_data;                                                                     // rsp_xbar_demux_008:src1_data -> rsp_xbar_mux_001:sink8_data
	wire   [17:0] rsp_xbar_demux_008_src1_channel;                                                                  // rsp_xbar_demux_008:src1_channel -> rsp_xbar_mux_001:sink8_channel
	wire          rsp_xbar_demux_008_src1_ready;                                                                    // rsp_xbar_mux_001:sink8_ready -> rsp_xbar_demux_008:src1_ready
	wire          rsp_xbar_demux_009_src0_endofpacket;                                                              // rsp_xbar_demux_009:src0_endofpacket -> rsp_xbar_mux:sink9_endofpacket
	wire          rsp_xbar_demux_009_src0_valid;                                                                    // rsp_xbar_demux_009:src0_valid -> rsp_xbar_mux:sink9_valid
	wire          rsp_xbar_demux_009_src0_startofpacket;                                                            // rsp_xbar_demux_009:src0_startofpacket -> rsp_xbar_mux:sink9_startofpacket
	wire  [119:0] rsp_xbar_demux_009_src0_data;                                                                     // rsp_xbar_demux_009:src0_data -> rsp_xbar_mux:sink9_data
	wire   [17:0] rsp_xbar_demux_009_src0_channel;                                                                  // rsp_xbar_demux_009:src0_channel -> rsp_xbar_mux:sink9_channel
	wire          rsp_xbar_demux_009_src0_ready;                                                                    // rsp_xbar_mux:sink9_ready -> rsp_xbar_demux_009:src0_ready
	wire          rsp_xbar_demux_009_src1_endofpacket;                                                              // rsp_xbar_demux_009:src1_endofpacket -> rsp_xbar_mux_001:sink9_endofpacket
	wire          rsp_xbar_demux_009_src1_valid;                                                                    // rsp_xbar_demux_009:src1_valid -> rsp_xbar_mux_001:sink9_valid
	wire          rsp_xbar_demux_009_src1_startofpacket;                                                            // rsp_xbar_demux_009:src1_startofpacket -> rsp_xbar_mux_001:sink9_startofpacket
	wire  [119:0] rsp_xbar_demux_009_src1_data;                                                                     // rsp_xbar_demux_009:src1_data -> rsp_xbar_mux_001:sink9_data
	wire   [17:0] rsp_xbar_demux_009_src1_channel;                                                                  // rsp_xbar_demux_009:src1_channel -> rsp_xbar_mux_001:sink9_channel
	wire          rsp_xbar_demux_009_src1_ready;                                                                    // rsp_xbar_mux_001:sink9_ready -> rsp_xbar_demux_009:src1_ready
	wire          rsp_xbar_demux_010_src0_endofpacket;                                                              // rsp_xbar_demux_010:src0_endofpacket -> rsp_xbar_mux:sink10_endofpacket
	wire          rsp_xbar_demux_010_src0_valid;                                                                    // rsp_xbar_demux_010:src0_valid -> rsp_xbar_mux:sink10_valid
	wire          rsp_xbar_demux_010_src0_startofpacket;                                                            // rsp_xbar_demux_010:src0_startofpacket -> rsp_xbar_mux:sink10_startofpacket
	wire  [119:0] rsp_xbar_demux_010_src0_data;                                                                     // rsp_xbar_demux_010:src0_data -> rsp_xbar_mux:sink10_data
	wire   [17:0] rsp_xbar_demux_010_src0_channel;                                                                  // rsp_xbar_demux_010:src0_channel -> rsp_xbar_mux:sink10_channel
	wire          rsp_xbar_demux_010_src0_ready;                                                                    // rsp_xbar_mux:sink10_ready -> rsp_xbar_demux_010:src0_ready
	wire          rsp_xbar_demux_010_src1_endofpacket;                                                              // rsp_xbar_demux_010:src1_endofpacket -> rsp_xbar_mux_001:sink10_endofpacket
	wire          rsp_xbar_demux_010_src1_valid;                                                                    // rsp_xbar_demux_010:src1_valid -> rsp_xbar_mux_001:sink10_valid
	wire          rsp_xbar_demux_010_src1_startofpacket;                                                            // rsp_xbar_demux_010:src1_startofpacket -> rsp_xbar_mux_001:sink10_startofpacket
	wire  [119:0] rsp_xbar_demux_010_src1_data;                                                                     // rsp_xbar_demux_010:src1_data -> rsp_xbar_mux_001:sink10_data
	wire   [17:0] rsp_xbar_demux_010_src1_channel;                                                                  // rsp_xbar_demux_010:src1_channel -> rsp_xbar_mux_001:sink10_channel
	wire          rsp_xbar_demux_010_src1_ready;                                                                    // rsp_xbar_mux_001:sink10_ready -> rsp_xbar_demux_010:src1_ready
	wire          rsp_xbar_demux_011_src0_endofpacket;                                                              // rsp_xbar_demux_011:src0_endofpacket -> rsp_xbar_mux:sink11_endofpacket
	wire          rsp_xbar_demux_011_src0_valid;                                                                    // rsp_xbar_demux_011:src0_valid -> rsp_xbar_mux:sink11_valid
	wire          rsp_xbar_demux_011_src0_startofpacket;                                                            // rsp_xbar_demux_011:src0_startofpacket -> rsp_xbar_mux:sink11_startofpacket
	wire  [119:0] rsp_xbar_demux_011_src0_data;                                                                     // rsp_xbar_demux_011:src0_data -> rsp_xbar_mux:sink11_data
	wire   [17:0] rsp_xbar_demux_011_src0_channel;                                                                  // rsp_xbar_demux_011:src0_channel -> rsp_xbar_mux:sink11_channel
	wire          rsp_xbar_demux_011_src0_ready;                                                                    // rsp_xbar_mux:sink11_ready -> rsp_xbar_demux_011:src0_ready
	wire          rsp_xbar_demux_011_src1_endofpacket;                                                              // rsp_xbar_demux_011:src1_endofpacket -> rsp_xbar_mux_001:sink11_endofpacket
	wire          rsp_xbar_demux_011_src1_valid;                                                                    // rsp_xbar_demux_011:src1_valid -> rsp_xbar_mux_001:sink11_valid
	wire          rsp_xbar_demux_011_src1_startofpacket;                                                            // rsp_xbar_demux_011:src1_startofpacket -> rsp_xbar_mux_001:sink11_startofpacket
	wire  [119:0] rsp_xbar_demux_011_src1_data;                                                                     // rsp_xbar_demux_011:src1_data -> rsp_xbar_mux_001:sink11_data
	wire   [17:0] rsp_xbar_demux_011_src1_channel;                                                                  // rsp_xbar_demux_011:src1_channel -> rsp_xbar_mux_001:sink11_channel
	wire          rsp_xbar_demux_011_src1_ready;                                                                    // rsp_xbar_mux_001:sink11_ready -> rsp_xbar_demux_011:src1_ready
	wire          rsp_xbar_demux_012_src0_endofpacket;                                                              // rsp_xbar_demux_012:src0_endofpacket -> rsp_xbar_mux:sink12_endofpacket
	wire          rsp_xbar_demux_012_src0_valid;                                                                    // rsp_xbar_demux_012:src0_valid -> rsp_xbar_mux:sink12_valid
	wire          rsp_xbar_demux_012_src0_startofpacket;                                                            // rsp_xbar_demux_012:src0_startofpacket -> rsp_xbar_mux:sink12_startofpacket
	wire  [119:0] rsp_xbar_demux_012_src0_data;                                                                     // rsp_xbar_demux_012:src0_data -> rsp_xbar_mux:sink12_data
	wire   [17:0] rsp_xbar_demux_012_src0_channel;                                                                  // rsp_xbar_demux_012:src0_channel -> rsp_xbar_mux:sink12_channel
	wire          rsp_xbar_demux_012_src0_ready;                                                                    // rsp_xbar_mux:sink12_ready -> rsp_xbar_demux_012:src0_ready
	wire          rsp_xbar_demux_012_src1_endofpacket;                                                              // rsp_xbar_demux_012:src1_endofpacket -> rsp_xbar_mux_001:sink12_endofpacket
	wire          rsp_xbar_demux_012_src1_valid;                                                                    // rsp_xbar_demux_012:src1_valid -> rsp_xbar_mux_001:sink12_valid
	wire          rsp_xbar_demux_012_src1_startofpacket;                                                            // rsp_xbar_demux_012:src1_startofpacket -> rsp_xbar_mux_001:sink12_startofpacket
	wire  [119:0] rsp_xbar_demux_012_src1_data;                                                                     // rsp_xbar_demux_012:src1_data -> rsp_xbar_mux_001:sink12_data
	wire   [17:0] rsp_xbar_demux_012_src1_channel;                                                                  // rsp_xbar_demux_012:src1_channel -> rsp_xbar_mux_001:sink12_channel
	wire          rsp_xbar_demux_012_src1_ready;                                                                    // rsp_xbar_mux_001:sink12_ready -> rsp_xbar_demux_012:src1_ready
	wire          rsp_xbar_demux_013_src0_endofpacket;                                                              // rsp_xbar_demux_013:src0_endofpacket -> rsp_xbar_mux:sink13_endofpacket
	wire          rsp_xbar_demux_013_src0_valid;                                                                    // rsp_xbar_demux_013:src0_valid -> rsp_xbar_mux:sink13_valid
	wire          rsp_xbar_demux_013_src0_startofpacket;                                                            // rsp_xbar_demux_013:src0_startofpacket -> rsp_xbar_mux:sink13_startofpacket
	wire  [119:0] rsp_xbar_demux_013_src0_data;                                                                     // rsp_xbar_demux_013:src0_data -> rsp_xbar_mux:sink13_data
	wire   [17:0] rsp_xbar_demux_013_src0_channel;                                                                  // rsp_xbar_demux_013:src0_channel -> rsp_xbar_mux:sink13_channel
	wire          rsp_xbar_demux_013_src0_ready;                                                                    // rsp_xbar_mux:sink13_ready -> rsp_xbar_demux_013:src0_ready
	wire          rsp_xbar_demux_013_src1_endofpacket;                                                              // rsp_xbar_demux_013:src1_endofpacket -> rsp_xbar_mux_001:sink13_endofpacket
	wire          rsp_xbar_demux_013_src1_valid;                                                                    // rsp_xbar_demux_013:src1_valid -> rsp_xbar_mux_001:sink13_valid
	wire          rsp_xbar_demux_013_src1_startofpacket;                                                            // rsp_xbar_demux_013:src1_startofpacket -> rsp_xbar_mux_001:sink13_startofpacket
	wire  [119:0] rsp_xbar_demux_013_src1_data;                                                                     // rsp_xbar_demux_013:src1_data -> rsp_xbar_mux_001:sink13_data
	wire   [17:0] rsp_xbar_demux_013_src1_channel;                                                                  // rsp_xbar_demux_013:src1_channel -> rsp_xbar_mux_001:sink13_channel
	wire          rsp_xbar_demux_013_src1_ready;                                                                    // rsp_xbar_mux_001:sink13_ready -> rsp_xbar_demux_013:src1_ready
	wire          rsp_xbar_demux_014_src0_endofpacket;                                                              // rsp_xbar_demux_014:src0_endofpacket -> rsp_xbar_mux:sink14_endofpacket
	wire          rsp_xbar_demux_014_src0_valid;                                                                    // rsp_xbar_demux_014:src0_valid -> rsp_xbar_mux:sink14_valid
	wire          rsp_xbar_demux_014_src0_startofpacket;                                                            // rsp_xbar_demux_014:src0_startofpacket -> rsp_xbar_mux:sink14_startofpacket
	wire  [119:0] rsp_xbar_demux_014_src0_data;                                                                     // rsp_xbar_demux_014:src0_data -> rsp_xbar_mux:sink14_data
	wire   [17:0] rsp_xbar_demux_014_src0_channel;                                                                  // rsp_xbar_demux_014:src0_channel -> rsp_xbar_mux:sink14_channel
	wire          rsp_xbar_demux_014_src0_ready;                                                                    // rsp_xbar_mux:sink14_ready -> rsp_xbar_demux_014:src0_ready
	wire          rsp_xbar_demux_014_src1_endofpacket;                                                              // rsp_xbar_demux_014:src1_endofpacket -> rsp_xbar_mux_001:sink14_endofpacket
	wire          rsp_xbar_demux_014_src1_valid;                                                                    // rsp_xbar_demux_014:src1_valid -> rsp_xbar_mux_001:sink14_valid
	wire          rsp_xbar_demux_014_src1_startofpacket;                                                            // rsp_xbar_demux_014:src1_startofpacket -> rsp_xbar_mux_001:sink14_startofpacket
	wire  [119:0] rsp_xbar_demux_014_src1_data;                                                                     // rsp_xbar_demux_014:src1_data -> rsp_xbar_mux_001:sink14_data
	wire   [17:0] rsp_xbar_demux_014_src1_channel;                                                                  // rsp_xbar_demux_014:src1_channel -> rsp_xbar_mux_001:sink14_channel
	wire          rsp_xbar_demux_014_src1_ready;                                                                    // rsp_xbar_mux_001:sink14_ready -> rsp_xbar_demux_014:src1_ready
	wire          rsp_xbar_demux_015_src0_endofpacket;                                                              // rsp_xbar_demux_015:src0_endofpacket -> rsp_xbar_mux:sink15_endofpacket
	wire          rsp_xbar_demux_015_src0_valid;                                                                    // rsp_xbar_demux_015:src0_valid -> rsp_xbar_mux:sink15_valid
	wire          rsp_xbar_demux_015_src0_startofpacket;                                                            // rsp_xbar_demux_015:src0_startofpacket -> rsp_xbar_mux:sink15_startofpacket
	wire  [119:0] rsp_xbar_demux_015_src0_data;                                                                     // rsp_xbar_demux_015:src0_data -> rsp_xbar_mux:sink15_data
	wire   [17:0] rsp_xbar_demux_015_src0_channel;                                                                  // rsp_xbar_demux_015:src0_channel -> rsp_xbar_mux:sink15_channel
	wire          rsp_xbar_demux_015_src0_ready;                                                                    // rsp_xbar_mux:sink15_ready -> rsp_xbar_demux_015:src0_ready
	wire          rsp_xbar_demux_015_src1_endofpacket;                                                              // rsp_xbar_demux_015:src1_endofpacket -> rsp_xbar_mux_001:sink15_endofpacket
	wire          rsp_xbar_demux_015_src1_valid;                                                                    // rsp_xbar_demux_015:src1_valid -> rsp_xbar_mux_001:sink15_valid
	wire          rsp_xbar_demux_015_src1_startofpacket;                                                            // rsp_xbar_demux_015:src1_startofpacket -> rsp_xbar_mux_001:sink15_startofpacket
	wire  [119:0] rsp_xbar_demux_015_src1_data;                                                                     // rsp_xbar_demux_015:src1_data -> rsp_xbar_mux_001:sink15_data
	wire   [17:0] rsp_xbar_demux_015_src1_channel;                                                                  // rsp_xbar_demux_015:src1_channel -> rsp_xbar_mux_001:sink15_channel
	wire          rsp_xbar_demux_015_src1_ready;                                                                    // rsp_xbar_mux_001:sink15_ready -> rsp_xbar_demux_015:src1_ready
	wire          rsp_xbar_demux_016_src0_endofpacket;                                                              // rsp_xbar_demux_016:src0_endofpacket -> rsp_xbar_mux:sink16_endofpacket
	wire          rsp_xbar_demux_016_src0_valid;                                                                    // rsp_xbar_demux_016:src0_valid -> rsp_xbar_mux:sink16_valid
	wire          rsp_xbar_demux_016_src0_startofpacket;                                                            // rsp_xbar_demux_016:src0_startofpacket -> rsp_xbar_mux:sink16_startofpacket
	wire  [119:0] rsp_xbar_demux_016_src0_data;                                                                     // rsp_xbar_demux_016:src0_data -> rsp_xbar_mux:sink16_data
	wire   [17:0] rsp_xbar_demux_016_src0_channel;                                                                  // rsp_xbar_demux_016:src0_channel -> rsp_xbar_mux:sink16_channel
	wire          rsp_xbar_demux_016_src0_ready;                                                                    // rsp_xbar_mux:sink16_ready -> rsp_xbar_demux_016:src0_ready
	wire          rsp_xbar_demux_016_src1_endofpacket;                                                              // rsp_xbar_demux_016:src1_endofpacket -> rsp_xbar_mux_001:sink16_endofpacket
	wire          rsp_xbar_demux_016_src1_valid;                                                                    // rsp_xbar_demux_016:src1_valid -> rsp_xbar_mux_001:sink16_valid
	wire          rsp_xbar_demux_016_src1_startofpacket;                                                            // rsp_xbar_demux_016:src1_startofpacket -> rsp_xbar_mux_001:sink16_startofpacket
	wire  [119:0] rsp_xbar_demux_016_src1_data;                                                                     // rsp_xbar_demux_016:src1_data -> rsp_xbar_mux_001:sink16_data
	wire   [17:0] rsp_xbar_demux_016_src1_channel;                                                                  // rsp_xbar_demux_016:src1_channel -> rsp_xbar_mux_001:sink16_channel
	wire          rsp_xbar_demux_016_src1_ready;                                                                    // rsp_xbar_mux_001:sink16_ready -> rsp_xbar_demux_016:src1_ready
	wire          rsp_xbar_demux_017_src0_endofpacket;                                                              // rsp_xbar_demux_017:src0_endofpacket -> rsp_xbar_mux:sink17_endofpacket
	wire          rsp_xbar_demux_017_src0_valid;                                                                    // rsp_xbar_demux_017:src0_valid -> rsp_xbar_mux:sink17_valid
	wire          rsp_xbar_demux_017_src0_startofpacket;                                                            // rsp_xbar_demux_017:src0_startofpacket -> rsp_xbar_mux:sink17_startofpacket
	wire  [119:0] rsp_xbar_demux_017_src0_data;                                                                     // rsp_xbar_demux_017:src0_data -> rsp_xbar_mux:sink17_data
	wire   [17:0] rsp_xbar_demux_017_src0_channel;                                                                  // rsp_xbar_demux_017:src0_channel -> rsp_xbar_mux:sink17_channel
	wire          rsp_xbar_demux_017_src0_ready;                                                                    // rsp_xbar_mux:sink17_ready -> rsp_xbar_demux_017:src0_ready
	wire          rsp_xbar_demux_017_src1_endofpacket;                                                              // rsp_xbar_demux_017:src1_endofpacket -> rsp_xbar_mux_001:sink17_endofpacket
	wire          rsp_xbar_demux_017_src1_valid;                                                                    // rsp_xbar_demux_017:src1_valid -> rsp_xbar_mux_001:sink17_valid
	wire          rsp_xbar_demux_017_src1_startofpacket;                                                            // rsp_xbar_demux_017:src1_startofpacket -> rsp_xbar_mux_001:sink17_startofpacket
	wire  [119:0] rsp_xbar_demux_017_src1_data;                                                                     // rsp_xbar_demux_017:src1_data -> rsp_xbar_mux_001:sink17_data
	wire   [17:0] rsp_xbar_demux_017_src1_channel;                                                                  // rsp_xbar_demux_017:src1_channel -> rsp_xbar_mux_001:sink17_channel
	wire          rsp_xbar_demux_017_src1_ready;                                                                    // rsp_xbar_mux_001:sink17_ready -> rsp_xbar_demux_017:src1_ready
	wire   [17:0] limiter_cmd_valid_data;                                                                           // limiter:cmd_src_valid -> cmd_xbar_demux:sink_valid
	wire   [17:0] limiter_001_cmd_valid_data;                                                                       // limiter_001:cmd_src_valid -> cmd_xbar_demux_001:sink_valid

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio0_s1_translator (
		.clk                      (sdram_clk_sdram_clk_clk),                                            //                      clk.clk
		.reset                    (pio0_reset_reset_bridge_in_reset_reset),                             //                    reset.reset
		.uav_address              (pio0_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (pio0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (pio0_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (pio0_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (pio0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (pio0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (pio0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (pio0_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (pio0_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (pio0_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (pio0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (pio0_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (pio0_s1_write),                                                      //                         .write
		.av_readdata              (pio0_s1_readdata),                                                   //                         .readdata
		.av_writedata             (pio0_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (pio0_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                   //              (terminated)
		.av_begintransfer         (),                                                                   //              (terminated)
		.av_beginbursttransfer    (),                                                                   //              (terminated)
		.av_burstcount            (),                                                                   //              (terminated)
		.av_byteenable            (),                                                                   //              (terminated)
		.av_readdatavalid         (1'b0),                                                               //              (terminated)
		.av_waitrequest           (1'b0),                                                               //              (terminated)
		.av_writebyteenable       (),                                                                   //              (terminated)
		.av_lock                  (),                                                                   //              (terminated)
		.av_clken                 (),                                                                   //              (terminated)
		.uav_clken                (1'b0),                                                               //              (terminated)
		.av_debugaccess           (),                                                                   //              (terminated)
		.av_outputenable          (),                                                                   //              (terminated)
		.uav_response             (),                                                                   //              (terminated)
		.av_response              (2'b00),                                                              //              (terminated)
		.uav_writeresponserequest (1'b0),                                                               //              (terminated)
		.uav_writeresponsevalid   (),                                                                   //              (terminated)
		.av_writeresponserequest  (),                                                                   //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_avalon_jtag_slave_translator (
		.clk                      (sdram_clk_sdram_clk_clk),                                                                //                      clk.clk
		.reset                    (pio0_reset_reset_bridge_in_reset_reset),                                                 //                    reset.reset
		.uav_address              (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (jtag_uart_avalon_jtag_slave_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (jtag_uart_avalon_jtag_slave_write),                                                      //                         .write
		.av_read                  (jtag_uart_avalon_jtag_slave_read),                                                       //                         .read
		.av_readdata              (jtag_uart_avalon_jtag_slave_readdata),                                                   //                         .readdata
		.av_writedata             (jtag_uart_avalon_jtag_slave_writedata),                                                  //                         .writedata
		.av_waitrequest           (jtag_uart_avalon_jtag_slave_waitrequest),                                                //                         .waitrequest
		.av_chipselect            (jtag_uart_avalon_jtag_slave_chipselect),                                                 //                         .chipselect
		.av_begintransfer         (),                                                                                       //              (terminated)
		.av_beginbursttransfer    (),                                                                                       //              (terminated)
		.av_burstcount            (),                                                                                       //              (terminated)
		.av_byteenable            (),                                                                                       //              (terminated)
		.av_readdatavalid         (1'b0),                                                                                   //              (terminated)
		.av_writebyteenable       (),                                                                                       //              (terminated)
		.av_lock                  (),                                                                                       //              (terminated)
		.av_clken                 (),                                                                                       //              (terminated)
		.uav_clken                (1'b0),                                                                                   //              (terminated)
		.av_debugaccess           (),                                                                                       //              (terminated)
		.av_outputenable          (),                                                                                       //              (terminated)
		.uav_response             (),                                                                                       //              (terminated)
		.av_response              (2'b00),                                                                                  //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                                   //              (terminated)
		.uav_writeresponsevalid   (),                                                                                       //              (terminated)
		.av_writeresponserequest  (),                                                                                       //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_to_hps_data1_s1_translator (
		.clk                      (sdram_clk_sdram_clk_clk),                                                          //                      clk.clk
		.reset                    (pio0_reset_reset_bridge_in_reset_reset),                                           //                    reset.reset
		.uav_address              (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (sdram_to_hps_data1_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_readdata              (sdram_to_hps_data1_s1_readdata),                                                   //                         .readdata
		.av_write                 (),                                                                                 //              (terminated)
		.av_read                  (),                                                                                 //              (terminated)
		.av_writedata             (),                                                                                 //              (terminated)
		.av_begintransfer         (),                                                                                 //              (terminated)
		.av_beginbursttransfer    (),                                                                                 //              (terminated)
		.av_burstcount            (),                                                                                 //              (terminated)
		.av_byteenable            (),                                                                                 //              (terminated)
		.av_readdatavalid         (1'b0),                                                                             //              (terminated)
		.av_waitrequest           (1'b0),                                                                             //              (terminated)
		.av_writebyteenable       (),                                                                                 //              (terminated)
		.av_lock                  (),                                                                                 //              (terminated)
		.av_chipselect            (),                                                                                 //              (terminated)
		.av_clken                 (),                                                                                 //              (terminated)
		.uav_clken                (1'b0),                                                                             //              (terminated)
		.av_debugaccess           (),                                                                                 //              (terminated)
		.av_outputenable          (),                                                                                 //              (terminated)
		.uav_response             (),                                                                                 //              (terminated)
		.av_response              (2'b00),                                                                            //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                             //              (terminated)
		.uav_writeresponsevalid   (),                                                                                 //              (terminated)
		.av_writeresponserequest  (),                                                                                 //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_to_hps_data2_s1_translator (
		.clk                      (sdram_clk_sdram_clk_clk),                                                          //                      clk.clk
		.reset                    (pio0_reset_reset_bridge_in_reset_reset),                                           //                    reset.reset
		.uav_address              (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (sdram_to_hps_data2_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_readdata              (sdram_to_hps_data2_s1_readdata),                                                   //                         .readdata
		.av_write                 (),                                                                                 //              (terminated)
		.av_read                  (),                                                                                 //              (terminated)
		.av_writedata             (),                                                                                 //              (terminated)
		.av_begintransfer         (),                                                                                 //              (terminated)
		.av_beginbursttransfer    (),                                                                                 //              (terminated)
		.av_burstcount            (),                                                                                 //              (terminated)
		.av_byteenable            (),                                                                                 //              (terminated)
		.av_readdatavalid         (1'b0),                                                                             //              (terminated)
		.av_waitrequest           (1'b0),                                                                             //              (terminated)
		.av_writebyteenable       (),                                                                                 //              (terminated)
		.av_lock                  (),                                                                                 //              (terminated)
		.av_chipselect            (),                                                                                 //              (terminated)
		.av_clken                 (),                                                                                 //              (terminated)
		.uav_clken                (1'b0),                                                                             //              (terminated)
		.av_debugaccess           (),                                                                                 //              (terminated)
		.av_outputenable          (),                                                                                 //              (terminated)
		.uav_response             (),                                                                                 //              (terminated)
		.av_response              (2'b00),                                                                            //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                             //              (terminated)
		.uav_writeresponsevalid   (),                                                                                 //              (terminated)
		.av_writeresponserequest  (),                                                                                 //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio_start_s1_translator (
		.clk                      (sdram_clk_sdram_clk_clk),                                                 //                      clk.clk
		.reset                    (pio0_reset_reset_bridge_in_reset_reset),                                  //                    reset.reset
		.uav_address              (pio_start_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (pio_start_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (pio_start_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (pio_start_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (pio_start_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (pio_start_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (pio_start_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (pio_start_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (pio_start_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (pio_start_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (pio_start_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (pio_start_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (pio_start_s1_write),                                                      //                         .write
		.av_readdata              (pio_start_s1_readdata),                                                   //                         .readdata
		.av_writedata             (pio_start_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (pio_start_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                        //              (terminated)
		.av_begintransfer         (),                                                                        //              (terminated)
		.av_beginbursttransfer    (),                                                                        //              (terminated)
		.av_burstcount            (),                                                                        //              (terminated)
		.av_byteenable            (),                                                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                                                    //              (terminated)
		.av_waitrequest           (1'b0),                                                                    //              (terminated)
		.av_writebyteenable       (),                                                                        //              (terminated)
		.av_lock                  (),                                                                        //              (terminated)
		.av_clken                 (),                                                                        //              (terminated)
		.uav_clken                (1'b0),                                                                    //              (terminated)
		.av_debugaccess           (),                                                                        //              (terminated)
		.av_outputenable          (),                                                                        //              (terminated)
		.uav_response             (),                                                                        //              (terminated)
		.av_response              (2'b00),                                                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                    //              (terminated)
		.uav_writeresponsevalid   (),                                                                        //              (terminated)
		.av_writeresponserequest  (),                                                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hps_vga_data1_s1_translator (
		.clk                      (sdram_clk_sdram_clk_clk),                                                     //                      clk.clk
		.reset                    (pio0_reset_reset_bridge_in_reset_reset),                                      //                    reset.reset
		.uav_address              (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (hps_vga_data1_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (hps_vga_data1_s1_write),                                                      //                         .write
		.av_readdata              (hps_vga_data1_s1_readdata),                                                   //                         .readdata
		.av_writedata             (hps_vga_data1_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (hps_vga_data1_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                            //              (terminated)
		.av_begintransfer         (),                                                                            //              (terminated)
		.av_beginbursttransfer    (),                                                                            //              (terminated)
		.av_burstcount            (),                                                                            //              (terminated)
		.av_byteenable            (),                                                                            //              (terminated)
		.av_readdatavalid         (1'b0),                                                                        //              (terminated)
		.av_waitrequest           (1'b0),                                                                        //              (terminated)
		.av_writebyteenable       (),                                                                            //              (terminated)
		.av_lock                  (),                                                                            //              (terminated)
		.av_clken                 (),                                                                            //              (terminated)
		.uav_clken                (1'b0),                                                                        //              (terminated)
		.av_debugaccess           (),                                                                            //              (terminated)
		.av_outputenable          (),                                                                            //              (terminated)
		.uav_response             (),                                                                            //              (terminated)
		.av_response              (2'b00),                                                                       //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                        //              (terminated)
		.uav_writeresponsevalid   (),                                                                            //              (terminated)
		.av_writeresponserequest  (),                                                                            //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hps_vga_data2_s1_translator (
		.clk                      (sdram_clk_sdram_clk_clk),                                                     //                      clk.clk
		.reset                    (pio0_reset_reset_bridge_in_reset_reset),                                      //                    reset.reset
		.uav_address              (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (hps_vga_data2_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (hps_vga_data2_s1_write),                                                      //                         .write
		.av_readdata              (hps_vga_data2_s1_readdata),                                                   //                         .readdata
		.av_writedata             (hps_vga_data2_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (hps_vga_data2_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                            //              (terminated)
		.av_begintransfer         (),                                                                            //              (terminated)
		.av_beginbursttransfer    (),                                                                            //              (terminated)
		.av_burstcount            (),                                                                            //              (terminated)
		.av_byteenable            (),                                                                            //              (terminated)
		.av_readdatavalid         (1'b0),                                                                        //              (terminated)
		.av_waitrequest           (1'b0),                                                                        //              (terminated)
		.av_writebyteenable       (),                                                                            //              (terminated)
		.av_lock                  (),                                                                            //              (terminated)
		.av_clken                 (),                                                                            //              (terminated)
		.uav_clken                (1'b0),                                                                        //              (terminated)
		.av_debugaccess           (),                                                                            //              (terminated)
		.av_outputenable          (),                                                                            //              (terminated)
		.uav_response             (),                                                                            //              (terminated)
		.av_response              (2'b00),                                                                       //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                        //              (terminated)
		.uav_writeresponsevalid   (),                                                                            //              (terminated)
		.av_writeresponserequest  (),                                                                            //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdramclock_s1_translator (
		.clk                      (sdram_clk_sdram_clk_clk),                                                  //                      clk.clk
		.reset                    (pio0_reset_reset_bridge_in_reset_reset),                                   //                    reset.reset
		.uav_address              (sdramclock_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (sdramclock_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (sdramclock_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (sdramclock_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (sdramclock_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (sdramclock_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (sdramclock_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (sdramclock_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (sdramclock_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (sdramclock_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (sdramclock_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (sdramclock_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (sdramclock_s1_write),                                                      //                         .write
		.av_readdata              (sdramclock_s1_readdata),                                                   //                         .readdata
		.av_writedata             (sdramclock_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (sdramclock_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                         //              (terminated)
		.av_begintransfer         (),                                                                         //              (terminated)
		.av_beginbursttransfer    (),                                                                         //              (terminated)
		.av_burstcount            (),                                                                         //              (terminated)
		.av_byteenable            (),                                                                         //              (terminated)
		.av_readdatavalid         (1'b0),                                                                     //              (terminated)
		.av_waitrequest           (1'b0),                                                                     //              (terminated)
		.av_writebyteenable       (),                                                                         //              (terminated)
		.av_lock                  (),                                                                         //              (terminated)
		.av_clken                 (),                                                                         //              (terminated)
		.uav_clken                (1'b0),                                                                     //              (terminated)
		.av_debugaccess           (),                                                                         //              (terminated)
		.av_outputenable          (),                                                                         //              (terminated)
		.uav_response             (),                                                                         //              (terminated)
		.av_response              (2'b00),                                                                    //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                     //              (terminated)
		.uav_writeresponsevalid   (),                                                                         //              (terminated)
		.av_writeresponserequest  (),                                                                         //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_start_s1_translator (
		.clk                      (sdram_clk_sdram_clk_clk),                                                   //                      clk.clk
		.reset                    (pio0_reset_reset_bridge_in_reset_reset),                                    //                    reset.reset
		.uav_address              (sdram_start_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (sdram_start_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (sdram_start_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (sdram_start_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (sdram_start_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (sdram_start_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (sdram_start_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (sdram_start_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (sdram_start_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (sdram_start_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (sdram_start_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (Sdram_start_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (Sdram_start_s1_write),                                                      //                         .write
		.av_readdata              (Sdram_start_s1_readdata),                                                   //                         .readdata
		.av_writedata             (Sdram_start_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (Sdram_start_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                          //              (terminated)
		.av_begintransfer         (),                                                                          //              (terminated)
		.av_beginbursttransfer    (),                                                                          //              (terminated)
		.av_burstcount            (),                                                                          //              (terminated)
		.av_byteenable            (),                                                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                                                      //              (terminated)
		.av_waitrequest           (1'b0),                                                                      //              (terminated)
		.av_writebyteenable       (),                                                                          //              (terminated)
		.av_lock                  (),                                                                          //              (terminated)
		.av_clken                 (),                                                                          //              (terminated)
		.uav_clken                (1'b0),                                                                      //              (terminated)
		.av_debugaccess           (),                                                                          //              (terminated)
		.av_outputenable          (),                                                                          //              (terminated)
		.uav_response             (),                                                                          //              (terminated)
		.av_response              (2'b00),                                                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                      //              (terminated)
		.uav_writeresponsevalid   (),                                                                          //              (terminated)
		.av_writeresponserequest  (),                                                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifowe_s1_translator (
		.clk                      (sdram_clk_sdram_clk_clk),                                              //                      clk.clk
		.reset                    (pio0_reset_reset_bridge_in_reset_reset),                               //                    reset.reset
		.uav_address              (fifowe_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (fifowe_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (fifowe_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (fifowe_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (fifowe_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (fifowe_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (fifowe_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (fifowe_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (fifowe_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (fifowe_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (fifowe_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (FIFOWe_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (FIFOWe_s1_write),                                                      //                         .write
		.av_readdata              (FIFOWe_s1_readdata),                                                   //                         .readdata
		.av_writedata             (FIFOWe_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (FIFOWe_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                     //              (terminated)
		.av_begintransfer         (),                                                                     //              (terminated)
		.av_beginbursttransfer    (),                                                                     //              (terminated)
		.av_burstcount            (),                                                                     //              (terminated)
		.av_byteenable            (),                                                                     //              (terminated)
		.av_readdatavalid         (1'b0),                                                                 //              (terminated)
		.av_waitrequest           (1'b0),                                                                 //              (terminated)
		.av_writebyteenable       (),                                                                     //              (terminated)
		.av_lock                  (),                                                                     //              (terminated)
		.av_clken                 (),                                                                     //              (terminated)
		.uav_clken                (1'b0),                                                                 //              (terminated)
		.av_debugaccess           (),                                                                     //              (terminated)
		.av_outputenable          (),                                                                     //              (terminated)
		.uav_response             (),                                                                     //              (terminated)
		.av_response              (2'b00),                                                                //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                 //              (terminated)
		.uav_writeresponsevalid   (),                                                                     //              (terminated)
		.av_writeresponserequest  (),                                                                     //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) binaryscale_s1_translator (
		.clk                      (sdram_clk_sdram_clk_clk),                                                   //                      clk.clk
		.reset                    (pio0_reset_reset_bridge_in_reset_reset),                                    //                    reset.reset
		.uav_address              (binaryscale_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (binaryscale_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (binaryscale_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (binaryscale_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (binaryscale_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (binaryscale_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (binaryscale_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (binaryscale_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (binaryscale_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (binaryscale_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (binaryscale_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (binaryscale_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_readdata              (binaryscale_s1_readdata),                                                   //                         .readdata
		.av_write                 (),                                                                          //              (terminated)
		.av_read                  (),                                                                          //              (terminated)
		.av_writedata             (),                                                                          //              (terminated)
		.av_begintransfer         (),                                                                          //              (terminated)
		.av_beginbursttransfer    (),                                                                          //              (terminated)
		.av_burstcount            (),                                                                          //              (terminated)
		.av_byteenable            (),                                                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                                                      //              (terminated)
		.av_waitrequest           (1'b0),                                                                      //              (terminated)
		.av_writebyteenable       (),                                                                          //              (terminated)
		.av_lock                  (),                                                                          //              (terminated)
		.av_chipselect            (),                                                                          //              (terminated)
		.av_clken                 (),                                                                          //              (terminated)
		.uav_clken                (1'b0),                                                                      //              (terminated)
		.av_debugaccess           (),                                                                          //              (terminated)
		.av_outputenable          (),                                                                          //              (terminated)
		.uav_response             (),                                                                          //              (terminated)
		.av_response              (2'b00),                                                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                      //              (terminated)
		.uav_writeresponsevalid   (),                                                                          //              (terminated)
		.av_writeresponserequest  (),                                                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) greyparamter_s1_translator (
		.clk                      (sdram_clk_sdram_clk_clk),                                                    //                      clk.clk
		.reset                    (pio0_reset_reset_bridge_in_reset_reset),                                     //                    reset.reset
		.uav_address              (greyparamter_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (greyparamter_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (greyparamter_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (greyparamter_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (greyparamter_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (greyparamter_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (greyparamter_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (greyparamter_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (greyparamter_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (greyparamter_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (greyparamter_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (greyparamter_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (greyparamter_s1_write),                                                      //                         .write
		.av_readdata              (greyparamter_s1_readdata),                                                   //                         .readdata
		.av_writedata             (greyparamter_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (greyparamter_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                           //              (terminated)
		.av_begintransfer         (),                                                                           //              (terminated)
		.av_beginbursttransfer    (),                                                                           //              (terminated)
		.av_burstcount            (),                                                                           //              (terminated)
		.av_byteenable            (),                                                                           //              (terminated)
		.av_readdatavalid         (1'b0),                                                                       //              (terminated)
		.av_waitrequest           (1'b0),                                                                       //              (terminated)
		.av_writebyteenable       (),                                                                           //              (terminated)
		.av_lock                  (),                                                                           //              (terminated)
		.av_clken                 (),                                                                           //              (terminated)
		.uav_clken                (1'b0),                                                                       //              (terminated)
		.av_debugaccess           (),                                                                           //              (terminated)
		.av_outputenable          (),                                                                           //              (terminated)
		.uav_response             (),                                                                           //              (terminated)
		.av_response              (2'b00),                                                                      //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                       //              (terminated)
		.uav_writeresponsevalid   (),                                                                           //              (terminated)
		.av_writeresponserequest  (),                                                                           //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) vgaclock_s1_translator (
		.clk                      (sdram_clk_sdram_clk_clk),                                                //                      clk.clk
		.reset                    (pio0_reset_reset_bridge_in_reset_reset),                                 //                    reset.reset
		.uav_address              (vgaclock_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (vgaclock_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (vgaclock_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (vgaclock_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (vgaclock_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (vgaclock_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (vgaclock_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (vgaclock_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (vgaclock_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (vgaclock_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (vgaclock_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (vgaclock_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_readdata              (vgaclock_s1_readdata),                                                   //                         .readdata
		.av_write                 (),                                                                       //              (terminated)
		.av_read                  (),                                                                       //              (terminated)
		.av_writedata             (),                                                                       //              (terminated)
		.av_begintransfer         (),                                                                       //              (terminated)
		.av_beginbursttransfer    (),                                                                       //              (terminated)
		.av_burstcount            (),                                                                       //              (terminated)
		.av_byteenable            (),                                                                       //              (terminated)
		.av_readdatavalid         (1'b0),                                                                   //              (terminated)
		.av_waitrequest           (1'b0),                                                                   //              (terminated)
		.av_writebyteenable       (),                                                                       //              (terminated)
		.av_lock                  (),                                                                       //              (terminated)
		.av_chipselect            (),                                                                       //              (terminated)
		.av_clken                 (),                                                                       //              (terminated)
		.uav_clken                (1'b0),                                                                   //              (terminated)
		.av_debugaccess           (),                                                                       //              (terminated)
		.av_outputenable          (),                                                                       //              (terminated)
		.uav_response             (),                                                                       //              (terminated)
		.av_response              (2'b00),                                                                  //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                   //              (terminated)
		.uav_writeresponsevalid   (),                                                                       //              (terminated)
		.av_writeresponserequest  (),                                                                       //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) vgabinary_s1_translator (
		.clk                      (sdram_clk_sdram_clk_clk),                                                 //                      clk.clk
		.reset                    (pio0_reset_reset_bridge_in_reset_reset),                                  //                    reset.reset
		.uav_address              (vgabinary_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (vgabinary_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (vgabinary_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (vgabinary_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (vgabinary_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (vgabinary_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (vgabinary_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (vgabinary_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (vgabinary_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (vgabinary_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (vgabinary_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (vgabinary_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (vgabinary_s1_write),                                                      //                         .write
		.av_readdata              (vgabinary_s1_readdata),                                                   //                         .readdata
		.av_writedata             (vgabinary_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (vgabinary_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                        //              (terminated)
		.av_begintransfer         (),                                                                        //              (terminated)
		.av_beginbursttransfer    (),                                                                        //              (terminated)
		.av_burstcount            (),                                                                        //              (terminated)
		.av_byteenable            (),                                                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                                                    //              (terminated)
		.av_waitrequest           (1'b0),                                                                    //              (terminated)
		.av_writebyteenable       (),                                                                        //              (terminated)
		.av_lock                  (),                                                                        //              (terminated)
		.av_clken                 (),                                                                        //              (terminated)
		.uav_clken                (1'b0),                                                                    //              (terminated)
		.av_debugaccess           (),                                                                        //              (terminated)
		.av_outputenable          (),                                                                        //              (terminated)
		.uav_response             (),                                                                        //              (terminated)
		.av_response              (2'b00),                                                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                    //              (terminated)
		.uav_writeresponsevalid   (),                                                                        //              (terminated)
		.av_writeresponserequest  (),                                                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) vgaread_s1_translator (
		.clk                      (sdram_clk_sdram_clk_clk),                                               //                      clk.clk
		.reset                    (pio0_reset_reset_bridge_in_reset_reset),                                //                    reset.reset
		.uav_address              (vgaread_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (vgaread_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (vgaread_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (vgaread_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (vgaread_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (vgaread_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (vgaread_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (vgaread_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (vgaread_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (vgaread_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (vgaread_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (vgaread_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_readdata              (vgaread_s1_readdata),                                                   //                         .readdata
		.av_write                 (),                                                                      //              (terminated)
		.av_read                  (),                                                                      //              (terminated)
		.av_writedata             (),                                                                      //              (terminated)
		.av_begintransfer         (),                                                                      //              (terminated)
		.av_beginbursttransfer    (),                                                                      //              (terminated)
		.av_burstcount            (),                                                                      //              (terminated)
		.av_byteenable            (),                                                                      //              (terminated)
		.av_readdatavalid         (1'b0),                                                                  //              (terminated)
		.av_waitrequest           (1'b0),                                                                  //              (terminated)
		.av_writebyteenable       (),                                                                      //              (terminated)
		.av_lock                  (),                                                                      //              (terminated)
		.av_chipselect            (),                                                                      //              (terminated)
		.av_clken                 (),                                                                      //              (terminated)
		.uav_clken                (1'b0),                                                                  //              (terminated)
		.av_debugaccess           (),                                                                      //              (terminated)
		.av_outputenable          (),                                                                      //              (terminated)
		.uav_response             (),                                                                      //              (terminated)
		.av_response              (2'b00),                                                                 //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                  //              (terminated)
		.uav_writeresponsevalid   (),                                                                      //              (terminated)
		.av_writeresponserequest  (),                                                                      //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) topedge_s1_translator (
		.clk                      (sdram_clk_sdram_clk_clk),                                               //                      clk.clk
		.reset                    (pio0_reset_reset_bridge_in_reset_reset),                                //                    reset.reset
		.uav_address              (topedge_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (topedge_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (topedge_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (topedge_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (topedge_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (topedge_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (topedge_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (topedge_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (topedge_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (topedge_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (topedge_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (topedge_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_readdata              (topedge_s1_readdata),                                                   //                         .readdata
		.av_write                 (),                                                                      //              (terminated)
		.av_read                  (),                                                                      //              (terminated)
		.av_writedata             (),                                                                      //              (terminated)
		.av_begintransfer         (),                                                                      //              (terminated)
		.av_beginbursttransfer    (),                                                                      //              (terminated)
		.av_burstcount            (),                                                                      //              (terminated)
		.av_byteenable            (),                                                                      //              (terminated)
		.av_readdatavalid         (1'b0),                                                                  //              (terminated)
		.av_waitrequest           (1'b0),                                                                  //              (terminated)
		.av_writebyteenable       (),                                                                      //              (terminated)
		.av_lock                  (),                                                                      //              (terminated)
		.av_chipselect            (),                                                                      //              (terminated)
		.av_clken                 (),                                                                      //              (terminated)
		.uav_clken                (1'b0),                                                                  //              (terminated)
		.av_debugaccess           (),                                                                      //              (terminated)
		.av_outputenable          (),                                                                      //              (terminated)
		.uav_response             (),                                                                      //              (terminated)
		.av_response              (2'b00),                                                                 //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                  //              (terminated)
		.uav_writeresponsevalid   (),                                                                      //              (terminated)
		.av_writeresponserequest  (),                                                                      //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hwreset_s1_translator (
		.clk                      (sdram_clk_sdram_clk_clk),                                               //                      clk.clk
		.reset                    (pio0_reset_reset_bridge_in_reset_reset),                                //                    reset.reset
		.uav_address              (hwreset_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (hwreset_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (hwreset_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (hwreset_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (hwreset_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (hwreset_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (hwreset_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (hwreset_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (hwreset_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (hwreset_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (hwreset_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (hwreset_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (hwreset_s1_write),                                                      //                         .write
		.av_readdata              (hwreset_s1_readdata),                                                   //                         .readdata
		.av_writedata             (hwreset_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (hwreset_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                      //              (terminated)
		.av_begintransfer         (),                                                                      //              (terminated)
		.av_beginbursttransfer    (),                                                                      //              (terminated)
		.av_burstcount            (),                                                                      //              (terminated)
		.av_byteenable            (),                                                                      //              (terminated)
		.av_readdatavalid         (1'b0),                                                                  //              (terminated)
		.av_waitrequest           (1'b0),                                                                  //              (terminated)
		.av_writebyteenable       (),                                                                      //              (terminated)
		.av_lock                  (),                                                                      //              (terminated)
		.av_clken                 (),                                                                      //              (terminated)
		.uav_clken                (1'b0),                                                                  //              (terminated)
		.av_debugaccess           (),                                                                      //              (terminated)
		.av_outputenable          (),                                                                      //              (terminated)
		.uav_response             (),                                                                      //              (terminated)
		.av_response              (2'b00),                                                                 //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                  //              (terminated)
		.uav_writeresponsevalid   (),                                                                      //              (terminated)
		.av_writeresponserequest  (),                                                                      //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) lval_s1_translator (
		.clk                      (sdram_clk_sdram_clk_clk),                                            //                      clk.clk
		.reset                    (pio0_reset_reset_bridge_in_reset_reset),                             //                    reset.reset
		.uav_address              (lval_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (lval_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (lval_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (lval_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (lval_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (lval_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (lval_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (lval_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (lval_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (lval_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (lval_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (Lval_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_readdata              (Lval_s1_readdata),                                                   //                         .readdata
		.av_write                 (),                                                                   //              (terminated)
		.av_read                  (),                                                                   //              (terminated)
		.av_writedata             (),                                                                   //              (terminated)
		.av_begintransfer         (),                                                                   //              (terminated)
		.av_beginbursttransfer    (),                                                                   //              (terminated)
		.av_burstcount            (),                                                                   //              (terminated)
		.av_byteenable            (),                                                                   //              (terminated)
		.av_readdatavalid         (1'b0),                                                               //              (terminated)
		.av_waitrequest           (1'b0),                                                               //              (terminated)
		.av_writebyteenable       (),                                                                   //              (terminated)
		.av_lock                  (),                                                                   //              (terminated)
		.av_chipselect            (),                                                                   //              (terminated)
		.av_clken                 (),                                                                   //              (terminated)
		.uav_clken                (1'b0),                                                               //              (terminated)
		.av_debugaccess           (),                                                                   //              (terminated)
		.av_outputenable          (),                                                                   //              (terminated)
		.uav_response             (),                                                                   //              (terminated)
		.av_response              (2'b00),                                                              //              (terminated)
		.uav_writeresponserequest (1'b0),                                                               //              (terminated)
		.uav_writeresponsevalid   (),                                                                   //              (terminated)
		.av_writeresponserequest  (),                                                                   //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (21),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (84),
		.PKT_CACHE_H               (114),
		.PKT_CACHE_L               (111),
		.PKT_ADDR_SIDEBAND_H       (82),
		.PKT_ADDR_SIDEBAND_L       (82),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (62),
		.PKT_TRANS_LOCK            (61),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_THREAD_ID_H           (107),
		.PKT_THREAD_ID_L           (96),
		.PKT_QOS_L                 (85),
		.PKT_QOS_H                 (85),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_DATA_SIDEBAND_H       (83),
		.PKT_DATA_SIDEBAND_L       (83),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (18),
		.ID                        (0)
	) arm_a9_hps_h2f_lw_axi_master_agent (
		.aclk                   (sdram_clk_sdram_clk_clk),                                                   //              clk.clk
		.aresetn                (~arm_a9_hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (limiter_rsp_src_valid),                                                     //         write_rp.valid
		.write_rp_data          (limiter_rsp_src_data),                                                      //                 .data
		.write_rp_channel       (limiter_rsp_src_channel),                                                   //                 .channel
		.write_rp_startofpacket (limiter_rsp_src_startofpacket),                                             //                 .startofpacket
		.write_rp_endofpacket   (limiter_rsp_src_endofpacket),                                               //                 .endofpacket
		.write_rp_ready         (limiter_rsp_src_ready),                                                     //                 .ready
		.read_cp_valid          (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (limiter_001_rsp_src_valid),                                                 //          read_rp.valid
		.read_rp_data           (limiter_001_rsp_src_data),                                                  //                 .data
		.read_rp_channel        (limiter_001_rsp_src_channel),                                               //                 .channel
		.read_rp_startofpacket  (limiter_001_rsp_src_startofpacket),                                         //                 .startofpacket
		.read_rp_endofpacket    (limiter_001_rsp_src_endofpacket),                                           //                 .endofpacket
		.read_rp_ready          (limiter_001_rsp_src_ready),                                                 //                 .ready
		.awid                   (arm_a9_hps_h2f_lw_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (arm_a9_hps_h2f_lw_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (arm_a9_hps_h2f_lw_axi_master_awlen),                                        //                 .awlen
		.awsize                 (arm_a9_hps_h2f_lw_axi_master_awsize),                                       //                 .awsize
		.awburst                (arm_a9_hps_h2f_lw_axi_master_awburst),                                      //                 .awburst
		.awlock                 (arm_a9_hps_h2f_lw_axi_master_awlock),                                       //                 .awlock
		.awcache                (arm_a9_hps_h2f_lw_axi_master_awcache),                                      //                 .awcache
		.awprot                 (arm_a9_hps_h2f_lw_axi_master_awprot),                                       //                 .awprot
		.awvalid                (arm_a9_hps_h2f_lw_axi_master_awvalid),                                      //                 .awvalid
		.awready                (arm_a9_hps_h2f_lw_axi_master_awready),                                      //                 .awready
		.wid                    (arm_a9_hps_h2f_lw_axi_master_wid),                                          //                 .wid
		.wdata                  (arm_a9_hps_h2f_lw_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (arm_a9_hps_h2f_lw_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (arm_a9_hps_h2f_lw_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (arm_a9_hps_h2f_lw_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (arm_a9_hps_h2f_lw_axi_master_wready),                                       //                 .wready
		.bid                    (arm_a9_hps_h2f_lw_axi_master_bid),                                          //                 .bid
		.bresp                  (arm_a9_hps_h2f_lw_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (arm_a9_hps_h2f_lw_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (arm_a9_hps_h2f_lw_axi_master_bready),                                       //                 .bready
		.arid                   (arm_a9_hps_h2f_lw_axi_master_arid),                                         //                 .arid
		.araddr                 (arm_a9_hps_h2f_lw_axi_master_araddr),                                       //                 .araddr
		.arlen                  (arm_a9_hps_h2f_lw_axi_master_arlen),                                        //                 .arlen
		.arsize                 (arm_a9_hps_h2f_lw_axi_master_arsize),                                       //                 .arsize
		.arburst                (arm_a9_hps_h2f_lw_axi_master_arburst),                                      //                 .arburst
		.arlock                 (arm_a9_hps_h2f_lw_axi_master_arlock),                                       //                 .arlock
		.arcache                (arm_a9_hps_h2f_lw_axi_master_arcache),                                      //                 .arcache
		.arprot                 (arm_a9_hps_h2f_lw_axi_master_arprot),                                       //                 .arprot
		.arvalid                (arm_a9_hps_h2f_lw_axi_master_arvalid),                                      //                 .arvalid
		.arready                (arm_a9_hps_h2f_lw_axi_master_arready),                                      //                 .arready
		.rid                    (arm_a9_hps_h2f_lw_axi_master_rid),                                          //                 .rid
		.rdata                  (arm_a9_hps_h2f_lw_axi_master_rdata),                                        //                 .rdata
		.rresp                  (arm_a9_hps_h2f_lw_axi_master_rresp),                                        //                 .rresp
		.rlast                  (arm_a9_hps_h2f_lw_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (arm_a9_hps_h2f_lw_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (arm_a9_hps_h2f_lw_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                                      //      (terminated)
		.aruser                 (1'b0),                                                                      //      (terminated)
		.awqos                  (4'b0000),                                                                   //      (terminated)
		.arqos                  (4'b0000),                                                                   //      (terminated)
		.awregion               (4'b0000),                                                                   //      (terminated)
		.arregion               (4'b0000),                                                                   //      (terminated)
		.wuser                  (8'b00000000),                                                               //      (terminated)
		.ruser                  (),                                                                          //      (terminated)
		.buser                  ()                                                                           //      (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_ORI_BURST_SIZE_H      (119),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pio0_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (sdram_clk_sdram_clk_clk),                                                      //             clk.clk
		.reset                   (pio0_reset_reset_bridge_in_reset_reset),                                       //       clk_reset.reset
		.m0_address              (pio0_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pio0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pio0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pio0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pio0_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (pio0_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pio0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pio0_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (pio0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pio0_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (pio0_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (pio0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pio0_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (pio0_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (pio0_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (pio0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_source0_ready),                                                  //              cp.ready
		.cp_valid                (burst_adapter_source0_valid),                                                  //                .valid
		.cp_data                 (burst_adapter_source0_data),                                                   //                .data
		.cp_startofpacket        (burst_adapter_source0_startofpacket),                                          //                .startofpacket
		.cp_endofpacket          (burst_adapter_source0_endofpacket),                                            //                .endofpacket
		.cp_channel              (burst_adapter_source0_channel),                                                //                .channel
		.rf_sink_ready           (pio0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pio0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pio0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pio0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pio0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pio0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pio0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pio0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pio0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pio0_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (pio0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (pio0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (pio0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (pio0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pio0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                        //     (terminated)
		.m0_writeresponserequest (),                                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (sdram_clk_sdram_clk_clk),                                                      //       clk.clk
		.reset             (pio0_reset_reset_bridge_in_reset_reset),                                       // clk_reset.reset
		.in_data           (pio0_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (pio0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (pio0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pio0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pio0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pio0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pio0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pio0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pio0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pio0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                        // (terminated)
		.csr_read          (1'b0),                                                                         // (terminated)
		.csr_write         (1'b0),                                                                         // (terminated)
		.csr_readdata      (),                                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                         // (terminated)
		.almost_full_data  (),                                                                             // (terminated)
		.almost_empty_data (),                                                                             // (terminated)
		.in_empty          (1'b0),                                                                         // (terminated)
		.out_empty         (),                                                                             // (terminated)
		.in_error          (1'b0),                                                                         // (terminated)
		.out_error         (),                                                                             // (terminated)
		.in_channel        (1'b0),                                                                         // (terminated)
		.out_channel       ()                                                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (sdram_clk_sdram_clk_clk),                                                //       clk.clk
		.reset             (pio0_reset_reset_bridge_in_reset_reset),                                 // clk_reset.reset
		.in_data           (pio0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (pio0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (pio0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (pio0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (pio0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (pio0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                  // (terminated)
		.csr_read          (1'b0),                                                                   // (terminated)
		.csr_write         (1'b0),                                                                   // (terminated)
		.csr_readdata      (),                                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated)
		.almost_full_data  (),                                                                       // (terminated)
		.almost_empty_data (),                                                                       // (terminated)
		.in_startofpacket  (1'b0),                                                                   // (terminated)
		.in_endofpacket    (1'b0),                                                                   // (terminated)
		.out_startofpacket (),                                                                       // (terminated)
		.out_endofpacket   (),                                                                       // (terminated)
		.in_empty          (1'b0),                                                                   // (terminated)
		.out_empty         (),                                                                       // (terminated)
		.in_error          (1'b0),                                                                   // (terminated)
		.out_error         (),                                                                       // (terminated)
		.in_channel        (1'b0),                                                                   // (terminated)
		.out_channel       ()                                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_ORI_BURST_SIZE_H      (119),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent (
		.clk                     (sdram_clk_sdram_clk_clk),                                                                          //             clk.clk
		.reset                   (pio0_reset_reset_bridge_in_reset_reset),                                                           //       clk_reset.reset
		.m0_address              (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_001_source0_ready),                                                                  //              cp.ready
		.cp_valid                (burst_adapter_001_source0_valid),                                                                  //                .valid
		.cp_data                 (burst_adapter_001_source0_data),                                                                   //                .data
		.cp_startofpacket        (burst_adapter_001_source0_startofpacket),                                                          //                .startofpacket
		.cp_endofpacket          (burst_adapter_001_source0_endofpacket),                                                            //                .endofpacket
		.cp_channel              (burst_adapter_001_source0_channel),                                                                //                .channel
		.rf_sink_ready           (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                            //     (terminated)
		.m0_writeresponserequest (),                                                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (sdram_clk_sdram_clk_clk),                                                                          //       clk.clk
		.reset             (pio0_reset_reset_bridge_in_reset_reset),                                                           // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                            // (terminated)
		.csr_read          (1'b0),                                                                                             // (terminated)
		.csr_write         (1'b0),                                                                                             // (terminated)
		.csr_readdata      (),                                                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                             // (terminated)
		.almost_full_data  (),                                                                                                 // (terminated)
		.almost_empty_data (),                                                                                                 // (terminated)
		.in_empty          (1'b0),                                                                                             // (terminated)
		.out_empty         (),                                                                                                 // (terminated)
		.in_error          (1'b0),                                                                                             // (terminated)
		.out_error         (),                                                                                                 // (terminated)
		.in_channel        (1'b0),                                                                                             // (terminated)
		.out_channel       ()                                                                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (sdram_clk_sdram_clk_clk),                                                                    //       clk.clk
		.reset             (pio0_reset_reset_bridge_in_reset_reset),                                                     // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                                      // (terminated)
		.csr_read          (1'b0),                                                                                       // (terminated)
		.csr_write         (1'b0),                                                                                       // (terminated)
		.csr_readdata      (),                                                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                       // (terminated)
		.almost_full_data  (),                                                                                           // (terminated)
		.almost_empty_data (),                                                                                           // (terminated)
		.in_startofpacket  (1'b0),                                                                                       // (terminated)
		.in_endofpacket    (1'b0),                                                                                       // (terminated)
		.out_startofpacket (),                                                                                           // (terminated)
		.out_endofpacket   (),                                                                                           // (terminated)
		.in_empty          (1'b0),                                                                                       // (terminated)
		.out_empty         (),                                                                                           // (terminated)
		.in_error          (1'b0),                                                                                       // (terminated)
		.out_error         (),                                                                                           // (terminated)
		.in_channel        (1'b0),                                                                                       // (terminated)
		.out_channel       ()                                                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_ORI_BURST_SIZE_H      (119),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (sdram_clk_sdram_clk_clk),                                                                    //             clk.clk
		.reset                   (pio0_reset_reset_bridge_in_reset_reset),                                                     //       clk_reset.reset
		.m0_address              (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_002_source0_ready),                                                            //              cp.ready
		.cp_valid                (burst_adapter_002_source0_valid),                                                            //                .valid
		.cp_data                 (burst_adapter_002_source0_data),                                                             //                .data
		.cp_startofpacket        (burst_adapter_002_source0_startofpacket),                                                    //                .startofpacket
		.cp_endofpacket          (burst_adapter_002_source0_endofpacket),                                                      //                .endofpacket
		.cp_channel              (burst_adapter_002_source0_channel),                                                          //                .channel
		.rf_sink_ready           (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                      //     (terminated)
		.m0_writeresponserequest (),                                                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (sdram_clk_sdram_clk_clk),                                                                    //       clk.clk
		.reset             (pio0_reset_reset_bridge_in_reset_reset),                                                     // clk_reset.reset
		.in_data           (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                      // (terminated)
		.csr_read          (1'b0),                                                                                       // (terminated)
		.csr_write         (1'b0),                                                                                       // (terminated)
		.csr_readdata      (),                                                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                       // (terminated)
		.almost_full_data  (),                                                                                           // (terminated)
		.almost_empty_data (),                                                                                           // (terminated)
		.in_empty          (1'b0),                                                                                       // (terminated)
		.out_empty         (),                                                                                           // (terminated)
		.in_error          (1'b0),                                                                                       // (terminated)
		.out_error         (),                                                                                           // (terminated)
		.in_channel        (1'b0),                                                                                       // (terminated)
		.out_channel       ()                                                                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (sdram_clk_sdram_clk_clk),                                                              //       clk.clk
		.reset             (pio0_reset_reset_bridge_in_reset_reset),                                               // clk_reset.reset
		.in_data           (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                                // (terminated)
		.csr_read          (1'b0),                                                                                 // (terminated)
		.csr_write         (1'b0),                                                                                 // (terminated)
		.csr_readdata      (),                                                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                 // (terminated)
		.almost_full_data  (),                                                                                     // (terminated)
		.almost_empty_data (),                                                                                     // (terminated)
		.in_startofpacket  (1'b0),                                                                                 // (terminated)
		.in_endofpacket    (1'b0),                                                                                 // (terminated)
		.out_startofpacket (),                                                                                     // (terminated)
		.out_endofpacket   (),                                                                                     // (terminated)
		.in_empty          (1'b0),                                                                                 // (terminated)
		.out_empty         (),                                                                                     // (terminated)
		.in_error          (1'b0),                                                                                 // (terminated)
		.out_error         (),                                                                                     // (terminated)
		.in_channel        (1'b0),                                                                                 // (terminated)
		.out_channel       ()                                                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_ORI_BURST_SIZE_H      (119),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (sdram_clk_sdram_clk_clk),                                                                    //             clk.clk
		.reset                   (pio0_reset_reset_bridge_in_reset_reset),                                                     //       clk_reset.reset
		.m0_address              (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_003_source0_ready),                                                            //              cp.ready
		.cp_valid                (burst_adapter_003_source0_valid),                                                            //                .valid
		.cp_data                 (burst_adapter_003_source0_data),                                                             //                .data
		.cp_startofpacket        (burst_adapter_003_source0_startofpacket),                                                    //                .startofpacket
		.cp_endofpacket          (burst_adapter_003_source0_endofpacket),                                                      //                .endofpacket
		.cp_channel              (burst_adapter_003_source0_channel),                                                          //                .channel
		.rf_sink_ready           (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                      //     (terminated)
		.m0_writeresponserequest (),                                                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (sdram_clk_sdram_clk_clk),                                                                    //       clk.clk
		.reset             (pio0_reset_reset_bridge_in_reset_reset),                                                     // clk_reset.reset
		.in_data           (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                      // (terminated)
		.csr_read          (1'b0),                                                                                       // (terminated)
		.csr_write         (1'b0),                                                                                       // (terminated)
		.csr_readdata      (),                                                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                       // (terminated)
		.almost_full_data  (),                                                                                           // (terminated)
		.almost_empty_data (),                                                                                           // (terminated)
		.in_empty          (1'b0),                                                                                       // (terminated)
		.out_empty         (),                                                                                           // (terminated)
		.in_error          (1'b0),                                                                                       // (terminated)
		.out_error         (),                                                                                           // (terminated)
		.in_channel        (1'b0),                                                                                       // (terminated)
		.out_channel       ()                                                                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (sdram_clk_sdram_clk_clk),                                                              //       clk.clk
		.reset             (pio0_reset_reset_bridge_in_reset_reset),                                               // clk_reset.reset
		.in_data           (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                                // (terminated)
		.csr_read          (1'b0),                                                                                 // (terminated)
		.csr_write         (1'b0),                                                                                 // (terminated)
		.csr_readdata      (),                                                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                 // (terminated)
		.almost_full_data  (),                                                                                     // (terminated)
		.almost_empty_data (),                                                                                     // (terminated)
		.in_startofpacket  (1'b0),                                                                                 // (terminated)
		.in_endofpacket    (1'b0),                                                                                 // (terminated)
		.out_startofpacket (),                                                                                     // (terminated)
		.out_endofpacket   (),                                                                                     // (terminated)
		.in_empty          (1'b0),                                                                                 // (terminated)
		.out_empty         (),                                                                                     // (terminated)
		.in_error          (1'b0),                                                                                 // (terminated)
		.out_error         (),                                                                                     // (terminated)
		.in_channel        (1'b0),                                                                                 // (terminated)
		.out_channel       ()                                                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_ORI_BURST_SIZE_H      (119),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pio_start_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (sdram_clk_sdram_clk_clk),                                                           //             clk.clk
		.reset                   (pio0_reset_reset_bridge_in_reset_reset),                                            //       clk_reset.reset
		.m0_address              (pio_start_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pio_start_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pio_start_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pio_start_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pio_start_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (pio_start_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pio_start_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pio_start_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (pio_start_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pio_start_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (pio_start_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (pio_start_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pio_start_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (pio_start_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (pio_start_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (pio_start_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_004_source0_ready),                                                   //              cp.ready
		.cp_valid                (burst_adapter_004_source0_valid),                                                   //                .valid
		.cp_data                 (burst_adapter_004_source0_data),                                                    //                .data
		.cp_startofpacket        (burst_adapter_004_source0_startofpacket),                                           //                .startofpacket
		.cp_endofpacket          (burst_adapter_004_source0_endofpacket),                                             //                .endofpacket
		.cp_channel              (burst_adapter_004_source0_channel),                                                 //                .channel
		.rf_sink_ready           (pio_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pio_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pio_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pio_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pio_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pio_start_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pio_start_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pio_start_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pio_start_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pio_start_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (pio_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (pio_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (pio_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (pio_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pio_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                             //     (terminated)
		.m0_writeresponserequest (),                                                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (sdram_clk_sdram_clk_clk),                                                           //       clk.clk
		.reset             (pio0_reset_reset_bridge_in_reset_reset),                                            // clk_reset.reset
		.in_data           (pio_start_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (pio_start_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (pio_start_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pio_start_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pio_start_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pio_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pio_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pio_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pio_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pio_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                             // (terminated)
		.csr_read          (1'b0),                                                                              // (terminated)
		.csr_write         (1'b0),                                                                              // (terminated)
		.csr_readdata      (),                                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                              // (terminated)
		.almost_full_data  (),                                                                                  // (terminated)
		.almost_empty_data (),                                                                                  // (terminated)
		.in_empty          (1'b0),                                                                              // (terminated)
		.out_empty         (),                                                                                  // (terminated)
		.in_error          (1'b0),                                                                              // (terminated)
		.out_error         (),                                                                                  // (terminated)
		.in_channel        (1'b0),                                                                              // (terminated)
		.out_channel       ()                                                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (sdram_clk_sdram_clk_clk),                                                     //       clk.clk
		.reset             (pio0_reset_reset_bridge_in_reset_reset),                                      // clk_reset.reset
		.in_data           (pio_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (pio_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (pio_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (pio_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (pio_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (pio_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                       // (terminated)
		.csr_read          (1'b0),                                                                        // (terminated)
		.csr_write         (1'b0),                                                                        // (terminated)
		.csr_readdata      (),                                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                        // (terminated)
		.almost_full_data  (),                                                                            // (terminated)
		.almost_empty_data (),                                                                            // (terminated)
		.in_startofpacket  (1'b0),                                                                        // (terminated)
		.in_endofpacket    (1'b0),                                                                        // (terminated)
		.out_startofpacket (),                                                                            // (terminated)
		.out_endofpacket   (),                                                                            // (terminated)
		.in_empty          (1'b0),                                                                        // (terminated)
		.out_empty         (),                                                                            // (terminated)
		.in_error          (1'b0),                                                                        // (terminated)
		.out_error         (),                                                                            // (terminated)
		.in_channel        (1'b0),                                                                        // (terminated)
		.out_channel       ()                                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_ORI_BURST_SIZE_H      (119),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) hps_vga_data1_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (sdram_clk_sdram_clk_clk),                                                               //             clk.clk
		.reset                   (pio0_reset_reset_bridge_in_reset_reset),                                                //       clk_reset.reset
		.m0_address              (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_005_source0_ready),                                                       //              cp.ready
		.cp_valid                (burst_adapter_005_source0_valid),                                                       //                .valid
		.cp_data                 (burst_adapter_005_source0_data),                                                        //                .data
		.cp_startofpacket        (burst_adapter_005_source0_startofpacket),                                               //                .startofpacket
		.cp_endofpacket          (burst_adapter_005_source0_endofpacket),                                                 //                .endofpacket
		.cp_channel              (burst_adapter_005_source0_channel),                                                     //                .channel
		.rf_sink_ready           (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                 //     (terminated)
		.m0_writeresponserequest (),                                                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (sdram_clk_sdram_clk_clk),                                                               //       clk.clk
		.reset             (pio0_reset_reset_bridge_in_reset_reset),                                                // clk_reset.reset
		.in_data           (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                 // (terminated)
		.csr_read          (1'b0),                                                                                  // (terminated)
		.csr_write         (1'b0),                                                                                  // (terminated)
		.csr_readdata      (),                                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                  // (terminated)
		.almost_full_data  (),                                                                                      // (terminated)
		.almost_empty_data (),                                                                                      // (terminated)
		.in_empty          (1'b0),                                                                                  // (terminated)
		.out_empty         (),                                                                                      // (terminated)
		.in_error          (1'b0),                                                                                  // (terminated)
		.out_error         (),                                                                                      // (terminated)
		.in_channel        (1'b0),                                                                                  // (terminated)
		.out_channel       ()                                                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (sdram_clk_sdram_clk_clk),                                                         //       clk.clk
		.reset             (pio0_reset_reset_bridge_in_reset_reset),                                          // clk_reset.reset
		.in_data           (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                           // (terminated)
		.csr_read          (1'b0),                                                                            // (terminated)
		.csr_write         (1'b0),                                                                            // (terminated)
		.csr_readdata      (),                                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                            // (terminated)
		.almost_full_data  (),                                                                                // (terminated)
		.almost_empty_data (),                                                                                // (terminated)
		.in_startofpacket  (1'b0),                                                                            // (terminated)
		.in_endofpacket    (1'b0),                                                                            // (terminated)
		.out_startofpacket (),                                                                                // (terminated)
		.out_endofpacket   (),                                                                                // (terminated)
		.in_empty          (1'b0),                                                                            // (terminated)
		.out_empty         (),                                                                                // (terminated)
		.in_error          (1'b0),                                                                            // (terminated)
		.out_error         (),                                                                                // (terminated)
		.in_channel        (1'b0),                                                                            // (terminated)
		.out_channel       ()                                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_ORI_BURST_SIZE_H      (119),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) hps_vga_data2_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (sdram_clk_sdram_clk_clk),                                                               //             clk.clk
		.reset                   (pio0_reset_reset_bridge_in_reset_reset),                                                //       clk_reset.reset
		.m0_address              (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_006_source0_ready),                                                       //              cp.ready
		.cp_valid                (burst_adapter_006_source0_valid),                                                       //                .valid
		.cp_data                 (burst_adapter_006_source0_data),                                                        //                .data
		.cp_startofpacket        (burst_adapter_006_source0_startofpacket),                                               //                .startofpacket
		.cp_endofpacket          (burst_adapter_006_source0_endofpacket),                                                 //                .endofpacket
		.cp_channel              (burst_adapter_006_source0_channel),                                                     //                .channel
		.rf_sink_ready           (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                 //     (terminated)
		.m0_writeresponserequest (),                                                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (sdram_clk_sdram_clk_clk),                                                               //       clk.clk
		.reset             (pio0_reset_reset_bridge_in_reset_reset),                                                // clk_reset.reset
		.in_data           (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                 // (terminated)
		.csr_read          (1'b0),                                                                                  // (terminated)
		.csr_write         (1'b0),                                                                                  // (terminated)
		.csr_readdata      (),                                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                  // (terminated)
		.almost_full_data  (),                                                                                      // (terminated)
		.almost_empty_data (),                                                                                      // (terminated)
		.in_empty          (1'b0),                                                                                  // (terminated)
		.out_empty         (),                                                                                      // (terminated)
		.in_error          (1'b0),                                                                                  // (terminated)
		.out_error         (),                                                                                      // (terminated)
		.in_channel        (1'b0),                                                                                  // (terminated)
		.out_channel       ()                                                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (sdram_clk_sdram_clk_clk),                                                         //       clk.clk
		.reset             (pio0_reset_reset_bridge_in_reset_reset),                                          // clk_reset.reset
		.in_data           (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                           // (terminated)
		.csr_read          (1'b0),                                                                            // (terminated)
		.csr_write         (1'b0),                                                                            // (terminated)
		.csr_readdata      (),                                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                            // (terminated)
		.almost_full_data  (),                                                                                // (terminated)
		.almost_empty_data (),                                                                                // (terminated)
		.in_startofpacket  (1'b0),                                                                            // (terminated)
		.in_endofpacket    (1'b0),                                                                            // (terminated)
		.out_startofpacket (),                                                                                // (terminated)
		.out_endofpacket   (),                                                                                // (terminated)
		.in_empty          (1'b0),                                                                            // (terminated)
		.out_empty         (),                                                                                // (terminated)
		.in_error          (1'b0),                                                                            // (terminated)
		.out_error         (),                                                                                // (terminated)
		.in_channel        (1'b0),                                                                            // (terminated)
		.out_channel       ()                                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_ORI_BURST_SIZE_H      (119),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sdramclock_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (sdram_clk_sdram_clk_clk),                                                            //             clk.clk
		.reset                   (pio0_reset_reset_bridge_in_reset_reset),                                             //       clk_reset.reset
		.m0_address              (sdramclock_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sdramclock_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sdramclock_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sdramclock_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sdramclock_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (sdramclock_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sdramclock_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sdramclock_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (sdramclock_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sdramclock_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (sdramclock_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (sdramclock_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sdramclock_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (sdramclock_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (sdramclock_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (sdramclock_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_007_source0_ready),                                                    //              cp.ready
		.cp_valid                (burst_adapter_007_source0_valid),                                                    //                .valid
		.cp_data                 (burst_adapter_007_source0_data),                                                     //                .data
		.cp_startofpacket        (burst_adapter_007_source0_startofpacket),                                            //                .startofpacket
		.cp_endofpacket          (burst_adapter_007_source0_endofpacket),                                              //                .endofpacket
		.cp_channel              (burst_adapter_007_source0_channel),                                                  //                .channel
		.rf_sink_ready           (sdramclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sdramclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sdramclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sdramclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sdramclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sdramclock_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sdramclock_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sdramclock_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sdramclock_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sdramclock_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (sdramclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sdramclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (sdramclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (sdramclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdramclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sdramclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                              //     (terminated)
		.m0_writeresponserequest (),                                                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdramclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (sdram_clk_sdram_clk_clk),                                                            //       clk.clk
		.reset             (pio0_reset_reset_bridge_in_reset_reset),                                             // clk_reset.reset
		.in_data           (sdramclock_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (sdramclock_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (sdramclock_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sdramclock_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sdramclock_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sdramclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sdramclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sdramclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sdramclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sdramclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                              // (terminated)
		.csr_read          (1'b0),                                                                               // (terminated)
		.csr_write         (1'b0),                                                                               // (terminated)
		.csr_readdata      (),                                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                               // (terminated)
		.almost_full_data  (),                                                                                   // (terminated)
		.almost_empty_data (),                                                                                   // (terminated)
		.in_empty          (1'b0),                                                                               // (terminated)
		.out_empty         (),                                                                                   // (terminated)
		.in_error          (1'b0),                                                                               // (terminated)
		.out_error         (),                                                                                   // (terminated)
		.in_channel        (1'b0),                                                                               // (terminated)
		.out_channel       ()                                                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdramclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (sdram_clk_sdram_clk_clk),                                                      //       clk.clk
		.reset             (pio0_reset_reset_bridge_in_reset_reset),                                       // clk_reset.reset
		.in_data           (sdramclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sdramclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sdramclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sdramclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sdramclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sdramclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                        // (terminated)
		.csr_read          (1'b0),                                                                         // (terminated)
		.csr_write         (1'b0),                                                                         // (terminated)
		.csr_readdata      (),                                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                         // (terminated)
		.almost_full_data  (),                                                                             // (terminated)
		.almost_empty_data (),                                                                             // (terminated)
		.in_startofpacket  (1'b0),                                                                         // (terminated)
		.in_endofpacket    (1'b0),                                                                         // (terminated)
		.out_startofpacket (),                                                                             // (terminated)
		.out_endofpacket   (),                                                                             // (terminated)
		.in_empty          (1'b0),                                                                         // (terminated)
		.out_empty         (),                                                                             // (terminated)
		.in_error          (1'b0),                                                                         // (terminated)
		.out_error         (),                                                                             // (terminated)
		.in_channel        (1'b0),                                                                         // (terminated)
		.out_channel       ()                                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_ORI_BURST_SIZE_H      (119),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sdram_start_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (sdram_clk_sdram_clk_clk),                                                             //             clk.clk
		.reset                   (pio0_reset_reset_bridge_in_reset_reset),                                              //       clk_reset.reset
		.m0_address              (sdram_start_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sdram_start_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sdram_start_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sdram_start_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sdram_start_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (sdram_start_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sdram_start_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sdram_start_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (sdram_start_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sdram_start_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (sdram_start_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (sdram_start_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sdram_start_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (sdram_start_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (sdram_start_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (sdram_start_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_008_source0_ready),                                                     //              cp.ready
		.cp_valid                (burst_adapter_008_source0_valid),                                                     //                .valid
		.cp_data                 (burst_adapter_008_source0_data),                                                      //                .data
		.cp_startofpacket        (burst_adapter_008_source0_startofpacket),                                             //                .startofpacket
		.cp_endofpacket          (burst_adapter_008_source0_endofpacket),                                               //                .endofpacket
		.cp_channel              (burst_adapter_008_source0_channel),                                                   //                .channel
		.rf_sink_ready           (sdram_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sdram_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sdram_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sdram_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sdram_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sdram_start_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sdram_start_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sdram_start_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sdram_start_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sdram_start_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (sdram_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sdram_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (sdram_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (sdram_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sdram_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                               //     (terminated)
		.m0_writeresponserequest (),                                                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (sdram_clk_sdram_clk_clk),                                                             //       clk.clk
		.reset             (pio0_reset_reset_bridge_in_reset_reset),                                              // clk_reset.reset
		.in_data           (sdram_start_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (sdram_start_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (sdram_start_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sdram_start_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sdram_start_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sdram_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sdram_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sdram_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sdram_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sdram_start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                               // (terminated)
		.csr_read          (1'b0),                                                                                // (terminated)
		.csr_write         (1'b0),                                                                                // (terminated)
		.csr_readdata      (),                                                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                // (terminated)
		.almost_full_data  (),                                                                                    // (terminated)
		.almost_empty_data (),                                                                                    // (terminated)
		.in_empty          (1'b0),                                                                                // (terminated)
		.out_empty         (),                                                                                    // (terminated)
		.in_error          (1'b0),                                                                                // (terminated)
		.out_error         (),                                                                                    // (terminated)
		.in_channel        (1'b0),                                                                                // (terminated)
		.out_channel       ()                                                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (sdram_clk_sdram_clk_clk),                                                       //       clk.clk
		.reset             (pio0_reset_reset_bridge_in_reset_reset),                                        // clk_reset.reset
		.in_data           (sdram_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sdram_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sdram_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sdram_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sdram_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sdram_start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                         // (terminated)
		.csr_read          (1'b0),                                                                          // (terminated)
		.csr_write         (1'b0),                                                                          // (terminated)
		.csr_readdata      (),                                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                          // (terminated)
		.almost_full_data  (),                                                                              // (terminated)
		.almost_empty_data (),                                                                              // (terminated)
		.in_startofpacket  (1'b0),                                                                          // (terminated)
		.in_endofpacket    (1'b0),                                                                          // (terminated)
		.out_startofpacket (),                                                                              // (terminated)
		.out_endofpacket   (),                                                                              // (terminated)
		.in_empty          (1'b0),                                                                          // (terminated)
		.out_empty         (),                                                                              // (terminated)
		.in_error          (1'b0),                                                                          // (terminated)
		.out_error         (),                                                                              // (terminated)
		.in_channel        (1'b0),                                                                          // (terminated)
		.out_channel       ()                                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_ORI_BURST_SIZE_H      (119),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) fifowe_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (sdram_clk_sdram_clk_clk),                                                        //             clk.clk
		.reset                   (pio0_reset_reset_bridge_in_reset_reset),                                         //       clk_reset.reset
		.m0_address              (fifowe_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fifowe_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fifowe_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fifowe_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fifowe_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (fifowe_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fifowe_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fifowe_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (fifowe_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fifowe_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (fifowe_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (fifowe_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fifowe_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (fifowe_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (fifowe_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (fifowe_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_009_source0_ready),                                                //              cp.ready
		.cp_valid                (burst_adapter_009_source0_valid),                                                //                .valid
		.cp_data                 (burst_adapter_009_source0_data),                                                 //                .data
		.cp_startofpacket        (burst_adapter_009_source0_startofpacket),                                        //                .startofpacket
		.cp_endofpacket          (burst_adapter_009_source0_endofpacket),                                          //                .endofpacket
		.cp_channel              (burst_adapter_009_source0_channel),                                              //                .channel
		.rf_sink_ready           (fifowe_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fifowe_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fifowe_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fifowe_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fifowe_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fifowe_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fifowe_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fifowe_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fifowe_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fifowe_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (fifowe_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (fifowe_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (fifowe_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (fifowe_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifowe_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fifowe_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                          //     (terminated)
		.m0_writeresponserequest (),                                                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifowe_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (sdram_clk_sdram_clk_clk),                                                        //       clk.clk
		.reset             (pio0_reset_reset_bridge_in_reset_reset),                                         // clk_reset.reset
		.in_data           (fifowe_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (fifowe_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (fifowe_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifowe_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifowe_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifowe_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifowe_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifowe_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifowe_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifowe_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                          // (terminated)
		.csr_read          (1'b0),                                                                           // (terminated)
		.csr_write         (1'b0),                                                                           // (terminated)
		.csr_readdata      (),                                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                           // (terminated)
		.almost_full_data  (),                                                                               // (terminated)
		.almost_empty_data (),                                                                               // (terminated)
		.in_empty          (1'b0),                                                                           // (terminated)
		.out_empty         (),                                                                               // (terminated)
		.in_error          (1'b0),                                                                           // (terminated)
		.out_error         (),                                                                               // (terminated)
		.in_channel        (1'b0),                                                                           // (terminated)
		.out_channel       ()                                                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifowe_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (sdram_clk_sdram_clk_clk),                                                  //       clk.clk
		.reset             (pio0_reset_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.in_data           (fifowe_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (fifowe_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (fifowe_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (fifowe_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (fifowe_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (fifowe_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                                     // (terminated)
		.out_startofpacket (),                                                                         // (terminated)
		.out_endofpacket   (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_ORI_BURST_SIZE_H      (119),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) binaryscale_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (sdram_clk_sdram_clk_clk),                                                             //             clk.clk
		.reset                   (pio0_reset_reset_bridge_in_reset_reset),                                              //       clk_reset.reset
		.m0_address              (binaryscale_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (binaryscale_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (binaryscale_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (binaryscale_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (binaryscale_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (binaryscale_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (binaryscale_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (binaryscale_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (binaryscale_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (binaryscale_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (binaryscale_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (binaryscale_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (binaryscale_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (binaryscale_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (binaryscale_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (binaryscale_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_010_source0_ready),                                                     //              cp.ready
		.cp_valid                (burst_adapter_010_source0_valid),                                                     //                .valid
		.cp_data                 (burst_adapter_010_source0_data),                                                      //                .data
		.cp_startofpacket        (burst_adapter_010_source0_startofpacket),                                             //                .startofpacket
		.cp_endofpacket          (burst_adapter_010_source0_endofpacket),                                               //                .endofpacket
		.cp_channel              (burst_adapter_010_source0_channel),                                                   //                .channel
		.rf_sink_ready           (binaryscale_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (binaryscale_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (binaryscale_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (binaryscale_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (binaryscale_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (binaryscale_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (binaryscale_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (binaryscale_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (binaryscale_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (binaryscale_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (binaryscale_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (binaryscale_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (binaryscale_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (binaryscale_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (binaryscale_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (binaryscale_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                               //     (terminated)
		.m0_writeresponserequest (),                                                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) binaryscale_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (sdram_clk_sdram_clk_clk),                                                             //       clk.clk
		.reset             (pio0_reset_reset_bridge_in_reset_reset),                                              // clk_reset.reset
		.in_data           (binaryscale_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (binaryscale_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (binaryscale_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (binaryscale_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (binaryscale_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (binaryscale_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (binaryscale_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (binaryscale_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (binaryscale_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (binaryscale_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                               // (terminated)
		.csr_read          (1'b0),                                                                                // (terminated)
		.csr_write         (1'b0),                                                                                // (terminated)
		.csr_readdata      (),                                                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                // (terminated)
		.almost_full_data  (),                                                                                    // (terminated)
		.almost_empty_data (),                                                                                    // (terminated)
		.in_empty          (1'b0),                                                                                // (terminated)
		.out_empty         (),                                                                                    // (terminated)
		.in_error          (1'b0),                                                                                // (terminated)
		.out_error         (),                                                                                    // (terminated)
		.in_channel        (1'b0),                                                                                // (terminated)
		.out_channel       ()                                                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) binaryscale_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (sdram_clk_sdram_clk_clk),                                                       //       clk.clk
		.reset             (pio0_reset_reset_bridge_in_reset_reset),                                        // clk_reset.reset
		.in_data           (binaryscale_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (binaryscale_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (binaryscale_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (binaryscale_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (binaryscale_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (binaryscale_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                         // (terminated)
		.csr_read          (1'b0),                                                                          // (terminated)
		.csr_write         (1'b0),                                                                          // (terminated)
		.csr_readdata      (),                                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                          // (terminated)
		.almost_full_data  (),                                                                              // (terminated)
		.almost_empty_data (),                                                                              // (terminated)
		.in_startofpacket  (1'b0),                                                                          // (terminated)
		.in_endofpacket    (1'b0),                                                                          // (terminated)
		.out_startofpacket (),                                                                              // (terminated)
		.out_endofpacket   (),                                                                              // (terminated)
		.in_empty          (1'b0),                                                                          // (terminated)
		.out_empty         (),                                                                              // (terminated)
		.in_error          (1'b0),                                                                          // (terminated)
		.out_error         (),                                                                              // (terminated)
		.in_channel        (1'b0),                                                                          // (terminated)
		.out_channel       ()                                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_ORI_BURST_SIZE_H      (119),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) greyparamter_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (sdram_clk_sdram_clk_clk),                                                              //             clk.clk
		.reset                   (pio0_reset_reset_bridge_in_reset_reset),                                               //       clk_reset.reset
		.m0_address              (greyparamter_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (greyparamter_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (greyparamter_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (greyparamter_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (greyparamter_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (greyparamter_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (greyparamter_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (greyparamter_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (greyparamter_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (greyparamter_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (greyparamter_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (greyparamter_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (greyparamter_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (greyparamter_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (greyparamter_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (greyparamter_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_011_source0_ready),                                                      //              cp.ready
		.cp_valid                (burst_adapter_011_source0_valid),                                                      //                .valid
		.cp_data                 (burst_adapter_011_source0_data),                                                       //                .data
		.cp_startofpacket        (burst_adapter_011_source0_startofpacket),                                              //                .startofpacket
		.cp_endofpacket          (burst_adapter_011_source0_endofpacket),                                                //                .endofpacket
		.cp_channel              (burst_adapter_011_source0_channel),                                                    //                .channel
		.rf_sink_ready           (greyparamter_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (greyparamter_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (greyparamter_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (greyparamter_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (greyparamter_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (greyparamter_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (greyparamter_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (greyparamter_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (greyparamter_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (greyparamter_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (greyparamter_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (greyparamter_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (greyparamter_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (greyparamter_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (greyparamter_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (greyparamter_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                //     (terminated)
		.m0_writeresponserequest (),                                                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) greyparamter_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (sdram_clk_sdram_clk_clk),                                                              //       clk.clk
		.reset             (pio0_reset_reset_bridge_in_reset_reset),                                               // clk_reset.reset
		.in_data           (greyparamter_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (greyparamter_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (greyparamter_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (greyparamter_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (greyparamter_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (greyparamter_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (greyparamter_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (greyparamter_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (greyparamter_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (greyparamter_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                // (terminated)
		.csr_read          (1'b0),                                                                                 // (terminated)
		.csr_write         (1'b0),                                                                                 // (terminated)
		.csr_readdata      (),                                                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                 // (terminated)
		.almost_full_data  (),                                                                                     // (terminated)
		.almost_empty_data (),                                                                                     // (terminated)
		.in_empty          (1'b0),                                                                                 // (terminated)
		.out_empty         (),                                                                                     // (terminated)
		.in_error          (1'b0),                                                                                 // (terminated)
		.out_error         (),                                                                                     // (terminated)
		.in_channel        (1'b0),                                                                                 // (terminated)
		.out_channel       ()                                                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) greyparamter_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (sdram_clk_sdram_clk_clk),                                                        //       clk.clk
		.reset             (pio0_reset_reset_bridge_in_reset_reset),                                         // clk_reset.reset
		.in_data           (greyparamter_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (greyparamter_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (greyparamter_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (greyparamter_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (greyparamter_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (greyparamter_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                          // (terminated)
		.csr_read          (1'b0),                                                                           // (terminated)
		.csr_write         (1'b0),                                                                           // (terminated)
		.csr_readdata      (),                                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                           // (terminated)
		.almost_full_data  (),                                                                               // (terminated)
		.almost_empty_data (),                                                                               // (terminated)
		.in_startofpacket  (1'b0),                                                                           // (terminated)
		.in_endofpacket    (1'b0),                                                                           // (terminated)
		.out_startofpacket (),                                                                               // (terminated)
		.out_endofpacket   (),                                                                               // (terminated)
		.in_empty          (1'b0),                                                                           // (terminated)
		.out_empty         (),                                                                               // (terminated)
		.in_error          (1'b0),                                                                           // (terminated)
		.out_error         (),                                                                               // (terminated)
		.in_channel        (1'b0),                                                                           // (terminated)
		.out_channel       ()                                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_ORI_BURST_SIZE_H      (119),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) vgaclock_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (sdram_clk_sdram_clk_clk),                                                          //             clk.clk
		.reset                   (pio0_reset_reset_bridge_in_reset_reset),                                           //       clk_reset.reset
		.m0_address              (vgaclock_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (vgaclock_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (vgaclock_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (vgaclock_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (vgaclock_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (vgaclock_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (vgaclock_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (vgaclock_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (vgaclock_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (vgaclock_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (vgaclock_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (vgaclock_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (vgaclock_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (vgaclock_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (vgaclock_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (vgaclock_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_012_source0_ready),                                                  //              cp.ready
		.cp_valid                (burst_adapter_012_source0_valid),                                                  //                .valid
		.cp_data                 (burst_adapter_012_source0_data),                                                   //                .data
		.cp_startofpacket        (burst_adapter_012_source0_startofpacket),                                          //                .startofpacket
		.cp_endofpacket          (burst_adapter_012_source0_endofpacket),                                            //                .endofpacket
		.cp_channel              (burst_adapter_012_source0_channel),                                                //                .channel
		.rf_sink_ready           (vgaclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (vgaclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (vgaclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (vgaclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (vgaclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (vgaclock_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (vgaclock_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (vgaclock_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (vgaclock_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (vgaclock_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (vgaclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (vgaclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (vgaclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (vgaclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (vgaclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (vgaclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                            //     (terminated)
		.m0_writeresponserequest (),                                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vgaclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (sdram_clk_sdram_clk_clk),                                                          //       clk.clk
		.reset             (pio0_reset_reset_bridge_in_reset_reset),                                           // clk_reset.reset
		.in_data           (vgaclock_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (vgaclock_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (vgaclock_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (vgaclock_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (vgaclock_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (vgaclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (vgaclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (vgaclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (vgaclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (vgaclock_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                            // (terminated)
		.csr_read          (1'b0),                                                                             // (terminated)
		.csr_write         (1'b0),                                                                             // (terminated)
		.csr_readdata      (),                                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                             // (terminated)
		.almost_full_data  (),                                                                                 // (terminated)
		.almost_empty_data (),                                                                                 // (terminated)
		.in_empty          (1'b0),                                                                             // (terminated)
		.out_empty         (),                                                                                 // (terminated)
		.in_error          (1'b0),                                                                             // (terminated)
		.out_error         (),                                                                                 // (terminated)
		.in_channel        (1'b0),                                                                             // (terminated)
		.out_channel       ()                                                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vgaclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (sdram_clk_sdram_clk_clk),                                                    //       clk.clk
		.reset             (pio0_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.in_data           (vgaclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (vgaclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (vgaclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (vgaclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (vgaclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (vgaclock_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                      // (terminated)
		.csr_read          (1'b0),                                                                       // (terminated)
		.csr_write         (1'b0),                                                                       // (terminated)
		.csr_readdata      (),                                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                       // (terminated)
		.almost_full_data  (),                                                                           // (terminated)
		.almost_empty_data (),                                                                           // (terminated)
		.in_startofpacket  (1'b0),                                                                       // (terminated)
		.in_endofpacket    (1'b0),                                                                       // (terminated)
		.out_startofpacket (),                                                                           // (terminated)
		.out_endofpacket   (),                                                                           // (terminated)
		.in_empty          (1'b0),                                                                       // (terminated)
		.out_empty         (),                                                                           // (terminated)
		.in_error          (1'b0),                                                                       // (terminated)
		.out_error         (),                                                                           // (terminated)
		.in_channel        (1'b0),                                                                       // (terminated)
		.out_channel       ()                                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_ORI_BURST_SIZE_H      (119),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) vgabinary_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (sdram_clk_sdram_clk_clk),                                                           //             clk.clk
		.reset                   (pio0_reset_reset_bridge_in_reset_reset),                                            //       clk_reset.reset
		.m0_address              (vgabinary_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (vgabinary_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (vgabinary_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (vgabinary_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (vgabinary_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (vgabinary_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (vgabinary_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (vgabinary_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (vgabinary_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (vgabinary_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (vgabinary_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (vgabinary_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (vgabinary_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (vgabinary_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (vgabinary_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (vgabinary_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_013_source0_ready),                                                   //              cp.ready
		.cp_valid                (burst_adapter_013_source0_valid),                                                   //                .valid
		.cp_data                 (burst_adapter_013_source0_data),                                                    //                .data
		.cp_startofpacket        (burst_adapter_013_source0_startofpacket),                                           //                .startofpacket
		.cp_endofpacket          (burst_adapter_013_source0_endofpacket),                                             //                .endofpacket
		.cp_channel              (burst_adapter_013_source0_channel),                                                 //                .channel
		.rf_sink_ready           (vgabinary_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (vgabinary_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (vgabinary_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (vgabinary_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (vgabinary_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (vgabinary_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (vgabinary_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (vgabinary_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (vgabinary_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (vgabinary_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (vgabinary_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (vgabinary_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (vgabinary_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (vgabinary_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (vgabinary_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (vgabinary_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                             //     (terminated)
		.m0_writeresponserequest (),                                                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vgabinary_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (sdram_clk_sdram_clk_clk),                                                           //       clk.clk
		.reset             (pio0_reset_reset_bridge_in_reset_reset),                                            // clk_reset.reset
		.in_data           (vgabinary_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (vgabinary_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (vgabinary_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (vgabinary_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (vgabinary_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (vgabinary_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (vgabinary_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (vgabinary_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (vgabinary_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (vgabinary_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                             // (terminated)
		.csr_read          (1'b0),                                                                              // (terminated)
		.csr_write         (1'b0),                                                                              // (terminated)
		.csr_readdata      (),                                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                              // (terminated)
		.almost_full_data  (),                                                                                  // (terminated)
		.almost_empty_data (),                                                                                  // (terminated)
		.in_empty          (1'b0),                                                                              // (terminated)
		.out_empty         (),                                                                                  // (terminated)
		.in_error          (1'b0),                                                                              // (terminated)
		.out_error         (),                                                                                  // (terminated)
		.in_channel        (1'b0),                                                                              // (terminated)
		.out_channel       ()                                                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vgabinary_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (sdram_clk_sdram_clk_clk),                                                     //       clk.clk
		.reset             (pio0_reset_reset_bridge_in_reset_reset),                                      // clk_reset.reset
		.in_data           (vgabinary_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (vgabinary_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (vgabinary_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (vgabinary_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (vgabinary_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (vgabinary_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                       // (terminated)
		.csr_read          (1'b0),                                                                        // (terminated)
		.csr_write         (1'b0),                                                                        // (terminated)
		.csr_readdata      (),                                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                        // (terminated)
		.almost_full_data  (),                                                                            // (terminated)
		.almost_empty_data (),                                                                            // (terminated)
		.in_startofpacket  (1'b0),                                                                        // (terminated)
		.in_endofpacket    (1'b0),                                                                        // (terminated)
		.out_startofpacket (),                                                                            // (terminated)
		.out_endofpacket   (),                                                                            // (terminated)
		.in_empty          (1'b0),                                                                        // (terminated)
		.out_empty         (),                                                                            // (terminated)
		.in_error          (1'b0),                                                                        // (terminated)
		.out_error         (),                                                                            // (terminated)
		.in_channel        (1'b0),                                                                        // (terminated)
		.out_channel       ()                                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_ORI_BURST_SIZE_H      (119),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) vgaread_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (sdram_clk_sdram_clk_clk),                                                         //             clk.clk
		.reset                   (pio0_reset_reset_bridge_in_reset_reset),                                          //       clk_reset.reset
		.m0_address              (vgaread_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (vgaread_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (vgaread_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (vgaread_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (vgaread_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (vgaread_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (vgaread_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (vgaread_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (vgaread_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (vgaread_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (vgaread_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (vgaread_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (vgaread_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (vgaread_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (vgaread_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (vgaread_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_014_source0_ready),                                                 //              cp.ready
		.cp_valid                (burst_adapter_014_source0_valid),                                                 //                .valid
		.cp_data                 (burst_adapter_014_source0_data),                                                  //                .data
		.cp_startofpacket        (burst_adapter_014_source0_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (burst_adapter_014_source0_endofpacket),                                           //                .endofpacket
		.cp_channel              (burst_adapter_014_source0_channel),                                               //                .channel
		.rf_sink_ready           (vgaread_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (vgaread_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (vgaread_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (vgaread_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (vgaread_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (vgaread_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (vgaread_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (vgaread_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (vgaread_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (vgaread_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (vgaread_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (vgaread_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (vgaread_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (vgaread_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (vgaread_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (vgaread_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                           //     (terminated)
		.m0_writeresponserequest (),                                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vgaread_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (sdram_clk_sdram_clk_clk),                                                         //       clk.clk
		.reset             (pio0_reset_reset_bridge_in_reset_reset),                                          // clk_reset.reset
		.in_data           (vgaread_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (vgaread_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (vgaread_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (vgaread_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (vgaread_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (vgaread_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (vgaread_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (vgaread_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (vgaread_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (vgaread_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                           // (terminated)
		.csr_read          (1'b0),                                                                            // (terminated)
		.csr_write         (1'b0),                                                                            // (terminated)
		.csr_readdata      (),                                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                            // (terminated)
		.almost_full_data  (),                                                                                // (terminated)
		.almost_empty_data (),                                                                                // (terminated)
		.in_empty          (1'b0),                                                                            // (terminated)
		.out_empty         (),                                                                                // (terminated)
		.in_error          (1'b0),                                                                            // (terminated)
		.out_error         (),                                                                                // (terminated)
		.in_channel        (1'b0),                                                                            // (terminated)
		.out_channel       ()                                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vgaread_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (sdram_clk_sdram_clk_clk),                                                   //       clk.clk
		.reset             (pio0_reset_reset_bridge_in_reset_reset),                                    // clk_reset.reset
		.in_data           (vgaread_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (vgaread_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (vgaread_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (vgaread_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (vgaread_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (vgaread_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                     // (terminated)
		.csr_read          (1'b0),                                                                      // (terminated)
		.csr_write         (1'b0),                                                                      // (terminated)
		.csr_readdata      (),                                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                      // (terminated)
		.almost_full_data  (),                                                                          // (terminated)
		.almost_empty_data (),                                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                                      // (terminated)
		.out_startofpacket (),                                                                          // (terminated)
		.out_endofpacket   (),                                                                          // (terminated)
		.in_empty          (1'b0),                                                                      // (terminated)
		.out_empty         (),                                                                          // (terminated)
		.in_error          (1'b0),                                                                      // (terminated)
		.out_error         (),                                                                          // (terminated)
		.in_channel        (1'b0),                                                                      // (terminated)
		.out_channel       ()                                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_ORI_BURST_SIZE_H      (119),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) topedge_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (sdram_clk_sdram_clk_clk),                                                         //             clk.clk
		.reset                   (pio0_reset_reset_bridge_in_reset_reset),                                          //       clk_reset.reset
		.m0_address              (topedge_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (topedge_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (topedge_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (topedge_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (topedge_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (topedge_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (topedge_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (topedge_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (topedge_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (topedge_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (topedge_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (topedge_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (topedge_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (topedge_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (topedge_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (topedge_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_015_source0_ready),                                                 //              cp.ready
		.cp_valid                (burst_adapter_015_source0_valid),                                                 //                .valid
		.cp_data                 (burst_adapter_015_source0_data),                                                  //                .data
		.cp_startofpacket        (burst_adapter_015_source0_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (burst_adapter_015_source0_endofpacket),                                           //                .endofpacket
		.cp_channel              (burst_adapter_015_source0_channel),                                               //                .channel
		.rf_sink_ready           (topedge_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (topedge_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (topedge_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (topedge_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (topedge_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (topedge_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (topedge_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (topedge_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (topedge_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (topedge_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (topedge_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (topedge_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (topedge_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (topedge_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (topedge_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (topedge_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                           //     (terminated)
		.m0_writeresponserequest (),                                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) topedge_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (sdram_clk_sdram_clk_clk),                                                         //       clk.clk
		.reset             (pio0_reset_reset_bridge_in_reset_reset),                                          // clk_reset.reset
		.in_data           (topedge_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (topedge_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (topedge_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (topedge_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (topedge_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (topedge_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (topedge_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (topedge_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (topedge_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (topedge_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                           // (terminated)
		.csr_read          (1'b0),                                                                            // (terminated)
		.csr_write         (1'b0),                                                                            // (terminated)
		.csr_readdata      (),                                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                            // (terminated)
		.almost_full_data  (),                                                                                // (terminated)
		.almost_empty_data (),                                                                                // (terminated)
		.in_empty          (1'b0),                                                                            // (terminated)
		.out_empty         (),                                                                                // (terminated)
		.in_error          (1'b0),                                                                            // (terminated)
		.out_error         (),                                                                                // (terminated)
		.in_channel        (1'b0),                                                                            // (terminated)
		.out_channel       ()                                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) topedge_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (sdram_clk_sdram_clk_clk),                                                   //       clk.clk
		.reset             (pio0_reset_reset_bridge_in_reset_reset),                                    // clk_reset.reset
		.in_data           (topedge_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (topedge_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (topedge_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (topedge_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (topedge_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (topedge_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                     // (terminated)
		.csr_read          (1'b0),                                                                      // (terminated)
		.csr_write         (1'b0),                                                                      // (terminated)
		.csr_readdata      (),                                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                      // (terminated)
		.almost_full_data  (),                                                                          // (terminated)
		.almost_empty_data (),                                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                                      // (terminated)
		.out_startofpacket (),                                                                          // (terminated)
		.out_endofpacket   (),                                                                          // (terminated)
		.in_empty          (1'b0),                                                                      // (terminated)
		.out_empty         (),                                                                          // (terminated)
		.in_error          (1'b0),                                                                      // (terminated)
		.out_error         (),                                                                          // (terminated)
		.in_channel        (1'b0),                                                                      // (terminated)
		.out_channel       ()                                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_ORI_BURST_SIZE_H      (119),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) hwreset_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (sdram_clk_sdram_clk_clk),                                                         //             clk.clk
		.reset                   (pio0_reset_reset_bridge_in_reset_reset),                                          //       clk_reset.reset
		.m0_address              (hwreset_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hwreset_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hwreset_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hwreset_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hwreset_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (hwreset_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hwreset_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hwreset_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (hwreset_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hwreset_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (hwreset_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (hwreset_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hwreset_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (hwreset_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (hwreset_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (hwreset_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_016_source0_ready),                                                 //              cp.ready
		.cp_valid                (burst_adapter_016_source0_valid),                                                 //                .valid
		.cp_data                 (burst_adapter_016_source0_data),                                                  //                .data
		.cp_startofpacket        (burst_adapter_016_source0_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (burst_adapter_016_source0_endofpacket),                                           //                .endofpacket
		.cp_channel              (burst_adapter_016_source0_channel),                                               //                .channel
		.rf_sink_ready           (hwreset_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hwreset_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hwreset_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hwreset_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hwreset_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hwreset_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hwreset_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hwreset_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hwreset_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hwreset_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (hwreset_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (hwreset_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (hwreset_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (hwreset_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hwreset_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hwreset_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                           //     (terminated)
		.m0_writeresponserequest (),                                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hwreset_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (sdram_clk_sdram_clk_clk),                                                         //       clk.clk
		.reset             (pio0_reset_reset_bridge_in_reset_reset),                                          // clk_reset.reset
		.in_data           (hwreset_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (hwreset_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (hwreset_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hwreset_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hwreset_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hwreset_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hwreset_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hwreset_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hwreset_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hwreset_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                           // (terminated)
		.csr_read          (1'b0),                                                                            // (terminated)
		.csr_write         (1'b0),                                                                            // (terminated)
		.csr_readdata      (),                                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                            // (terminated)
		.almost_full_data  (),                                                                                // (terminated)
		.almost_empty_data (),                                                                                // (terminated)
		.in_empty          (1'b0),                                                                            // (terminated)
		.out_empty         (),                                                                                // (terminated)
		.in_error          (1'b0),                                                                            // (terminated)
		.out_error         (),                                                                                // (terminated)
		.in_channel        (1'b0),                                                                            // (terminated)
		.out_channel       ()                                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hwreset_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (sdram_clk_sdram_clk_clk),                                                   //       clk.clk
		.reset             (pio0_reset_reset_bridge_in_reset_reset),                                    // clk_reset.reset
		.in_data           (hwreset_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (hwreset_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (hwreset_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (hwreset_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (hwreset_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (hwreset_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                     // (terminated)
		.csr_read          (1'b0),                                                                      // (terminated)
		.csr_write         (1'b0),                                                                      // (terminated)
		.csr_readdata      (),                                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                      // (terminated)
		.almost_full_data  (),                                                                          // (terminated)
		.almost_empty_data (),                                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                                      // (terminated)
		.out_startofpacket (),                                                                          // (terminated)
		.out_endofpacket   (),                                                                          // (terminated)
		.in_empty          (1'b0),                                                                      // (terminated)
		.out_empty         (),                                                                          // (terminated)
		.in_error          (1'b0),                                                                      // (terminated)
		.out_error         (),                                                                          // (terminated)
		.in_channel        (1'b0),                                                                      // (terminated)
		.out_channel       ()                                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_ORI_BURST_SIZE_H      (119),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) lval_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (sdram_clk_sdram_clk_clk),                                                      //             clk.clk
		.reset                   (pio0_reset_reset_bridge_in_reset_reset),                                       //       clk_reset.reset
		.m0_address              (lval_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (lval_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (lval_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (lval_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (lval_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (lval_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (lval_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (lval_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (lval_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (lval_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (lval_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (lval_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (lval_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (lval_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (lval_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (lval_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_017_source0_ready),                                              //              cp.ready
		.cp_valid                (burst_adapter_017_source0_valid),                                              //                .valid
		.cp_data                 (burst_adapter_017_source0_data),                                               //                .data
		.cp_startofpacket        (burst_adapter_017_source0_startofpacket),                                      //                .startofpacket
		.cp_endofpacket          (burst_adapter_017_source0_endofpacket),                                        //                .endofpacket
		.cp_channel              (burst_adapter_017_source0_channel),                                            //                .channel
		.rf_sink_ready           (lval_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (lval_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (lval_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (lval_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (lval_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (lval_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (lval_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (lval_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (lval_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (lval_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (lval_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (lval_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (lval_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (lval_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (lval_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (lval_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                        //     (terminated)
		.m0_writeresponserequest (),                                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lval_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (sdram_clk_sdram_clk_clk),                                                      //       clk.clk
		.reset             (pio0_reset_reset_bridge_in_reset_reset),                                       // clk_reset.reset
		.in_data           (lval_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (lval_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (lval_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (lval_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (lval_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (lval_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (lval_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (lval_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (lval_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (lval_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                        // (terminated)
		.csr_read          (1'b0),                                                                         // (terminated)
		.csr_write         (1'b0),                                                                         // (terminated)
		.csr_readdata      (),                                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                         // (terminated)
		.almost_full_data  (),                                                                             // (terminated)
		.almost_empty_data (),                                                                             // (terminated)
		.in_empty          (1'b0),                                                                         // (terminated)
		.out_empty         (),                                                                             // (terminated)
		.in_error          (1'b0),                                                                         // (terminated)
		.out_error         (),                                                                             // (terminated)
		.in_channel        (1'b0),                                                                         // (terminated)
		.out_channel       ()                                                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lval_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (sdram_clk_sdram_clk_clk),                                                //       clk.clk
		.reset             (pio0_reset_reset_bridge_in_reset_reset),                                 // clk_reset.reset
		.in_data           (lval_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (lval_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (lval_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (lval_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (lval_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (lval_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                  // (terminated)
		.csr_read          (1'b0),                                                                   // (terminated)
		.csr_write         (1'b0),                                                                   // (terminated)
		.csr_readdata      (),                                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated)
		.almost_full_data  (),                                                                       // (terminated)
		.almost_empty_data (),                                                                       // (terminated)
		.in_startofpacket  (1'b0),                                                                   // (terminated)
		.in_endofpacket    (1'b0),                                                                   // (terminated)
		.out_startofpacket (),                                                                       // (terminated)
		.out_endofpacket   (),                                                                       // (terminated)
		.in_empty          (1'b0),                                                                   // (terminated)
		.out_empty         (),                                                                       // (terminated)
		.in_error          (1'b0),                                                                   // (terminated)
		.out_error         (),                                                                       // (terminated)
		.in_channel        (1'b0),                                                                   // (terminated)
		.out_channel       ()                                                                        // (terminated)
	);

	mysystem_mm_interconnect_1_addr_router addr_router (
		.sink_ready         (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (sdram_clk_sdram_clk_clk),                                                  //       clk.clk
		.reset              (arm_a9_hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (addr_router_src_ready),                                                    //       src.ready
		.src_valid          (addr_router_src_valid),                                                    //          .valid
		.src_data           (addr_router_src_data),                                                     //          .data
		.src_channel        (addr_router_src_channel),                                                  //          .channel
		.src_startofpacket  (addr_router_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket    (addr_router_src_endofpacket)                                               //          .endofpacket
	);

	mysystem_mm_interconnect_1_addr_router addr_router_001 (
		.sink_ready         (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (sdram_clk_sdram_clk_clk),                                                  //       clk.clk
		.reset              (arm_a9_hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (addr_router_001_src_ready),                                                //       src.ready
		.src_valid          (addr_router_001_src_valid),                                                //          .valid
		.src_data           (addr_router_001_src_data),                                                 //          .data
		.src_channel        (addr_router_001_src_channel),                                              //          .channel
		.src_startofpacket  (addr_router_001_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (addr_router_001_src_endofpacket)                                           //          .endofpacket
	);

	mysystem_mm_interconnect_1_id_router id_router (
		.sink_ready         (pio0_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (pio0_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (pio0_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (pio0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (pio0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sdram_clk_sdram_clk_clk),                                            //       clk.clk
		.reset              (pio0_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.src_ready          (id_router_src_ready),                                                //       src.ready
		.src_valid          (id_router_src_valid),                                                //          .valid
		.src_data           (id_router_src_data),                                                 //          .data
		.src_channel        (id_router_src_channel),                                              //          .channel
		.src_startofpacket  (id_router_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (id_router_src_endofpacket)                                           //          .endofpacket
	);

	mysystem_mm_interconnect_1_id_router id_router_001 (
		.sink_ready         (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sdram_clk_sdram_clk_clk),                                                                //       clk.clk
		.reset              (pio0_reset_reset_bridge_in_reset_reset),                                                 // clk_reset.reset
		.src_ready          (id_router_001_src_ready),                                                                //       src.ready
		.src_valid          (id_router_001_src_valid),                                                                //          .valid
		.src_data           (id_router_001_src_data),                                                                 //          .data
		.src_channel        (id_router_001_src_channel),                                                              //          .channel
		.src_startofpacket  (id_router_001_src_startofpacket),                                                        //          .startofpacket
		.src_endofpacket    (id_router_001_src_endofpacket)                                                           //          .endofpacket
	);

	mysystem_mm_interconnect_1_id_router id_router_002 (
		.sink_ready         (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sdram_to_hps_data1_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sdram_clk_sdram_clk_clk),                                                          //       clk.clk
		.reset              (pio0_reset_reset_bridge_in_reset_reset),                                           // clk_reset.reset
		.src_ready          (id_router_002_src_ready),                                                          //       src.ready
		.src_valid          (id_router_002_src_valid),                                                          //          .valid
		.src_data           (id_router_002_src_data),                                                           //          .data
		.src_channel        (id_router_002_src_channel),                                                        //          .channel
		.src_startofpacket  (id_router_002_src_startofpacket),                                                  //          .startofpacket
		.src_endofpacket    (id_router_002_src_endofpacket)                                                     //          .endofpacket
	);

	mysystem_mm_interconnect_1_id_router id_router_003 (
		.sink_ready         (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sdram_to_hps_data2_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sdram_clk_sdram_clk_clk),                                                          //       clk.clk
		.reset              (pio0_reset_reset_bridge_in_reset_reset),                                           // clk_reset.reset
		.src_ready          (id_router_003_src_ready),                                                          //       src.ready
		.src_valid          (id_router_003_src_valid),                                                          //          .valid
		.src_data           (id_router_003_src_data),                                                           //          .data
		.src_channel        (id_router_003_src_channel),                                                        //          .channel
		.src_startofpacket  (id_router_003_src_startofpacket),                                                  //          .startofpacket
		.src_endofpacket    (id_router_003_src_endofpacket)                                                     //          .endofpacket
	);

	mysystem_mm_interconnect_1_id_router id_router_004 (
		.sink_ready         (pio_start_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (pio_start_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (pio_start_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (pio_start_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (pio_start_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sdram_clk_sdram_clk_clk),                                                 //       clk.clk
		.reset              (pio0_reset_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.src_ready          (id_router_004_src_ready),                                                 //       src.ready
		.src_valid          (id_router_004_src_valid),                                                 //          .valid
		.src_data           (id_router_004_src_data),                                                  //          .data
		.src_channel        (id_router_004_src_channel),                                               //          .channel
		.src_startofpacket  (id_router_004_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket    (id_router_004_src_endofpacket)                                            //          .endofpacket
	);

	mysystem_mm_interconnect_1_id_router id_router_005 (
		.sink_ready         (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (hps_vga_data1_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sdram_clk_sdram_clk_clk),                                                     //       clk.clk
		.reset              (pio0_reset_reset_bridge_in_reset_reset),                                      // clk_reset.reset
		.src_ready          (id_router_005_src_ready),                                                     //       src.ready
		.src_valid          (id_router_005_src_valid),                                                     //          .valid
		.src_data           (id_router_005_src_data),                                                      //          .data
		.src_channel        (id_router_005_src_channel),                                                   //          .channel
		.src_startofpacket  (id_router_005_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (id_router_005_src_endofpacket)                                                //          .endofpacket
	);

	mysystem_mm_interconnect_1_id_router id_router_006 (
		.sink_ready         (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (hps_vga_data2_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sdram_clk_sdram_clk_clk),                                                     //       clk.clk
		.reset              (pio0_reset_reset_bridge_in_reset_reset),                                      // clk_reset.reset
		.src_ready          (id_router_006_src_ready),                                                     //       src.ready
		.src_valid          (id_router_006_src_valid),                                                     //          .valid
		.src_data           (id_router_006_src_data),                                                      //          .data
		.src_channel        (id_router_006_src_channel),                                                   //          .channel
		.src_startofpacket  (id_router_006_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (id_router_006_src_endofpacket)                                                //          .endofpacket
	);

	mysystem_mm_interconnect_1_id_router id_router_007 (
		.sink_ready         (sdramclock_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (sdramclock_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (sdramclock_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (sdramclock_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sdramclock_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sdram_clk_sdram_clk_clk),                                                  //       clk.clk
		.reset              (pio0_reset_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.src_ready          (id_router_007_src_ready),                                                  //       src.ready
		.src_valid          (id_router_007_src_valid),                                                  //          .valid
		.src_data           (id_router_007_src_data),                                                   //          .data
		.src_channel        (id_router_007_src_channel),                                                //          .channel
		.src_startofpacket  (id_router_007_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (id_router_007_src_endofpacket)                                             //          .endofpacket
	);

	mysystem_mm_interconnect_1_id_router id_router_008 (
		.sink_ready         (sdram_start_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (sdram_start_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (sdram_start_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (sdram_start_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sdram_start_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sdram_clk_sdram_clk_clk),                                                   //       clk.clk
		.reset              (pio0_reset_reset_bridge_in_reset_reset),                                    // clk_reset.reset
		.src_ready          (id_router_008_src_ready),                                                   //       src.ready
		.src_valid          (id_router_008_src_valid),                                                   //          .valid
		.src_data           (id_router_008_src_data),                                                    //          .data
		.src_channel        (id_router_008_src_channel),                                                 //          .channel
		.src_startofpacket  (id_router_008_src_startofpacket),                                           //          .startofpacket
		.src_endofpacket    (id_router_008_src_endofpacket)                                              //          .endofpacket
	);

	mysystem_mm_interconnect_1_id_router id_router_009 (
		.sink_ready         (fifowe_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (fifowe_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (fifowe_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (fifowe_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (fifowe_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sdram_clk_sdram_clk_clk),                                              //       clk.clk
		.reset              (pio0_reset_reset_bridge_in_reset_reset),                               // clk_reset.reset
		.src_ready          (id_router_009_src_ready),                                              //       src.ready
		.src_valid          (id_router_009_src_valid),                                              //          .valid
		.src_data           (id_router_009_src_data),                                               //          .data
		.src_channel        (id_router_009_src_channel),                                            //          .channel
		.src_startofpacket  (id_router_009_src_startofpacket),                                      //          .startofpacket
		.src_endofpacket    (id_router_009_src_endofpacket)                                         //          .endofpacket
	);

	mysystem_mm_interconnect_1_id_router id_router_010 (
		.sink_ready         (binaryscale_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (binaryscale_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (binaryscale_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (binaryscale_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (binaryscale_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sdram_clk_sdram_clk_clk),                                                   //       clk.clk
		.reset              (pio0_reset_reset_bridge_in_reset_reset),                                    // clk_reset.reset
		.src_ready          (id_router_010_src_ready),                                                   //       src.ready
		.src_valid          (id_router_010_src_valid),                                                   //          .valid
		.src_data           (id_router_010_src_data),                                                    //          .data
		.src_channel        (id_router_010_src_channel),                                                 //          .channel
		.src_startofpacket  (id_router_010_src_startofpacket),                                           //          .startofpacket
		.src_endofpacket    (id_router_010_src_endofpacket)                                              //          .endofpacket
	);

	mysystem_mm_interconnect_1_id_router id_router_011 (
		.sink_ready         (greyparamter_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (greyparamter_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (greyparamter_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (greyparamter_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (greyparamter_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sdram_clk_sdram_clk_clk),                                                    //       clk.clk
		.reset              (pio0_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.src_ready          (id_router_011_src_ready),                                                    //       src.ready
		.src_valid          (id_router_011_src_valid),                                                    //          .valid
		.src_data           (id_router_011_src_data),                                                     //          .data
		.src_channel        (id_router_011_src_channel),                                                  //          .channel
		.src_startofpacket  (id_router_011_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket    (id_router_011_src_endofpacket)                                               //          .endofpacket
	);

	mysystem_mm_interconnect_1_id_router id_router_012 (
		.sink_ready         (vgaclock_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (vgaclock_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (vgaclock_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (vgaclock_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (vgaclock_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sdram_clk_sdram_clk_clk),                                                //       clk.clk
		.reset              (pio0_reset_reset_bridge_in_reset_reset),                                 // clk_reset.reset
		.src_ready          (id_router_012_src_ready),                                                //       src.ready
		.src_valid          (id_router_012_src_valid),                                                //          .valid
		.src_data           (id_router_012_src_data),                                                 //          .data
		.src_channel        (id_router_012_src_channel),                                              //          .channel
		.src_startofpacket  (id_router_012_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (id_router_012_src_endofpacket)                                           //          .endofpacket
	);

	mysystem_mm_interconnect_1_id_router id_router_013 (
		.sink_ready         (vgabinary_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (vgabinary_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (vgabinary_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (vgabinary_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (vgabinary_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sdram_clk_sdram_clk_clk),                                                 //       clk.clk
		.reset              (pio0_reset_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.src_ready          (id_router_013_src_ready),                                                 //       src.ready
		.src_valid          (id_router_013_src_valid),                                                 //          .valid
		.src_data           (id_router_013_src_data),                                                  //          .data
		.src_channel        (id_router_013_src_channel),                                               //          .channel
		.src_startofpacket  (id_router_013_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket    (id_router_013_src_endofpacket)                                            //          .endofpacket
	);

	mysystem_mm_interconnect_1_id_router id_router_014 (
		.sink_ready         (vgaread_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (vgaread_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (vgaread_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (vgaread_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (vgaread_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sdram_clk_sdram_clk_clk),                                               //       clk.clk
		.reset              (pio0_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.src_ready          (id_router_014_src_ready),                                               //       src.ready
		.src_valid          (id_router_014_src_valid),                                               //          .valid
		.src_data           (id_router_014_src_data),                                                //          .data
		.src_channel        (id_router_014_src_channel),                                             //          .channel
		.src_startofpacket  (id_router_014_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket    (id_router_014_src_endofpacket)                                          //          .endofpacket
	);

	mysystem_mm_interconnect_1_id_router id_router_015 (
		.sink_ready         (topedge_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (topedge_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (topedge_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (topedge_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (topedge_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sdram_clk_sdram_clk_clk),                                               //       clk.clk
		.reset              (pio0_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.src_ready          (id_router_015_src_ready),                                               //       src.ready
		.src_valid          (id_router_015_src_valid),                                               //          .valid
		.src_data           (id_router_015_src_data),                                                //          .data
		.src_channel        (id_router_015_src_channel),                                             //          .channel
		.src_startofpacket  (id_router_015_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket    (id_router_015_src_endofpacket)                                          //          .endofpacket
	);

	mysystem_mm_interconnect_1_id_router id_router_016 (
		.sink_ready         (hwreset_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (hwreset_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (hwreset_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (hwreset_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (hwreset_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sdram_clk_sdram_clk_clk),                                               //       clk.clk
		.reset              (pio0_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.src_ready          (id_router_016_src_ready),                                               //       src.ready
		.src_valid          (id_router_016_src_valid),                                               //          .valid
		.src_data           (id_router_016_src_data),                                                //          .data
		.src_channel        (id_router_016_src_channel),                                             //          .channel
		.src_startofpacket  (id_router_016_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket    (id_router_016_src_endofpacket)                                          //          .endofpacket
	);

	mysystem_mm_interconnect_1_id_router id_router_017 (
		.sink_ready         (lval_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (lval_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (lval_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (lval_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (lval_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sdram_clk_sdram_clk_clk),                                            //       clk.clk
		.reset              (pio0_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.src_ready          (id_router_017_src_ready),                                            //       src.ready
		.src_valid          (id_router_017_src_valid),                                            //          .valid
		.src_data           (id_router_017_src_data),                                             //          .data
		.src_channel        (id_router_017_src_channel),                                          //          .channel
		.src_startofpacket  (id_router_017_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (id_router_017_src_endofpacket)                                       //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (18),
		.VALID_WIDTH               (18),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) limiter (
		.clk                    (sdram_clk_sdram_clk_clk),                                                  //       clk.clk
		.reset                  (arm_a9_hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (addr_router_src_ready),                                                    //  cmd_sink.ready
		.cmd_sink_valid         (addr_router_src_valid),                                                    //          .valid
		.cmd_sink_data          (addr_router_src_data),                                                     //          .data
		.cmd_sink_channel       (addr_router_src_channel),                                                  //          .channel
		.cmd_sink_startofpacket (addr_router_src_startofpacket),                                            //          .startofpacket
		.cmd_sink_endofpacket   (addr_router_src_endofpacket),                                              //          .endofpacket
		.cmd_src_ready          (limiter_cmd_src_ready),                                                    //   cmd_src.ready
		.cmd_src_data           (limiter_cmd_src_data),                                                     //          .data
		.cmd_src_channel        (limiter_cmd_src_channel),                                                  //          .channel
		.cmd_src_startofpacket  (limiter_cmd_src_startofpacket),                                            //          .startofpacket
		.cmd_src_endofpacket    (limiter_cmd_src_endofpacket),                                              //          .endofpacket
		.rsp_sink_ready         (rsp_xbar_mux_src_ready),                                                   //  rsp_sink.ready
		.rsp_sink_valid         (rsp_xbar_mux_src_valid),                                                   //          .valid
		.rsp_sink_channel       (rsp_xbar_mux_src_channel),                                                 //          .channel
		.rsp_sink_data          (rsp_xbar_mux_src_data),                                                    //          .data
		.rsp_sink_startofpacket (rsp_xbar_mux_src_startofpacket),                                           //          .startofpacket
		.rsp_sink_endofpacket   (rsp_xbar_mux_src_endofpacket),                                             //          .endofpacket
		.rsp_src_ready          (limiter_rsp_src_ready),                                                    //   rsp_src.ready
		.rsp_src_valid          (limiter_rsp_src_valid),                                                    //          .valid
		.rsp_src_data           (limiter_rsp_src_data),                                                     //          .data
		.rsp_src_channel        (limiter_rsp_src_channel),                                                  //          .channel
		.rsp_src_startofpacket  (limiter_rsp_src_startofpacket),                                            //          .startofpacket
		.rsp_src_endofpacket    (limiter_rsp_src_endofpacket),                                              //          .endofpacket
		.cmd_src_valid          (limiter_cmd_valid_data)                                                    // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (18),
		.VALID_WIDTH               (18),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) limiter_001 (
		.clk                    (sdram_clk_sdram_clk_clk),                                                  //       clk.clk
		.reset                  (arm_a9_hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (addr_router_001_src_ready),                                                //  cmd_sink.ready
		.cmd_sink_valid         (addr_router_001_src_valid),                                                //          .valid
		.cmd_sink_data          (addr_router_001_src_data),                                                 //          .data
		.cmd_sink_channel       (addr_router_001_src_channel),                                              //          .channel
		.cmd_sink_startofpacket (addr_router_001_src_startofpacket),                                        //          .startofpacket
		.cmd_sink_endofpacket   (addr_router_001_src_endofpacket),                                          //          .endofpacket
		.cmd_src_ready          (limiter_001_cmd_src_ready),                                                //   cmd_src.ready
		.cmd_src_data           (limiter_001_cmd_src_data),                                                 //          .data
		.cmd_src_channel        (limiter_001_cmd_src_channel),                                              //          .channel
		.cmd_src_startofpacket  (limiter_001_cmd_src_startofpacket),                                        //          .startofpacket
		.cmd_src_endofpacket    (limiter_001_cmd_src_endofpacket),                                          //          .endofpacket
		.rsp_sink_ready         (rsp_xbar_mux_001_src_ready),                                               //  rsp_sink.ready
		.rsp_sink_valid         (rsp_xbar_mux_001_src_valid),                                               //          .valid
		.rsp_sink_channel       (rsp_xbar_mux_001_src_channel),                                             //          .channel
		.rsp_sink_data          (rsp_xbar_mux_001_src_data),                                                //          .data
		.rsp_sink_startofpacket (rsp_xbar_mux_001_src_startofpacket),                                       //          .startofpacket
		.rsp_sink_endofpacket   (rsp_xbar_mux_001_src_endofpacket),                                         //          .endofpacket
		.rsp_src_ready          (limiter_001_rsp_src_ready),                                                //   rsp_src.ready
		.rsp_src_valid          (limiter_001_rsp_src_valid),                                                //          .valid
		.rsp_src_data           (limiter_001_rsp_src_data),                                                 //          .data
		.rsp_src_channel        (limiter_001_rsp_src_channel),                                              //          .channel
		.rsp_src_startofpacket  (limiter_001_rsp_src_startofpacket),                                        //          .startofpacket
		.rsp_src_endofpacket    (limiter_001_rsp_src_endofpacket),                                          //          .endofpacket
		.cmd_src_valid          (limiter_001_cmd_valid_data)                                                // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (18),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter (
		.clk                   (sdram_clk_sdram_clk_clk),                //       cr0.clk
		.reset                 (pio0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_src_valid),                 //     sink0.valid
		.sink0_data            (cmd_xbar_mux_src_data),                  //          .data
		.sink0_channel         (cmd_xbar_mux_src_channel),               //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_src_startofpacket),         //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_src_endofpacket),           //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_src_ready),                 //          .ready
		.source0_valid         (burst_adapter_source0_valid),            //   source0.valid
		.source0_data          (burst_adapter_source0_data),             //          .data
		.source0_channel       (burst_adapter_source0_channel),          //          .channel
		.source0_startofpacket (burst_adapter_source0_startofpacket),    //          .startofpacket
		.source0_endofpacket   (burst_adapter_source0_endofpacket),      //          .endofpacket
		.source0_ready         (burst_adapter_source0_ready)             //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (18),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_001 (
		.clk                   (sdram_clk_sdram_clk_clk),                 //       cr0.clk
		.reset                 (pio0_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_001_src_valid),              //     sink0.valid
		.sink0_data            (cmd_xbar_mux_001_src_data),               //          .data
		.sink0_channel         (cmd_xbar_mux_001_src_channel),            //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_001_src_startofpacket),      //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_001_src_endofpacket),        //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_001_src_ready),              //          .ready
		.source0_valid         (burst_adapter_001_source0_valid),         //   source0.valid
		.source0_data          (burst_adapter_001_source0_data),          //          .data
		.source0_channel       (burst_adapter_001_source0_channel),       //          .channel
		.source0_startofpacket (burst_adapter_001_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (burst_adapter_001_source0_endofpacket),   //          .endofpacket
		.source0_ready         (burst_adapter_001_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (18),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_002 (
		.clk                   (sdram_clk_sdram_clk_clk),                 //       cr0.clk
		.reset                 (pio0_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_002_src_valid),              //     sink0.valid
		.sink0_data            (cmd_xbar_mux_002_src_data),               //          .data
		.sink0_channel         (cmd_xbar_mux_002_src_channel),            //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_002_src_startofpacket),      //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_002_src_endofpacket),        //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_002_src_ready),              //          .ready
		.source0_valid         (burst_adapter_002_source0_valid),         //   source0.valid
		.source0_data          (burst_adapter_002_source0_data),          //          .data
		.source0_channel       (burst_adapter_002_source0_channel),       //          .channel
		.source0_startofpacket (burst_adapter_002_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (burst_adapter_002_source0_endofpacket),   //          .endofpacket
		.source0_ready         (burst_adapter_002_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (18),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_003 (
		.clk                   (sdram_clk_sdram_clk_clk),                 //       cr0.clk
		.reset                 (pio0_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_003_src_valid),              //     sink0.valid
		.sink0_data            (cmd_xbar_mux_003_src_data),               //          .data
		.sink0_channel         (cmd_xbar_mux_003_src_channel),            //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_003_src_startofpacket),      //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_003_src_endofpacket),        //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_003_src_ready),              //          .ready
		.source0_valid         (burst_adapter_003_source0_valid),         //   source0.valid
		.source0_data          (burst_adapter_003_source0_data),          //          .data
		.source0_channel       (burst_adapter_003_source0_channel),       //          .channel
		.source0_startofpacket (burst_adapter_003_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (burst_adapter_003_source0_endofpacket),   //          .endofpacket
		.source0_ready         (burst_adapter_003_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (18),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_004 (
		.clk                   (sdram_clk_sdram_clk_clk),                 //       cr0.clk
		.reset                 (pio0_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_004_src_valid),              //     sink0.valid
		.sink0_data            (cmd_xbar_mux_004_src_data),               //          .data
		.sink0_channel         (cmd_xbar_mux_004_src_channel),            //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_004_src_startofpacket),      //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_004_src_endofpacket),        //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_004_src_ready),              //          .ready
		.source0_valid         (burst_adapter_004_source0_valid),         //   source0.valid
		.source0_data          (burst_adapter_004_source0_data),          //          .data
		.source0_channel       (burst_adapter_004_source0_channel),       //          .channel
		.source0_startofpacket (burst_adapter_004_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (burst_adapter_004_source0_endofpacket),   //          .endofpacket
		.source0_ready         (burst_adapter_004_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (18),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_005 (
		.clk                   (sdram_clk_sdram_clk_clk),                 //       cr0.clk
		.reset                 (pio0_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_005_src_valid),              //     sink0.valid
		.sink0_data            (cmd_xbar_mux_005_src_data),               //          .data
		.sink0_channel         (cmd_xbar_mux_005_src_channel),            //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_005_src_startofpacket),      //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_005_src_endofpacket),        //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_005_src_ready),              //          .ready
		.source0_valid         (burst_adapter_005_source0_valid),         //   source0.valid
		.source0_data          (burst_adapter_005_source0_data),          //          .data
		.source0_channel       (burst_adapter_005_source0_channel),       //          .channel
		.source0_startofpacket (burst_adapter_005_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (burst_adapter_005_source0_endofpacket),   //          .endofpacket
		.source0_ready         (burst_adapter_005_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (18),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_006 (
		.clk                   (sdram_clk_sdram_clk_clk),                 //       cr0.clk
		.reset                 (pio0_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_006_src_valid),              //     sink0.valid
		.sink0_data            (cmd_xbar_mux_006_src_data),               //          .data
		.sink0_channel         (cmd_xbar_mux_006_src_channel),            //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_006_src_startofpacket),      //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_006_src_endofpacket),        //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_006_src_ready),              //          .ready
		.source0_valid         (burst_adapter_006_source0_valid),         //   source0.valid
		.source0_data          (burst_adapter_006_source0_data),          //          .data
		.source0_channel       (burst_adapter_006_source0_channel),       //          .channel
		.source0_startofpacket (burst_adapter_006_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (burst_adapter_006_source0_endofpacket),   //          .endofpacket
		.source0_ready         (burst_adapter_006_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (18),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_007 (
		.clk                   (sdram_clk_sdram_clk_clk),                 //       cr0.clk
		.reset                 (pio0_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_007_src_valid),              //     sink0.valid
		.sink0_data            (cmd_xbar_mux_007_src_data),               //          .data
		.sink0_channel         (cmd_xbar_mux_007_src_channel),            //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_007_src_startofpacket),      //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_007_src_endofpacket),        //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_007_src_ready),              //          .ready
		.source0_valid         (burst_adapter_007_source0_valid),         //   source0.valid
		.source0_data          (burst_adapter_007_source0_data),          //          .data
		.source0_channel       (burst_adapter_007_source0_channel),       //          .channel
		.source0_startofpacket (burst_adapter_007_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (burst_adapter_007_source0_endofpacket),   //          .endofpacket
		.source0_ready         (burst_adapter_007_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (18),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_008 (
		.clk                   (sdram_clk_sdram_clk_clk),                 //       cr0.clk
		.reset                 (pio0_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_008_src_valid),              //     sink0.valid
		.sink0_data            (cmd_xbar_mux_008_src_data),               //          .data
		.sink0_channel         (cmd_xbar_mux_008_src_channel),            //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_008_src_startofpacket),      //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_008_src_endofpacket),        //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_008_src_ready),              //          .ready
		.source0_valid         (burst_adapter_008_source0_valid),         //   source0.valid
		.source0_data          (burst_adapter_008_source0_data),          //          .data
		.source0_channel       (burst_adapter_008_source0_channel),       //          .channel
		.source0_startofpacket (burst_adapter_008_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (burst_adapter_008_source0_endofpacket),   //          .endofpacket
		.source0_ready         (burst_adapter_008_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (18),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_009 (
		.clk                   (sdram_clk_sdram_clk_clk),                 //       cr0.clk
		.reset                 (pio0_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_009_src_valid),              //     sink0.valid
		.sink0_data            (cmd_xbar_mux_009_src_data),               //          .data
		.sink0_channel         (cmd_xbar_mux_009_src_channel),            //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_009_src_startofpacket),      //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_009_src_endofpacket),        //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_009_src_ready),              //          .ready
		.source0_valid         (burst_adapter_009_source0_valid),         //   source0.valid
		.source0_data          (burst_adapter_009_source0_data),          //          .data
		.source0_channel       (burst_adapter_009_source0_channel),       //          .channel
		.source0_startofpacket (burst_adapter_009_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (burst_adapter_009_source0_endofpacket),   //          .endofpacket
		.source0_ready         (burst_adapter_009_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (18),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_010 (
		.clk                   (sdram_clk_sdram_clk_clk),                 //       cr0.clk
		.reset                 (pio0_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_010_src_valid),              //     sink0.valid
		.sink0_data            (cmd_xbar_mux_010_src_data),               //          .data
		.sink0_channel         (cmd_xbar_mux_010_src_channel),            //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_010_src_startofpacket),      //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_010_src_endofpacket),        //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_010_src_ready),              //          .ready
		.source0_valid         (burst_adapter_010_source0_valid),         //   source0.valid
		.source0_data          (burst_adapter_010_source0_data),          //          .data
		.source0_channel       (burst_adapter_010_source0_channel),       //          .channel
		.source0_startofpacket (burst_adapter_010_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (burst_adapter_010_source0_endofpacket),   //          .endofpacket
		.source0_ready         (burst_adapter_010_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (18),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_011 (
		.clk                   (sdram_clk_sdram_clk_clk),                 //       cr0.clk
		.reset                 (pio0_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_011_src_valid),              //     sink0.valid
		.sink0_data            (cmd_xbar_mux_011_src_data),               //          .data
		.sink0_channel         (cmd_xbar_mux_011_src_channel),            //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_011_src_startofpacket),      //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_011_src_endofpacket),        //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_011_src_ready),              //          .ready
		.source0_valid         (burst_adapter_011_source0_valid),         //   source0.valid
		.source0_data          (burst_adapter_011_source0_data),          //          .data
		.source0_channel       (burst_adapter_011_source0_channel),       //          .channel
		.source0_startofpacket (burst_adapter_011_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (burst_adapter_011_source0_endofpacket),   //          .endofpacket
		.source0_ready         (burst_adapter_011_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (18),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_012 (
		.clk                   (sdram_clk_sdram_clk_clk),                 //       cr0.clk
		.reset                 (pio0_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_012_src_valid),              //     sink0.valid
		.sink0_data            (cmd_xbar_mux_012_src_data),               //          .data
		.sink0_channel         (cmd_xbar_mux_012_src_channel),            //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_012_src_startofpacket),      //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_012_src_endofpacket),        //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_012_src_ready),              //          .ready
		.source0_valid         (burst_adapter_012_source0_valid),         //   source0.valid
		.source0_data          (burst_adapter_012_source0_data),          //          .data
		.source0_channel       (burst_adapter_012_source0_channel),       //          .channel
		.source0_startofpacket (burst_adapter_012_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (burst_adapter_012_source0_endofpacket),   //          .endofpacket
		.source0_ready         (burst_adapter_012_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (18),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_013 (
		.clk                   (sdram_clk_sdram_clk_clk),                 //       cr0.clk
		.reset                 (pio0_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_013_src_valid),              //     sink0.valid
		.sink0_data            (cmd_xbar_mux_013_src_data),               //          .data
		.sink0_channel         (cmd_xbar_mux_013_src_channel),            //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_013_src_startofpacket),      //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_013_src_endofpacket),        //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_013_src_ready),              //          .ready
		.source0_valid         (burst_adapter_013_source0_valid),         //   source0.valid
		.source0_data          (burst_adapter_013_source0_data),          //          .data
		.source0_channel       (burst_adapter_013_source0_channel),       //          .channel
		.source0_startofpacket (burst_adapter_013_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (burst_adapter_013_source0_endofpacket),   //          .endofpacket
		.source0_ready         (burst_adapter_013_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (18),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_014 (
		.clk                   (sdram_clk_sdram_clk_clk),                 //       cr0.clk
		.reset                 (pio0_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_014_src_valid),              //     sink0.valid
		.sink0_data            (cmd_xbar_mux_014_src_data),               //          .data
		.sink0_channel         (cmd_xbar_mux_014_src_channel),            //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_014_src_startofpacket),      //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_014_src_endofpacket),        //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_014_src_ready),              //          .ready
		.source0_valid         (burst_adapter_014_source0_valid),         //   source0.valid
		.source0_data          (burst_adapter_014_source0_data),          //          .data
		.source0_channel       (burst_adapter_014_source0_channel),       //          .channel
		.source0_startofpacket (burst_adapter_014_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (burst_adapter_014_source0_endofpacket),   //          .endofpacket
		.source0_ready         (burst_adapter_014_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (18),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_015 (
		.clk                   (sdram_clk_sdram_clk_clk),                 //       cr0.clk
		.reset                 (pio0_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_015_src_valid),              //     sink0.valid
		.sink0_data            (cmd_xbar_mux_015_src_data),               //          .data
		.sink0_channel         (cmd_xbar_mux_015_src_channel),            //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_015_src_startofpacket),      //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_015_src_endofpacket),        //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_015_src_ready),              //          .ready
		.source0_valid         (burst_adapter_015_source0_valid),         //   source0.valid
		.source0_data          (burst_adapter_015_source0_data),          //          .data
		.source0_channel       (burst_adapter_015_source0_channel),       //          .channel
		.source0_startofpacket (burst_adapter_015_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (burst_adapter_015_source0_endofpacket),   //          .endofpacket
		.source0_ready         (burst_adapter_015_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (18),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_016 (
		.clk                   (sdram_clk_sdram_clk_clk),                 //       cr0.clk
		.reset                 (pio0_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_016_src_valid),              //     sink0.valid
		.sink0_data            (cmd_xbar_mux_016_src_data),               //          .data
		.sink0_channel         (cmd_xbar_mux_016_src_channel),            //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_016_src_startofpacket),      //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_016_src_endofpacket),        //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_016_src_ready),              //          .ready
		.source0_valid         (burst_adapter_016_source0_valid),         //   source0.valid
		.source0_data          (burst_adapter_016_source0_data),          //          .data
		.source0_channel       (burst_adapter_016_source0_channel),       //          .channel
		.source0_startofpacket (burst_adapter_016_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (burst_adapter_016_source0_endofpacket),   //          .endofpacket
		.source0_ready         (burst_adapter_016_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (18),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_017 (
		.clk                   (sdram_clk_sdram_clk_clk),                 //       cr0.clk
		.reset                 (pio0_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_017_src_valid),              //     sink0.valid
		.sink0_data            (cmd_xbar_mux_017_src_data),               //          .data
		.sink0_channel         (cmd_xbar_mux_017_src_channel),            //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_017_src_startofpacket),      //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_017_src_endofpacket),        //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_017_src_ready),              //          .ready
		.source0_valid         (burst_adapter_017_source0_valid),         //   source0.valid
		.source0_data          (burst_adapter_017_source0_data),          //          .data
		.source0_channel       (burst_adapter_017_source0_channel),       //          .channel
		.source0_startofpacket (burst_adapter_017_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (burst_adapter_017_source0_endofpacket),   //          .endofpacket
		.source0_ready         (burst_adapter_017_source0_ready)          //          .ready
	);

	mysystem_mm_interconnect_1_cmd_xbar_demux cmd_xbar_demux (
		.clk                 (sdram_clk_sdram_clk_clk),                                                  //        clk.clk
		.reset               (arm_a9_hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (limiter_cmd_src_ready),                                                    //       sink.ready
		.sink_channel        (limiter_cmd_src_channel),                                                  //           .channel
		.sink_data           (limiter_cmd_src_data),                                                     //           .data
		.sink_startofpacket  (limiter_cmd_src_startofpacket),                                            //           .startofpacket
		.sink_endofpacket    (limiter_cmd_src_endofpacket),                                              //           .endofpacket
		.sink_valid          (limiter_cmd_valid_data),                                                   // sink_valid.data
		.src0_ready          (cmd_xbar_demux_src0_ready),                                                //       src0.ready
		.src0_valid          (cmd_xbar_demux_src0_valid),                                                //           .valid
		.src0_data           (cmd_xbar_demux_src0_data),                                                 //           .data
		.src0_channel        (cmd_xbar_demux_src0_channel),                                              //           .channel
		.src0_startofpacket  (cmd_xbar_demux_src0_startofpacket),                                        //           .startofpacket
		.src0_endofpacket    (cmd_xbar_demux_src0_endofpacket),                                          //           .endofpacket
		.src1_ready          (cmd_xbar_demux_src1_ready),                                                //       src1.ready
		.src1_valid          (cmd_xbar_demux_src1_valid),                                                //           .valid
		.src1_data           (cmd_xbar_demux_src1_data),                                                 //           .data
		.src1_channel        (cmd_xbar_demux_src1_channel),                                              //           .channel
		.src1_startofpacket  (cmd_xbar_demux_src1_startofpacket),                                        //           .startofpacket
		.src1_endofpacket    (cmd_xbar_demux_src1_endofpacket),                                          //           .endofpacket
		.src2_ready          (cmd_xbar_demux_src2_ready),                                                //       src2.ready
		.src2_valid          (cmd_xbar_demux_src2_valid),                                                //           .valid
		.src2_data           (cmd_xbar_demux_src2_data),                                                 //           .data
		.src2_channel        (cmd_xbar_demux_src2_channel),                                              //           .channel
		.src2_startofpacket  (cmd_xbar_demux_src2_startofpacket),                                        //           .startofpacket
		.src2_endofpacket    (cmd_xbar_demux_src2_endofpacket),                                          //           .endofpacket
		.src3_ready          (cmd_xbar_demux_src3_ready),                                                //       src3.ready
		.src3_valid          (cmd_xbar_demux_src3_valid),                                                //           .valid
		.src3_data           (cmd_xbar_demux_src3_data),                                                 //           .data
		.src3_channel        (cmd_xbar_demux_src3_channel),                                              //           .channel
		.src3_startofpacket  (cmd_xbar_demux_src3_startofpacket),                                        //           .startofpacket
		.src3_endofpacket    (cmd_xbar_demux_src3_endofpacket),                                          //           .endofpacket
		.src4_ready          (cmd_xbar_demux_src4_ready),                                                //       src4.ready
		.src4_valid          (cmd_xbar_demux_src4_valid),                                                //           .valid
		.src4_data           (cmd_xbar_demux_src4_data),                                                 //           .data
		.src4_channel        (cmd_xbar_demux_src4_channel),                                              //           .channel
		.src4_startofpacket  (cmd_xbar_demux_src4_startofpacket),                                        //           .startofpacket
		.src4_endofpacket    (cmd_xbar_demux_src4_endofpacket),                                          //           .endofpacket
		.src5_ready          (cmd_xbar_demux_src5_ready),                                                //       src5.ready
		.src5_valid          (cmd_xbar_demux_src5_valid),                                                //           .valid
		.src5_data           (cmd_xbar_demux_src5_data),                                                 //           .data
		.src5_channel        (cmd_xbar_demux_src5_channel),                                              //           .channel
		.src5_startofpacket  (cmd_xbar_demux_src5_startofpacket),                                        //           .startofpacket
		.src5_endofpacket    (cmd_xbar_demux_src5_endofpacket),                                          //           .endofpacket
		.src6_ready          (cmd_xbar_demux_src6_ready),                                                //       src6.ready
		.src6_valid          (cmd_xbar_demux_src6_valid),                                                //           .valid
		.src6_data           (cmd_xbar_demux_src6_data),                                                 //           .data
		.src6_channel        (cmd_xbar_demux_src6_channel),                                              //           .channel
		.src6_startofpacket  (cmd_xbar_demux_src6_startofpacket),                                        //           .startofpacket
		.src6_endofpacket    (cmd_xbar_demux_src6_endofpacket),                                          //           .endofpacket
		.src7_ready          (cmd_xbar_demux_src7_ready),                                                //       src7.ready
		.src7_valid          (cmd_xbar_demux_src7_valid),                                                //           .valid
		.src7_data           (cmd_xbar_demux_src7_data),                                                 //           .data
		.src7_channel        (cmd_xbar_demux_src7_channel),                                              //           .channel
		.src7_startofpacket  (cmd_xbar_demux_src7_startofpacket),                                        //           .startofpacket
		.src7_endofpacket    (cmd_xbar_demux_src7_endofpacket),                                          //           .endofpacket
		.src8_ready          (cmd_xbar_demux_src8_ready),                                                //       src8.ready
		.src8_valid          (cmd_xbar_demux_src8_valid),                                                //           .valid
		.src8_data           (cmd_xbar_demux_src8_data),                                                 //           .data
		.src8_channel        (cmd_xbar_demux_src8_channel),                                              //           .channel
		.src8_startofpacket  (cmd_xbar_demux_src8_startofpacket),                                        //           .startofpacket
		.src8_endofpacket    (cmd_xbar_demux_src8_endofpacket),                                          //           .endofpacket
		.src9_ready          (cmd_xbar_demux_src9_ready),                                                //       src9.ready
		.src9_valid          (cmd_xbar_demux_src9_valid),                                                //           .valid
		.src9_data           (cmd_xbar_demux_src9_data),                                                 //           .data
		.src9_channel        (cmd_xbar_demux_src9_channel),                                              //           .channel
		.src9_startofpacket  (cmd_xbar_demux_src9_startofpacket),                                        //           .startofpacket
		.src9_endofpacket    (cmd_xbar_demux_src9_endofpacket),                                          //           .endofpacket
		.src10_ready         (cmd_xbar_demux_src10_ready),                                               //      src10.ready
		.src10_valid         (cmd_xbar_demux_src10_valid),                                               //           .valid
		.src10_data          (cmd_xbar_demux_src10_data),                                                //           .data
		.src10_channel       (cmd_xbar_demux_src10_channel),                                             //           .channel
		.src10_startofpacket (cmd_xbar_demux_src10_startofpacket),                                       //           .startofpacket
		.src10_endofpacket   (cmd_xbar_demux_src10_endofpacket),                                         //           .endofpacket
		.src11_ready         (cmd_xbar_demux_src11_ready),                                               //      src11.ready
		.src11_valid         (cmd_xbar_demux_src11_valid),                                               //           .valid
		.src11_data          (cmd_xbar_demux_src11_data),                                                //           .data
		.src11_channel       (cmd_xbar_demux_src11_channel),                                             //           .channel
		.src11_startofpacket (cmd_xbar_demux_src11_startofpacket),                                       //           .startofpacket
		.src11_endofpacket   (cmd_xbar_demux_src11_endofpacket),                                         //           .endofpacket
		.src12_ready         (cmd_xbar_demux_src12_ready),                                               //      src12.ready
		.src12_valid         (cmd_xbar_demux_src12_valid),                                               //           .valid
		.src12_data          (cmd_xbar_demux_src12_data),                                                //           .data
		.src12_channel       (cmd_xbar_demux_src12_channel),                                             //           .channel
		.src12_startofpacket (cmd_xbar_demux_src12_startofpacket),                                       //           .startofpacket
		.src12_endofpacket   (cmd_xbar_demux_src12_endofpacket),                                         //           .endofpacket
		.src13_ready         (cmd_xbar_demux_src13_ready),                                               //      src13.ready
		.src13_valid         (cmd_xbar_demux_src13_valid),                                               //           .valid
		.src13_data          (cmd_xbar_demux_src13_data),                                                //           .data
		.src13_channel       (cmd_xbar_demux_src13_channel),                                             //           .channel
		.src13_startofpacket (cmd_xbar_demux_src13_startofpacket),                                       //           .startofpacket
		.src13_endofpacket   (cmd_xbar_demux_src13_endofpacket),                                         //           .endofpacket
		.src14_ready         (cmd_xbar_demux_src14_ready),                                               //      src14.ready
		.src14_valid         (cmd_xbar_demux_src14_valid),                                               //           .valid
		.src14_data          (cmd_xbar_demux_src14_data),                                                //           .data
		.src14_channel       (cmd_xbar_demux_src14_channel),                                             //           .channel
		.src14_startofpacket (cmd_xbar_demux_src14_startofpacket),                                       //           .startofpacket
		.src14_endofpacket   (cmd_xbar_demux_src14_endofpacket),                                         //           .endofpacket
		.src15_ready         (cmd_xbar_demux_src15_ready),                                               //      src15.ready
		.src15_valid         (cmd_xbar_demux_src15_valid),                                               //           .valid
		.src15_data          (cmd_xbar_demux_src15_data),                                                //           .data
		.src15_channel       (cmd_xbar_demux_src15_channel),                                             //           .channel
		.src15_startofpacket (cmd_xbar_demux_src15_startofpacket),                                       //           .startofpacket
		.src15_endofpacket   (cmd_xbar_demux_src15_endofpacket),                                         //           .endofpacket
		.src16_ready         (cmd_xbar_demux_src16_ready),                                               //      src16.ready
		.src16_valid         (cmd_xbar_demux_src16_valid),                                               //           .valid
		.src16_data          (cmd_xbar_demux_src16_data),                                                //           .data
		.src16_channel       (cmd_xbar_demux_src16_channel),                                             //           .channel
		.src16_startofpacket (cmd_xbar_demux_src16_startofpacket),                                       //           .startofpacket
		.src16_endofpacket   (cmd_xbar_demux_src16_endofpacket),                                         //           .endofpacket
		.src17_ready         (cmd_xbar_demux_src17_ready),                                               //      src17.ready
		.src17_valid         (cmd_xbar_demux_src17_valid),                                               //           .valid
		.src17_data          (cmd_xbar_demux_src17_data),                                                //           .data
		.src17_channel       (cmd_xbar_demux_src17_channel),                                             //           .channel
		.src17_startofpacket (cmd_xbar_demux_src17_startofpacket),                                       //           .startofpacket
		.src17_endofpacket   (cmd_xbar_demux_src17_endofpacket)                                          //           .endofpacket
	);

	mysystem_mm_interconnect_1_cmd_xbar_demux cmd_xbar_demux_001 (
		.clk                 (sdram_clk_sdram_clk_clk),                                                  //        clk.clk
		.reset               (arm_a9_hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (limiter_001_cmd_src_ready),                                                //       sink.ready
		.sink_channel        (limiter_001_cmd_src_channel),                                              //           .channel
		.sink_data           (limiter_001_cmd_src_data),                                                 //           .data
		.sink_startofpacket  (limiter_001_cmd_src_startofpacket),                                        //           .startofpacket
		.sink_endofpacket    (limiter_001_cmd_src_endofpacket),                                          //           .endofpacket
		.sink_valid          (limiter_001_cmd_valid_data),                                               // sink_valid.data
		.src0_ready          (cmd_xbar_demux_001_src0_ready),                                            //       src0.ready
		.src0_valid          (cmd_xbar_demux_001_src0_valid),                                            //           .valid
		.src0_data           (cmd_xbar_demux_001_src0_data),                                             //           .data
		.src0_channel        (cmd_xbar_demux_001_src0_channel),                                          //           .channel
		.src0_startofpacket  (cmd_xbar_demux_001_src0_startofpacket),                                    //           .startofpacket
		.src0_endofpacket    (cmd_xbar_demux_001_src0_endofpacket),                                      //           .endofpacket
		.src1_ready          (cmd_xbar_demux_001_src1_ready),                                            //       src1.ready
		.src1_valid          (cmd_xbar_demux_001_src1_valid),                                            //           .valid
		.src1_data           (cmd_xbar_demux_001_src1_data),                                             //           .data
		.src1_channel        (cmd_xbar_demux_001_src1_channel),                                          //           .channel
		.src1_startofpacket  (cmd_xbar_demux_001_src1_startofpacket),                                    //           .startofpacket
		.src1_endofpacket    (cmd_xbar_demux_001_src1_endofpacket),                                      //           .endofpacket
		.src2_ready          (cmd_xbar_demux_001_src2_ready),                                            //       src2.ready
		.src2_valid          (cmd_xbar_demux_001_src2_valid),                                            //           .valid
		.src2_data           (cmd_xbar_demux_001_src2_data),                                             //           .data
		.src2_channel        (cmd_xbar_demux_001_src2_channel),                                          //           .channel
		.src2_startofpacket  (cmd_xbar_demux_001_src2_startofpacket),                                    //           .startofpacket
		.src2_endofpacket    (cmd_xbar_demux_001_src2_endofpacket),                                      //           .endofpacket
		.src3_ready          (cmd_xbar_demux_001_src3_ready),                                            //       src3.ready
		.src3_valid          (cmd_xbar_demux_001_src3_valid),                                            //           .valid
		.src3_data           (cmd_xbar_demux_001_src3_data),                                             //           .data
		.src3_channel        (cmd_xbar_demux_001_src3_channel),                                          //           .channel
		.src3_startofpacket  (cmd_xbar_demux_001_src3_startofpacket),                                    //           .startofpacket
		.src3_endofpacket    (cmd_xbar_demux_001_src3_endofpacket),                                      //           .endofpacket
		.src4_ready          (cmd_xbar_demux_001_src4_ready),                                            //       src4.ready
		.src4_valid          (cmd_xbar_demux_001_src4_valid),                                            //           .valid
		.src4_data           (cmd_xbar_demux_001_src4_data),                                             //           .data
		.src4_channel        (cmd_xbar_demux_001_src4_channel),                                          //           .channel
		.src4_startofpacket  (cmd_xbar_demux_001_src4_startofpacket),                                    //           .startofpacket
		.src4_endofpacket    (cmd_xbar_demux_001_src4_endofpacket),                                      //           .endofpacket
		.src5_ready          (cmd_xbar_demux_001_src5_ready),                                            //       src5.ready
		.src5_valid          (cmd_xbar_demux_001_src5_valid),                                            //           .valid
		.src5_data           (cmd_xbar_demux_001_src5_data),                                             //           .data
		.src5_channel        (cmd_xbar_demux_001_src5_channel),                                          //           .channel
		.src5_startofpacket  (cmd_xbar_demux_001_src5_startofpacket),                                    //           .startofpacket
		.src5_endofpacket    (cmd_xbar_demux_001_src5_endofpacket),                                      //           .endofpacket
		.src6_ready          (cmd_xbar_demux_001_src6_ready),                                            //       src6.ready
		.src6_valid          (cmd_xbar_demux_001_src6_valid),                                            //           .valid
		.src6_data           (cmd_xbar_demux_001_src6_data),                                             //           .data
		.src6_channel        (cmd_xbar_demux_001_src6_channel),                                          //           .channel
		.src6_startofpacket  (cmd_xbar_demux_001_src6_startofpacket),                                    //           .startofpacket
		.src6_endofpacket    (cmd_xbar_demux_001_src6_endofpacket),                                      //           .endofpacket
		.src7_ready          (cmd_xbar_demux_001_src7_ready),                                            //       src7.ready
		.src7_valid          (cmd_xbar_demux_001_src7_valid),                                            //           .valid
		.src7_data           (cmd_xbar_demux_001_src7_data),                                             //           .data
		.src7_channel        (cmd_xbar_demux_001_src7_channel),                                          //           .channel
		.src7_startofpacket  (cmd_xbar_demux_001_src7_startofpacket),                                    //           .startofpacket
		.src7_endofpacket    (cmd_xbar_demux_001_src7_endofpacket),                                      //           .endofpacket
		.src8_ready          (cmd_xbar_demux_001_src8_ready),                                            //       src8.ready
		.src8_valid          (cmd_xbar_demux_001_src8_valid),                                            //           .valid
		.src8_data           (cmd_xbar_demux_001_src8_data),                                             //           .data
		.src8_channel        (cmd_xbar_demux_001_src8_channel),                                          //           .channel
		.src8_startofpacket  (cmd_xbar_demux_001_src8_startofpacket),                                    //           .startofpacket
		.src8_endofpacket    (cmd_xbar_demux_001_src8_endofpacket),                                      //           .endofpacket
		.src9_ready          (cmd_xbar_demux_001_src9_ready),                                            //       src9.ready
		.src9_valid          (cmd_xbar_demux_001_src9_valid),                                            //           .valid
		.src9_data           (cmd_xbar_demux_001_src9_data),                                             //           .data
		.src9_channel        (cmd_xbar_demux_001_src9_channel),                                          //           .channel
		.src9_startofpacket  (cmd_xbar_demux_001_src9_startofpacket),                                    //           .startofpacket
		.src9_endofpacket    (cmd_xbar_demux_001_src9_endofpacket),                                      //           .endofpacket
		.src10_ready         (cmd_xbar_demux_001_src10_ready),                                           //      src10.ready
		.src10_valid         (cmd_xbar_demux_001_src10_valid),                                           //           .valid
		.src10_data          (cmd_xbar_demux_001_src10_data),                                            //           .data
		.src10_channel       (cmd_xbar_demux_001_src10_channel),                                         //           .channel
		.src10_startofpacket (cmd_xbar_demux_001_src10_startofpacket),                                   //           .startofpacket
		.src10_endofpacket   (cmd_xbar_demux_001_src10_endofpacket),                                     //           .endofpacket
		.src11_ready         (cmd_xbar_demux_001_src11_ready),                                           //      src11.ready
		.src11_valid         (cmd_xbar_demux_001_src11_valid),                                           //           .valid
		.src11_data          (cmd_xbar_demux_001_src11_data),                                            //           .data
		.src11_channel       (cmd_xbar_demux_001_src11_channel),                                         //           .channel
		.src11_startofpacket (cmd_xbar_demux_001_src11_startofpacket),                                   //           .startofpacket
		.src11_endofpacket   (cmd_xbar_demux_001_src11_endofpacket),                                     //           .endofpacket
		.src12_ready         (cmd_xbar_demux_001_src12_ready),                                           //      src12.ready
		.src12_valid         (cmd_xbar_demux_001_src12_valid),                                           //           .valid
		.src12_data          (cmd_xbar_demux_001_src12_data),                                            //           .data
		.src12_channel       (cmd_xbar_demux_001_src12_channel),                                         //           .channel
		.src12_startofpacket (cmd_xbar_demux_001_src12_startofpacket),                                   //           .startofpacket
		.src12_endofpacket   (cmd_xbar_demux_001_src12_endofpacket),                                     //           .endofpacket
		.src13_ready         (cmd_xbar_demux_001_src13_ready),                                           //      src13.ready
		.src13_valid         (cmd_xbar_demux_001_src13_valid),                                           //           .valid
		.src13_data          (cmd_xbar_demux_001_src13_data),                                            //           .data
		.src13_channel       (cmd_xbar_demux_001_src13_channel),                                         //           .channel
		.src13_startofpacket (cmd_xbar_demux_001_src13_startofpacket),                                   //           .startofpacket
		.src13_endofpacket   (cmd_xbar_demux_001_src13_endofpacket),                                     //           .endofpacket
		.src14_ready         (cmd_xbar_demux_001_src14_ready),                                           //      src14.ready
		.src14_valid         (cmd_xbar_demux_001_src14_valid),                                           //           .valid
		.src14_data          (cmd_xbar_demux_001_src14_data),                                            //           .data
		.src14_channel       (cmd_xbar_demux_001_src14_channel),                                         //           .channel
		.src14_startofpacket (cmd_xbar_demux_001_src14_startofpacket),                                   //           .startofpacket
		.src14_endofpacket   (cmd_xbar_demux_001_src14_endofpacket),                                     //           .endofpacket
		.src15_ready         (cmd_xbar_demux_001_src15_ready),                                           //      src15.ready
		.src15_valid         (cmd_xbar_demux_001_src15_valid),                                           //           .valid
		.src15_data          (cmd_xbar_demux_001_src15_data),                                            //           .data
		.src15_channel       (cmd_xbar_demux_001_src15_channel),                                         //           .channel
		.src15_startofpacket (cmd_xbar_demux_001_src15_startofpacket),                                   //           .startofpacket
		.src15_endofpacket   (cmd_xbar_demux_001_src15_endofpacket),                                     //           .endofpacket
		.src16_ready         (cmd_xbar_demux_001_src16_ready),                                           //      src16.ready
		.src16_valid         (cmd_xbar_demux_001_src16_valid),                                           //           .valid
		.src16_data          (cmd_xbar_demux_001_src16_data),                                            //           .data
		.src16_channel       (cmd_xbar_demux_001_src16_channel),                                         //           .channel
		.src16_startofpacket (cmd_xbar_demux_001_src16_startofpacket),                                   //           .startofpacket
		.src16_endofpacket   (cmd_xbar_demux_001_src16_endofpacket),                                     //           .endofpacket
		.src17_ready         (cmd_xbar_demux_001_src17_ready),                                           //      src17.ready
		.src17_valid         (cmd_xbar_demux_001_src17_valid),                                           //           .valid
		.src17_data          (cmd_xbar_demux_001_src17_data),                                            //           .data
		.src17_channel       (cmd_xbar_demux_001_src17_channel),                                         //           .channel
		.src17_startofpacket (cmd_xbar_demux_001_src17_startofpacket),                                   //           .startofpacket
		.src17_endofpacket   (cmd_xbar_demux_001_src17_endofpacket)                                      //           .endofpacket
	);

	mysystem_mm_interconnect_1_cmd_xbar_mux cmd_xbar_mux (
		.clk                 (sdram_clk_sdram_clk_clk),                //       clk.clk
		.reset               (pio0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_src_ready),                 //       src.ready
		.src_valid           (cmd_xbar_mux_src_valid),                 //          .valid
		.src_data            (cmd_xbar_mux_src_data),                  //          .data
		.src_channel         (cmd_xbar_mux_src_channel),               //          .channel
		.src_startofpacket   (cmd_xbar_mux_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src0_ready),              //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src0_valid),              //          .valid
		.sink0_channel       (cmd_xbar_demux_src0_channel),            //          .channel
		.sink0_data          (cmd_xbar_demux_src0_data),               //          .data
		.sink0_startofpacket (cmd_xbar_demux_src0_startofpacket),      //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src0_endofpacket),        //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src0_ready),          //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src0_valid),          //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src0_channel),        //          .channel
		.sink1_data          (cmd_xbar_demux_001_src0_data),           //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src0_startofpacket),  //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src0_endofpacket)     //          .endofpacket
	);

	mysystem_mm_interconnect_1_cmd_xbar_mux cmd_xbar_mux_001 (
		.clk                 (sdram_clk_sdram_clk_clk),                //       clk.clk
		.reset               (pio0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_001_src_ready),             //       src.ready
		.src_valid           (cmd_xbar_mux_001_src_valid),             //          .valid
		.src_data            (cmd_xbar_mux_001_src_data),              //          .data
		.src_channel         (cmd_xbar_mux_001_src_channel),           //          .channel
		.src_startofpacket   (cmd_xbar_mux_001_src_startofpacket),     //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_001_src_endofpacket),       //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src1_ready),              //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src1_valid),              //          .valid
		.sink0_channel       (cmd_xbar_demux_src1_channel),            //          .channel
		.sink0_data          (cmd_xbar_demux_src1_data),               //          .data
		.sink0_startofpacket (cmd_xbar_demux_src1_startofpacket),      //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src1_endofpacket),        //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src1_ready),          //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src1_valid),          //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src1_channel),        //          .channel
		.sink1_data          (cmd_xbar_demux_001_src1_data),           //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src1_startofpacket),  //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src1_endofpacket)     //          .endofpacket
	);

	mysystem_mm_interconnect_1_cmd_xbar_mux cmd_xbar_mux_002 (
		.clk                 (sdram_clk_sdram_clk_clk),                //       clk.clk
		.reset               (pio0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_002_src_ready),             //       src.ready
		.src_valid           (cmd_xbar_mux_002_src_valid),             //          .valid
		.src_data            (cmd_xbar_mux_002_src_data),              //          .data
		.src_channel         (cmd_xbar_mux_002_src_channel),           //          .channel
		.src_startofpacket   (cmd_xbar_mux_002_src_startofpacket),     //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_002_src_endofpacket),       //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src2_ready),              //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src2_valid),              //          .valid
		.sink0_channel       (cmd_xbar_demux_src2_channel),            //          .channel
		.sink0_data          (cmd_xbar_demux_src2_data),               //          .data
		.sink0_startofpacket (cmd_xbar_demux_src2_startofpacket),      //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src2_endofpacket),        //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src2_ready),          //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src2_valid),          //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src2_channel),        //          .channel
		.sink1_data          (cmd_xbar_demux_001_src2_data),           //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src2_startofpacket),  //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src2_endofpacket)     //          .endofpacket
	);

	mysystem_mm_interconnect_1_cmd_xbar_mux cmd_xbar_mux_003 (
		.clk                 (sdram_clk_sdram_clk_clk),                //       clk.clk
		.reset               (pio0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_003_src_ready),             //       src.ready
		.src_valid           (cmd_xbar_mux_003_src_valid),             //          .valid
		.src_data            (cmd_xbar_mux_003_src_data),              //          .data
		.src_channel         (cmd_xbar_mux_003_src_channel),           //          .channel
		.src_startofpacket   (cmd_xbar_mux_003_src_startofpacket),     //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_003_src_endofpacket),       //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src3_ready),              //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src3_valid),              //          .valid
		.sink0_channel       (cmd_xbar_demux_src3_channel),            //          .channel
		.sink0_data          (cmd_xbar_demux_src3_data),               //          .data
		.sink0_startofpacket (cmd_xbar_demux_src3_startofpacket),      //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src3_endofpacket),        //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src3_ready),          //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src3_valid),          //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src3_channel),        //          .channel
		.sink1_data          (cmd_xbar_demux_001_src3_data),           //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src3_startofpacket),  //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src3_endofpacket)     //          .endofpacket
	);

	mysystem_mm_interconnect_1_cmd_xbar_mux cmd_xbar_mux_004 (
		.clk                 (sdram_clk_sdram_clk_clk),                //       clk.clk
		.reset               (pio0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_004_src_ready),             //       src.ready
		.src_valid           (cmd_xbar_mux_004_src_valid),             //          .valid
		.src_data            (cmd_xbar_mux_004_src_data),              //          .data
		.src_channel         (cmd_xbar_mux_004_src_channel),           //          .channel
		.src_startofpacket   (cmd_xbar_mux_004_src_startofpacket),     //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_004_src_endofpacket),       //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src4_ready),              //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src4_valid),              //          .valid
		.sink0_channel       (cmd_xbar_demux_src4_channel),            //          .channel
		.sink0_data          (cmd_xbar_demux_src4_data),               //          .data
		.sink0_startofpacket (cmd_xbar_demux_src4_startofpacket),      //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src4_endofpacket),        //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src4_ready),          //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src4_valid),          //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src4_channel),        //          .channel
		.sink1_data          (cmd_xbar_demux_001_src4_data),           //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src4_startofpacket),  //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src4_endofpacket)     //          .endofpacket
	);

	mysystem_mm_interconnect_1_cmd_xbar_mux cmd_xbar_mux_005 (
		.clk                 (sdram_clk_sdram_clk_clk),                //       clk.clk
		.reset               (pio0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_005_src_ready),             //       src.ready
		.src_valid           (cmd_xbar_mux_005_src_valid),             //          .valid
		.src_data            (cmd_xbar_mux_005_src_data),              //          .data
		.src_channel         (cmd_xbar_mux_005_src_channel),           //          .channel
		.src_startofpacket   (cmd_xbar_mux_005_src_startofpacket),     //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_005_src_endofpacket),       //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src5_ready),              //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src5_valid),              //          .valid
		.sink0_channel       (cmd_xbar_demux_src5_channel),            //          .channel
		.sink0_data          (cmd_xbar_demux_src5_data),               //          .data
		.sink0_startofpacket (cmd_xbar_demux_src5_startofpacket),      //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src5_endofpacket),        //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src5_ready),          //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src5_valid),          //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src5_channel),        //          .channel
		.sink1_data          (cmd_xbar_demux_001_src5_data),           //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src5_startofpacket),  //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src5_endofpacket)     //          .endofpacket
	);

	mysystem_mm_interconnect_1_cmd_xbar_mux cmd_xbar_mux_006 (
		.clk                 (sdram_clk_sdram_clk_clk),                //       clk.clk
		.reset               (pio0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_006_src_ready),             //       src.ready
		.src_valid           (cmd_xbar_mux_006_src_valid),             //          .valid
		.src_data            (cmd_xbar_mux_006_src_data),              //          .data
		.src_channel         (cmd_xbar_mux_006_src_channel),           //          .channel
		.src_startofpacket   (cmd_xbar_mux_006_src_startofpacket),     //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_006_src_endofpacket),       //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src6_ready),              //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src6_valid),              //          .valid
		.sink0_channel       (cmd_xbar_demux_src6_channel),            //          .channel
		.sink0_data          (cmd_xbar_demux_src6_data),               //          .data
		.sink0_startofpacket (cmd_xbar_demux_src6_startofpacket),      //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src6_endofpacket),        //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src6_ready),          //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src6_valid),          //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src6_channel),        //          .channel
		.sink1_data          (cmd_xbar_demux_001_src6_data),           //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src6_startofpacket),  //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src6_endofpacket)     //          .endofpacket
	);

	mysystem_mm_interconnect_1_cmd_xbar_mux cmd_xbar_mux_007 (
		.clk                 (sdram_clk_sdram_clk_clk),                //       clk.clk
		.reset               (pio0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_007_src_ready),             //       src.ready
		.src_valid           (cmd_xbar_mux_007_src_valid),             //          .valid
		.src_data            (cmd_xbar_mux_007_src_data),              //          .data
		.src_channel         (cmd_xbar_mux_007_src_channel),           //          .channel
		.src_startofpacket   (cmd_xbar_mux_007_src_startofpacket),     //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_007_src_endofpacket),       //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src7_ready),              //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src7_valid),              //          .valid
		.sink0_channel       (cmd_xbar_demux_src7_channel),            //          .channel
		.sink0_data          (cmd_xbar_demux_src7_data),               //          .data
		.sink0_startofpacket (cmd_xbar_demux_src7_startofpacket),      //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src7_endofpacket),        //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src7_ready),          //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src7_valid),          //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src7_channel),        //          .channel
		.sink1_data          (cmd_xbar_demux_001_src7_data),           //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src7_startofpacket),  //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src7_endofpacket)     //          .endofpacket
	);

	mysystem_mm_interconnect_1_cmd_xbar_mux cmd_xbar_mux_008 (
		.clk                 (sdram_clk_sdram_clk_clk),                //       clk.clk
		.reset               (pio0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_008_src_ready),             //       src.ready
		.src_valid           (cmd_xbar_mux_008_src_valid),             //          .valid
		.src_data            (cmd_xbar_mux_008_src_data),              //          .data
		.src_channel         (cmd_xbar_mux_008_src_channel),           //          .channel
		.src_startofpacket   (cmd_xbar_mux_008_src_startofpacket),     //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_008_src_endofpacket),       //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src8_ready),              //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src8_valid),              //          .valid
		.sink0_channel       (cmd_xbar_demux_src8_channel),            //          .channel
		.sink0_data          (cmd_xbar_demux_src8_data),               //          .data
		.sink0_startofpacket (cmd_xbar_demux_src8_startofpacket),      //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src8_endofpacket),        //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src8_ready),          //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src8_valid),          //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src8_channel),        //          .channel
		.sink1_data          (cmd_xbar_demux_001_src8_data),           //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src8_startofpacket),  //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src8_endofpacket)     //          .endofpacket
	);

	mysystem_mm_interconnect_1_cmd_xbar_mux cmd_xbar_mux_009 (
		.clk                 (sdram_clk_sdram_clk_clk),                //       clk.clk
		.reset               (pio0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_009_src_ready),             //       src.ready
		.src_valid           (cmd_xbar_mux_009_src_valid),             //          .valid
		.src_data            (cmd_xbar_mux_009_src_data),              //          .data
		.src_channel         (cmd_xbar_mux_009_src_channel),           //          .channel
		.src_startofpacket   (cmd_xbar_mux_009_src_startofpacket),     //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_009_src_endofpacket),       //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src9_ready),              //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src9_valid),              //          .valid
		.sink0_channel       (cmd_xbar_demux_src9_channel),            //          .channel
		.sink0_data          (cmd_xbar_demux_src9_data),               //          .data
		.sink0_startofpacket (cmd_xbar_demux_src9_startofpacket),      //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src9_endofpacket),        //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src9_ready),          //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src9_valid),          //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src9_channel),        //          .channel
		.sink1_data          (cmd_xbar_demux_001_src9_data),           //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src9_startofpacket),  //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src9_endofpacket)     //          .endofpacket
	);

	mysystem_mm_interconnect_1_cmd_xbar_mux cmd_xbar_mux_010 (
		.clk                 (sdram_clk_sdram_clk_clk),                //       clk.clk
		.reset               (pio0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_010_src_ready),             //       src.ready
		.src_valid           (cmd_xbar_mux_010_src_valid),             //          .valid
		.src_data            (cmd_xbar_mux_010_src_data),              //          .data
		.src_channel         (cmd_xbar_mux_010_src_channel),           //          .channel
		.src_startofpacket   (cmd_xbar_mux_010_src_startofpacket),     //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_010_src_endofpacket),       //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src10_ready),             //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src10_valid),             //          .valid
		.sink0_channel       (cmd_xbar_demux_src10_channel),           //          .channel
		.sink0_data          (cmd_xbar_demux_src10_data),              //          .data
		.sink0_startofpacket (cmd_xbar_demux_src10_startofpacket),     //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src10_endofpacket),       //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src10_ready),         //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src10_valid),         //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src10_channel),       //          .channel
		.sink1_data          (cmd_xbar_demux_001_src10_data),          //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src10_startofpacket), //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src10_endofpacket)    //          .endofpacket
	);

	mysystem_mm_interconnect_1_cmd_xbar_mux cmd_xbar_mux_011 (
		.clk                 (sdram_clk_sdram_clk_clk),                //       clk.clk
		.reset               (pio0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_011_src_ready),             //       src.ready
		.src_valid           (cmd_xbar_mux_011_src_valid),             //          .valid
		.src_data            (cmd_xbar_mux_011_src_data),              //          .data
		.src_channel         (cmd_xbar_mux_011_src_channel),           //          .channel
		.src_startofpacket   (cmd_xbar_mux_011_src_startofpacket),     //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_011_src_endofpacket),       //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src11_ready),             //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src11_valid),             //          .valid
		.sink0_channel       (cmd_xbar_demux_src11_channel),           //          .channel
		.sink0_data          (cmd_xbar_demux_src11_data),              //          .data
		.sink0_startofpacket (cmd_xbar_demux_src11_startofpacket),     //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src11_endofpacket),       //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src11_ready),         //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src11_valid),         //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src11_channel),       //          .channel
		.sink1_data          (cmd_xbar_demux_001_src11_data),          //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src11_startofpacket), //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src11_endofpacket)    //          .endofpacket
	);

	mysystem_mm_interconnect_1_cmd_xbar_mux cmd_xbar_mux_012 (
		.clk                 (sdram_clk_sdram_clk_clk),                //       clk.clk
		.reset               (pio0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_012_src_ready),             //       src.ready
		.src_valid           (cmd_xbar_mux_012_src_valid),             //          .valid
		.src_data            (cmd_xbar_mux_012_src_data),              //          .data
		.src_channel         (cmd_xbar_mux_012_src_channel),           //          .channel
		.src_startofpacket   (cmd_xbar_mux_012_src_startofpacket),     //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_012_src_endofpacket),       //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src12_ready),             //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src12_valid),             //          .valid
		.sink0_channel       (cmd_xbar_demux_src12_channel),           //          .channel
		.sink0_data          (cmd_xbar_demux_src12_data),              //          .data
		.sink0_startofpacket (cmd_xbar_demux_src12_startofpacket),     //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src12_endofpacket),       //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src12_ready),         //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src12_valid),         //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src12_channel),       //          .channel
		.sink1_data          (cmd_xbar_demux_001_src12_data),          //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src12_startofpacket), //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src12_endofpacket)    //          .endofpacket
	);

	mysystem_mm_interconnect_1_cmd_xbar_mux cmd_xbar_mux_013 (
		.clk                 (sdram_clk_sdram_clk_clk),                //       clk.clk
		.reset               (pio0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_013_src_ready),             //       src.ready
		.src_valid           (cmd_xbar_mux_013_src_valid),             //          .valid
		.src_data            (cmd_xbar_mux_013_src_data),              //          .data
		.src_channel         (cmd_xbar_mux_013_src_channel),           //          .channel
		.src_startofpacket   (cmd_xbar_mux_013_src_startofpacket),     //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_013_src_endofpacket),       //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src13_ready),             //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src13_valid),             //          .valid
		.sink0_channel       (cmd_xbar_demux_src13_channel),           //          .channel
		.sink0_data          (cmd_xbar_demux_src13_data),              //          .data
		.sink0_startofpacket (cmd_xbar_demux_src13_startofpacket),     //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src13_endofpacket),       //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src13_ready),         //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src13_valid),         //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src13_channel),       //          .channel
		.sink1_data          (cmd_xbar_demux_001_src13_data),          //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src13_startofpacket), //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src13_endofpacket)    //          .endofpacket
	);

	mysystem_mm_interconnect_1_cmd_xbar_mux cmd_xbar_mux_014 (
		.clk                 (sdram_clk_sdram_clk_clk),                //       clk.clk
		.reset               (pio0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_014_src_ready),             //       src.ready
		.src_valid           (cmd_xbar_mux_014_src_valid),             //          .valid
		.src_data            (cmd_xbar_mux_014_src_data),              //          .data
		.src_channel         (cmd_xbar_mux_014_src_channel),           //          .channel
		.src_startofpacket   (cmd_xbar_mux_014_src_startofpacket),     //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_014_src_endofpacket),       //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src14_ready),             //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src14_valid),             //          .valid
		.sink0_channel       (cmd_xbar_demux_src14_channel),           //          .channel
		.sink0_data          (cmd_xbar_demux_src14_data),              //          .data
		.sink0_startofpacket (cmd_xbar_demux_src14_startofpacket),     //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src14_endofpacket),       //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src14_ready),         //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src14_valid),         //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src14_channel),       //          .channel
		.sink1_data          (cmd_xbar_demux_001_src14_data),          //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src14_startofpacket), //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src14_endofpacket)    //          .endofpacket
	);

	mysystem_mm_interconnect_1_cmd_xbar_mux cmd_xbar_mux_015 (
		.clk                 (sdram_clk_sdram_clk_clk),                //       clk.clk
		.reset               (pio0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_015_src_ready),             //       src.ready
		.src_valid           (cmd_xbar_mux_015_src_valid),             //          .valid
		.src_data            (cmd_xbar_mux_015_src_data),              //          .data
		.src_channel         (cmd_xbar_mux_015_src_channel),           //          .channel
		.src_startofpacket   (cmd_xbar_mux_015_src_startofpacket),     //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_015_src_endofpacket),       //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src15_ready),             //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src15_valid),             //          .valid
		.sink0_channel       (cmd_xbar_demux_src15_channel),           //          .channel
		.sink0_data          (cmd_xbar_demux_src15_data),              //          .data
		.sink0_startofpacket (cmd_xbar_demux_src15_startofpacket),     //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src15_endofpacket),       //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src15_ready),         //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src15_valid),         //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src15_channel),       //          .channel
		.sink1_data          (cmd_xbar_demux_001_src15_data),          //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src15_startofpacket), //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src15_endofpacket)    //          .endofpacket
	);

	mysystem_mm_interconnect_1_cmd_xbar_mux cmd_xbar_mux_016 (
		.clk                 (sdram_clk_sdram_clk_clk),                //       clk.clk
		.reset               (pio0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_016_src_ready),             //       src.ready
		.src_valid           (cmd_xbar_mux_016_src_valid),             //          .valid
		.src_data            (cmd_xbar_mux_016_src_data),              //          .data
		.src_channel         (cmd_xbar_mux_016_src_channel),           //          .channel
		.src_startofpacket   (cmd_xbar_mux_016_src_startofpacket),     //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_016_src_endofpacket),       //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src16_ready),             //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src16_valid),             //          .valid
		.sink0_channel       (cmd_xbar_demux_src16_channel),           //          .channel
		.sink0_data          (cmd_xbar_demux_src16_data),              //          .data
		.sink0_startofpacket (cmd_xbar_demux_src16_startofpacket),     //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src16_endofpacket),       //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src16_ready),         //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src16_valid),         //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src16_channel),       //          .channel
		.sink1_data          (cmd_xbar_demux_001_src16_data),          //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src16_startofpacket), //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src16_endofpacket)    //          .endofpacket
	);

	mysystem_mm_interconnect_1_cmd_xbar_mux cmd_xbar_mux_017 (
		.clk                 (sdram_clk_sdram_clk_clk),                //       clk.clk
		.reset               (pio0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_017_src_ready),             //       src.ready
		.src_valid           (cmd_xbar_mux_017_src_valid),             //          .valid
		.src_data            (cmd_xbar_mux_017_src_data),              //          .data
		.src_channel         (cmd_xbar_mux_017_src_channel),           //          .channel
		.src_startofpacket   (cmd_xbar_mux_017_src_startofpacket),     //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_017_src_endofpacket),       //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src17_ready),             //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src17_valid),             //          .valid
		.sink0_channel       (cmd_xbar_demux_src17_channel),           //          .channel
		.sink0_data          (cmd_xbar_demux_src17_data),              //          .data
		.sink0_startofpacket (cmd_xbar_demux_src17_startofpacket),     //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src17_endofpacket),       //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src17_ready),         //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src17_valid),         //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src17_channel),       //          .channel
		.sink1_data          (cmd_xbar_demux_001_src17_data),          //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src17_startofpacket), //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src17_endofpacket)    //          .endofpacket
	);

	mysystem_mm_interconnect_1_rsp_xbar_demux rsp_xbar_demux (
		.clk                (sdram_clk_sdram_clk_clk),                //       clk.clk
		.reset              (pio0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_src_ready),                    //      sink.ready
		.sink_channel       (id_router_src_channel),                  //          .channel
		.sink_data          (id_router_src_data),                     //          .data
		.sink_startofpacket (id_router_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (id_router_src_endofpacket),              //          .endofpacket
		.sink_valid         (id_router_src_valid),                    //          .valid
		.src0_ready         (rsp_xbar_demux_src0_ready),              //      src0.ready
		.src0_valid         (rsp_xbar_demux_src0_valid),              //          .valid
		.src0_data          (rsp_xbar_demux_src0_data),               //          .data
		.src0_channel       (rsp_xbar_demux_src0_channel),            //          .channel
		.src0_startofpacket (rsp_xbar_demux_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_src0_endofpacket),        //          .endofpacket
		.src1_ready         (rsp_xbar_demux_src1_ready),              //      src1.ready
		.src1_valid         (rsp_xbar_demux_src1_valid),              //          .valid
		.src1_data          (rsp_xbar_demux_src1_data),               //          .data
		.src1_channel       (rsp_xbar_demux_src1_channel),            //          .channel
		.src1_startofpacket (rsp_xbar_demux_src1_startofpacket),      //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_src1_endofpacket)         //          .endofpacket
	);

	mysystem_mm_interconnect_1_rsp_xbar_demux rsp_xbar_demux_001 (
		.clk                (sdram_clk_sdram_clk_clk),                //       clk.clk
		.reset              (pio0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_001_src_ready),                //      sink.ready
		.sink_channel       (id_router_001_src_channel),              //          .channel
		.sink_data          (id_router_001_src_data),                 //          .data
		.sink_startofpacket (id_router_001_src_startofpacket),        //          .startofpacket
		.sink_endofpacket   (id_router_001_src_endofpacket),          //          .endofpacket
		.sink_valid         (id_router_001_src_valid),                //          .valid
		.src0_ready         (rsp_xbar_demux_001_src0_ready),          //      src0.ready
		.src0_valid         (rsp_xbar_demux_001_src0_valid),          //          .valid
		.src0_data          (rsp_xbar_demux_001_src0_data),           //          .data
		.src0_channel       (rsp_xbar_demux_001_src0_channel),        //          .channel
		.src0_startofpacket (rsp_xbar_demux_001_src0_startofpacket),  //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_001_src0_endofpacket),    //          .endofpacket
		.src1_ready         (rsp_xbar_demux_001_src1_ready),          //      src1.ready
		.src1_valid         (rsp_xbar_demux_001_src1_valid),          //          .valid
		.src1_data          (rsp_xbar_demux_001_src1_data),           //          .data
		.src1_channel       (rsp_xbar_demux_001_src1_channel),        //          .channel
		.src1_startofpacket (rsp_xbar_demux_001_src1_startofpacket),  //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_001_src1_endofpacket)     //          .endofpacket
	);

	mysystem_mm_interconnect_1_rsp_xbar_demux rsp_xbar_demux_002 (
		.clk                (sdram_clk_sdram_clk_clk),                //       clk.clk
		.reset              (pio0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_002_src_ready),                //      sink.ready
		.sink_channel       (id_router_002_src_channel),              //          .channel
		.sink_data          (id_router_002_src_data),                 //          .data
		.sink_startofpacket (id_router_002_src_startofpacket),        //          .startofpacket
		.sink_endofpacket   (id_router_002_src_endofpacket),          //          .endofpacket
		.sink_valid         (id_router_002_src_valid),                //          .valid
		.src0_ready         (rsp_xbar_demux_002_src0_ready),          //      src0.ready
		.src0_valid         (rsp_xbar_demux_002_src0_valid),          //          .valid
		.src0_data          (rsp_xbar_demux_002_src0_data),           //          .data
		.src0_channel       (rsp_xbar_demux_002_src0_channel),        //          .channel
		.src0_startofpacket (rsp_xbar_demux_002_src0_startofpacket),  //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_002_src0_endofpacket),    //          .endofpacket
		.src1_ready         (rsp_xbar_demux_002_src1_ready),          //      src1.ready
		.src1_valid         (rsp_xbar_demux_002_src1_valid),          //          .valid
		.src1_data          (rsp_xbar_demux_002_src1_data),           //          .data
		.src1_channel       (rsp_xbar_demux_002_src1_channel),        //          .channel
		.src1_startofpacket (rsp_xbar_demux_002_src1_startofpacket),  //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_002_src1_endofpacket)     //          .endofpacket
	);

	mysystem_mm_interconnect_1_rsp_xbar_demux rsp_xbar_demux_003 (
		.clk                (sdram_clk_sdram_clk_clk),                //       clk.clk
		.reset              (pio0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_003_src_ready),                //      sink.ready
		.sink_channel       (id_router_003_src_channel),              //          .channel
		.sink_data          (id_router_003_src_data),                 //          .data
		.sink_startofpacket (id_router_003_src_startofpacket),        //          .startofpacket
		.sink_endofpacket   (id_router_003_src_endofpacket),          //          .endofpacket
		.sink_valid         (id_router_003_src_valid),                //          .valid
		.src0_ready         (rsp_xbar_demux_003_src0_ready),          //      src0.ready
		.src0_valid         (rsp_xbar_demux_003_src0_valid),          //          .valid
		.src0_data          (rsp_xbar_demux_003_src0_data),           //          .data
		.src0_channel       (rsp_xbar_demux_003_src0_channel),        //          .channel
		.src0_startofpacket (rsp_xbar_demux_003_src0_startofpacket),  //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_003_src0_endofpacket),    //          .endofpacket
		.src1_ready         (rsp_xbar_demux_003_src1_ready),          //      src1.ready
		.src1_valid         (rsp_xbar_demux_003_src1_valid),          //          .valid
		.src1_data          (rsp_xbar_demux_003_src1_data),           //          .data
		.src1_channel       (rsp_xbar_demux_003_src1_channel),        //          .channel
		.src1_startofpacket (rsp_xbar_demux_003_src1_startofpacket),  //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_003_src1_endofpacket)     //          .endofpacket
	);

	mysystem_mm_interconnect_1_rsp_xbar_demux rsp_xbar_demux_004 (
		.clk                (sdram_clk_sdram_clk_clk),                //       clk.clk
		.reset              (pio0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_004_src_ready),                //      sink.ready
		.sink_channel       (id_router_004_src_channel),              //          .channel
		.sink_data          (id_router_004_src_data),                 //          .data
		.sink_startofpacket (id_router_004_src_startofpacket),        //          .startofpacket
		.sink_endofpacket   (id_router_004_src_endofpacket),          //          .endofpacket
		.sink_valid         (id_router_004_src_valid),                //          .valid
		.src0_ready         (rsp_xbar_demux_004_src0_ready),          //      src0.ready
		.src0_valid         (rsp_xbar_demux_004_src0_valid),          //          .valid
		.src0_data          (rsp_xbar_demux_004_src0_data),           //          .data
		.src0_channel       (rsp_xbar_demux_004_src0_channel),        //          .channel
		.src0_startofpacket (rsp_xbar_demux_004_src0_startofpacket),  //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_004_src0_endofpacket),    //          .endofpacket
		.src1_ready         (rsp_xbar_demux_004_src1_ready),          //      src1.ready
		.src1_valid         (rsp_xbar_demux_004_src1_valid),          //          .valid
		.src1_data          (rsp_xbar_demux_004_src1_data),           //          .data
		.src1_channel       (rsp_xbar_demux_004_src1_channel),        //          .channel
		.src1_startofpacket (rsp_xbar_demux_004_src1_startofpacket),  //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_004_src1_endofpacket)     //          .endofpacket
	);

	mysystem_mm_interconnect_1_rsp_xbar_demux rsp_xbar_demux_005 (
		.clk                (sdram_clk_sdram_clk_clk),                //       clk.clk
		.reset              (pio0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_005_src_ready),                //      sink.ready
		.sink_channel       (id_router_005_src_channel),              //          .channel
		.sink_data          (id_router_005_src_data),                 //          .data
		.sink_startofpacket (id_router_005_src_startofpacket),        //          .startofpacket
		.sink_endofpacket   (id_router_005_src_endofpacket),          //          .endofpacket
		.sink_valid         (id_router_005_src_valid),                //          .valid
		.src0_ready         (rsp_xbar_demux_005_src0_ready),          //      src0.ready
		.src0_valid         (rsp_xbar_demux_005_src0_valid),          //          .valid
		.src0_data          (rsp_xbar_demux_005_src0_data),           //          .data
		.src0_channel       (rsp_xbar_demux_005_src0_channel),        //          .channel
		.src0_startofpacket (rsp_xbar_demux_005_src0_startofpacket),  //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_005_src0_endofpacket),    //          .endofpacket
		.src1_ready         (rsp_xbar_demux_005_src1_ready),          //      src1.ready
		.src1_valid         (rsp_xbar_demux_005_src1_valid),          //          .valid
		.src1_data          (rsp_xbar_demux_005_src1_data),           //          .data
		.src1_channel       (rsp_xbar_demux_005_src1_channel),        //          .channel
		.src1_startofpacket (rsp_xbar_demux_005_src1_startofpacket),  //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_005_src1_endofpacket)     //          .endofpacket
	);

	mysystem_mm_interconnect_1_rsp_xbar_demux rsp_xbar_demux_006 (
		.clk                (sdram_clk_sdram_clk_clk),                //       clk.clk
		.reset              (pio0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_006_src_ready),                //      sink.ready
		.sink_channel       (id_router_006_src_channel),              //          .channel
		.sink_data          (id_router_006_src_data),                 //          .data
		.sink_startofpacket (id_router_006_src_startofpacket),        //          .startofpacket
		.sink_endofpacket   (id_router_006_src_endofpacket),          //          .endofpacket
		.sink_valid         (id_router_006_src_valid),                //          .valid
		.src0_ready         (rsp_xbar_demux_006_src0_ready),          //      src0.ready
		.src0_valid         (rsp_xbar_demux_006_src0_valid),          //          .valid
		.src0_data          (rsp_xbar_demux_006_src0_data),           //          .data
		.src0_channel       (rsp_xbar_demux_006_src0_channel),        //          .channel
		.src0_startofpacket (rsp_xbar_demux_006_src0_startofpacket),  //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_006_src0_endofpacket),    //          .endofpacket
		.src1_ready         (rsp_xbar_demux_006_src1_ready),          //      src1.ready
		.src1_valid         (rsp_xbar_demux_006_src1_valid),          //          .valid
		.src1_data          (rsp_xbar_demux_006_src1_data),           //          .data
		.src1_channel       (rsp_xbar_demux_006_src1_channel),        //          .channel
		.src1_startofpacket (rsp_xbar_demux_006_src1_startofpacket),  //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_006_src1_endofpacket)     //          .endofpacket
	);

	mysystem_mm_interconnect_1_rsp_xbar_demux rsp_xbar_demux_007 (
		.clk                (sdram_clk_sdram_clk_clk),                //       clk.clk
		.reset              (pio0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_007_src_ready),                //      sink.ready
		.sink_channel       (id_router_007_src_channel),              //          .channel
		.sink_data          (id_router_007_src_data),                 //          .data
		.sink_startofpacket (id_router_007_src_startofpacket),        //          .startofpacket
		.sink_endofpacket   (id_router_007_src_endofpacket),          //          .endofpacket
		.sink_valid         (id_router_007_src_valid),                //          .valid
		.src0_ready         (rsp_xbar_demux_007_src0_ready),          //      src0.ready
		.src0_valid         (rsp_xbar_demux_007_src0_valid),          //          .valid
		.src0_data          (rsp_xbar_demux_007_src0_data),           //          .data
		.src0_channel       (rsp_xbar_demux_007_src0_channel),        //          .channel
		.src0_startofpacket (rsp_xbar_demux_007_src0_startofpacket),  //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_007_src0_endofpacket),    //          .endofpacket
		.src1_ready         (rsp_xbar_demux_007_src1_ready),          //      src1.ready
		.src1_valid         (rsp_xbar_demux_007_src1_valid),          //          .valid
		.src1_data          (rsp_xbar_demux_007_src1_data),           //          .data
		.src1_channel       (rsp_xbar_demux_007_src1_channel),        //          .channel
		.src1_startofpacket (rsp_xbar_demux_007_src1_startofpacket),  //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_007_src1_endofpacket)     //          .endofpacket
	);

	mysystem_mm_interconnect_1_rsp_xbar_demux rsp_xbar_demux_008 (
		.clk                (sdram_clk_sdram_clk_clk),                //       clk.clk
		.reset              (pio0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_008_src_ready),                //      sink.ready
		.sink_channel       (id_router_008_src_channel),              //          .channel
		.sink_data          (id_router_008_src_data),                 //          .data
		.sink_startofpacket (id_router_008_src_startofpacket),        //          .startofpacket
		.sink_endofpacket   (id_router_008_src_endofpacket),          //          .endofpacket
		.sink_valid         (id_router_008_src_valid),                //          .valid
		.src0_ready         (rsp_xbar_demux_008_src0_ready),          //      src0.ready
		.src0_valid         (rsp_xbar_demux_008_src0_valid),          //          .valid
		.src0_data          (rsp_xbar_demux_008_src0_data),           //          .data
		.src0_channel       (rsp_xbar_demux_008_src0_channel),        //          .channel
		.src0_startofpacket (rsp_xbar_demux_008_src0_startofpacket),  //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_008_src0_endofpacket),    //          .endofpacket
		.src1_ready         (rsp_xbar_demux_008_src1_ready),          //      src1.ready
		.src1_valid         (rsp_xbar_demux_008_src1_valid),          //          .valid
		.src1_data          (rsp_xbar_demux_008_src1_data),           //          .data
		.src1_channel       (rsp_xbar_demux_008_src1_channel),        //          .channel
		.src1_startofpacket (rsp_xbar_demux_008_src1_startofpacket),  //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_008_src1_endofpacket)     //          .endofpacket
	);

	mysystem_mm_interconnect_1_rsp_xbar_demux rsp_xbar_demux_009 (
		.clk                (sdram_clk_sdram_clk_clk),                //       clk.clk
		.reset              (pio0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_009_src_ready),                //      sink.ready
		.sink_channel       (id_router_009_src_channel),              //          .channel
		.sink_data          (id_router_009_src_data),                 //          .data
		.sink_startofpacket (id_router_009_src_startofpacket),        //          .startofpacket
		.sink_endofpacket   (id_router_009_src_endofpacket),          //          .endofpacket
		.sink_valid         (id_router_009_src_valid),                //          .valid
		.src0_ready         (rsp_xbar_demux_009_src0_ready),          //      src0.ready
		.src0_valid         (rsp_xbar_demux_009_src0_valid),          //          .valid
		.src0_data          (rsp_xbar_demux_009_src0_data),           //          .data
		.src0_channel       (rsp_xbar_demux_009_src0_channel),        //          .channel
		.src0_startofpacket (rsp_xbar_demux_009_src0_startofpacket),  //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_009_src0_endofpacket),    //          .endofpacket
		.src1_ready         (rsp_xbar_demux_009_src1_ready),          //      src1.ready
		.src1_valid         (rsp_xbar_demux_009_src1_valid),          //          .valid
		.src1_data          (rsp_xbar_demux_009_src1_data),           //          .data
		.src1_channel       (rsp_xbar_demux_009_src1_channel),        //          .channel
		.src1_startofpacket (rsp_xbar_demux_009_src1_startofpacket),  //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_009_src1_endofpacket)     //          .endofpacket
	);

	mysystem_mm_interconnect_1_rsp_xbar_demux rsp_xbar_demux_010 (
		.clk                (sdram_clk_sdram_clk_clk),                //       clk.clk
		.reset              (pio0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_010_src_ready),                //      sink.ready
		.sink_channel       (id_router_010_src_channel),              //          .channel
		.sink_data          (id_router_010_src_data),                 //          .data
		.sink_startofpacket (id_router_010_src_startofpacket),        //          .startofpacket
		.sink_endofpacket   (id_router_010_src_endofpacket),          //          .endofpacket
		.sink_valid         (id_router_010_src_valid),                //          .valid
		.src0_ready         (rsp_xbar_demux_010_src0_ready),          //      src0.ready
		.src0_valid         (rsp_xbar_demux_010_src0_valid),          //          .valid
		.src0_data          (rsp_xbar_demux_010_src0_data),           //          .data
		.src0_channel       (rsp_xbar_demux_010_src0_channel),        //          .channel
		.src0_startofpacket (rsp_xbar_demux_010_src0_startofpacket),  //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_010_src0_endofpacket),    //          .endofpacket
		.src1_ready         (rsp_xbar_demux_010_src1_ready),          //      src1.ready
		.src1_valid         (rsp_xbar_demux_010_src1_valid),          //          .valid
		.src1_data          (rsp_xbar_demux_010_src1_data),           //          .data
		.src1_channel       (rsp_xbar_demux_010_src1_channel),        //          .channel
		.src1_startofpacket (rsp_xbar_demux_010_src1_startofpacket),  //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_010_src1_endofpacket)     //          .endofpacket
	);

	mysystem_mm_interconnect_1_rsp_xbar_demux rsp_xbar_demux_011 (
		.clk                (sdram_clk_sdram_clk_clk),                //       clk.clk
		.reset              (pio0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_011_src_ready),                //      sink.ready
		.sink_channel       (id_router_011_src_channel),              //          .channel
		.sink_data          (id_router_011_src_data),                 //          .data
		.sink_startofpacket (id_router_011_src_startofpacket),        //          .startofpacket
		.sink_endofpacket   (id_router_011_src_endofpacket),          //          .endofpacket
		.sink_valid         (id_router_011_src_valid),                //          .valid
		.src0_ready         (rsp_xbar_demux_011_src0_ready),          //      src0.ready
		.src0_valid         (rsp_xbar_demux_011_src0_valid),          //          .valid
		.src0_data          (rsp_xbar_demux_011_src0_data),           //          .data
		.src0_channel       (rsp_xbar_demux_011_src0_channel),        //          .channel
		.src0_startofpacket (rsp_xbar_demux_011_src0_startofpacket),  //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_011_src0_endofpacket),    //          .endofpacket
		.src1_ready         (rsp_xbar_demux_011_src1_ready),          //      src1.ready
		.src1_valid         (rsp_xbar_demux_011_src1_valid),          //          .valid
		.src1_data          (rsp_xbar_demux_011_src1_data),           //          .data
		.src1_channel       (rsp_xbar_demux_011_src1_channel),        //          .channel
		.src1_startofpacket (rsp_xbar_demux_011_src1_startofpacket),  //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_011_src1_endofpacket)     //          .endofpacket
	);

	mysystem_mm_interconnect_1_rsp_xbar_demux rsp_xbar_demux_012 (
		.clk                (sdram_clk_sdram_clk_clk),                //       clk.clk
		.reset              (pio0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_012_src_ready),                //      sink.ready
		.sink_channel       (id_router_012_src_channel),              //          .channel
		.sink_data          (id_router_012_src_data),                 //          .data
		.sink_startofpacket (id_router_012_src_startofpacket),        //          .startofpacket
		.sink_endofpacket   (id_router_012_src_endofpacket),          //          .endofpacket
		.sink_valid         (id_router_012_src_valid),                //          .valid
		.src0_ready         (rsp_xbar_demux_012_src0_ready),          //      src0.ready
		.src0_valid         (rsp_xbar_demux_012_src0_valid),          //          .valid
		.src0_data          (rsp_xbar_demux_012_src0_data),           //          .data
		.src0_channel       (rsp_xbar_demux_012_src0_channel),        //          .channel
		.src0_startofpacket (rsp_xbar_demux_012_src0_startofpacket),  //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_012_src0_endofpacket),    //          .endofpacket
		.src1_ready         (rsp_xbar_demux_012_src1_ready),          //      src1.ready
		.src1_valid         (rsp_xbar_demux_012_src1_valid),          //          .valid
		.src1_data          (rsp_xbar_demux_012_src1_data),           //          .data
		.src1_channel       (rsp_xbar_demux_012_src1_channel),        //          .channel
		.src1_startofpacket (rsp_xbar_demux_012_src1_startofpacket),  //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_012_src1_endofpacket)     //          .endofpacket
	);

	mysystem_mm_interconnect_1_rsp_xbar_demux rsp_xbar_demux_013 (
		.clk                (sdram_clk_sdram_clk_clk),                //       clk.clk
		.reset              (pio0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_013_src_ready),                //      sink.ready
		.sink_channel       (id_router_013_src_channel),              //          .channel
		.sink_data          (id_router_013_src_data),                 //          .data
		.sink_startofpacket (id_router_013_src_startofpacket),        //          .startofpacket
		.sink_endofpacket   (id_router_013_src_endofpacket),          //          .endofpacket
		.sink_valid         (id_router_013_src_valid),                //          .valid
		.src0_ready         (rsp_xbar_demux_013_src0_ready),          //      src0.ready
		.src0_valid         (rsp_xbar_demux_013_src0_valid),          //          .valid
		.src0_data          (rsp_xbar_demux_013_src0_data),           //          .data
		.src0_channel       (rsp_xbar_demux_013_src0_channel),        //          .channel
		.src0_startofpacket (rsp_xbar_demux_013_src0_startofpacket),  //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_013_src0_endofpacket),    //          .endofpacket
		.src1_ready         (rsp_xbar_demux_013_src1_ready),          //      src1.ready
		.src1_valid         (rsp_xbar_demux_013_src1_valid),          //          .valid
		.src1_data          (rsp_xbar_demux_013_src1_data),           //          .data
		.src1_channel       (rsp_xbar_demux_013_src1_channel),        //          .channel
		.src1_startofpacket (rsp_xbar_demux_013_src1_startofpacket),  //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_013_src1_endofpacket)     //          .endofpacket
	);

	mysystem_mm_interconnect_1_rsp_xbar_demux rsp_xbar_demux_014 (
		.clk                (sdram_clk_sdram_clk_clk),                //       clk.clk
		.reset              (pio0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_014_src_ready),                //      sink.ready
		.sink_channel       (id_router_014_src_channel),              //          .channel
		.sink_data          (id_router_014_src_data),                 //          .data
		.sink_startofpacket (id_router_014_src_startofpacket),        //          .startofpacket
		.sink_endofpacket   (id_router_014_src_endofpacket),          //          .endofpacket
		.sink_valid         (id_router_014_src_valid),                //          .valid
		.src0_ready         (rsp_xbar_demux_014_src0_ready),          //      src0.ready
		.src0_valid         (rsp_xbar_demux_014_src0_valid),          //          .valid
		.src0_data          (rsp_xbar_demux_014_src0_data),           //          .data
		.src0_channel       (rsp_xbar_demux_014_src0_channel),        //          .channel
		.src0_startofpacket (rsp_xbar_demux_014_src0_startofpacket),  //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_014_src0_endofpacket),    //          .endofpacket
		.src1_ready         (rsp_xbar_demux_014_src1_ready),          //      src1.ready
		.src1_valid         (rsp_xbar_demux_014_src1_valid),          //          .valid
		.src1_data          (rsp_xbar_demux_014_src1_data),           //          .data
		.src1_channel       (rsp_xbar_demux_014_src1_channel),        //          .channel
		.src1_startofpacket (rsp_xbar_demux_014_src1_startofpacket),  //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_014_src1_endofpacket)     //          .endofpacket
	);

	mysystem_mm_interconnect_1_rsp_xbar_demux rsp_xbar_demux_015 (
		.clk                (sdram_clk_sdram_clk_clk),                //       clk.clk
		.reset              (pio0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_015_src_ready),                //      sink.ready
		.sink_channel       (id_router_015_src_channel),              //          .channel
		.sink_data          (id_router_015_src_data),                 //          .data
		.sink_startofpacket (id_router_015_src_startofpacket),        //          .startofpacket
		.sink_endofpacket   (id_router_015_src_endofpacket),          //          .endofpacket
		.sink_valid         (id_router_015_src_valid),                //          .valid
		.src0_ready         (rsp_xbar_demux_015_src0_ready),          //      src0.ready
		.src0_valid         (rsp_xbar_demux_015_src0_valid),          //          .valid
		.src0_data          (rsp_xbar_demux_015_src0_data),           //          .data
		.src0_channel       (rsp_xbar_demux_015_src0_channel),        //          .channel
		.src0_startofpacket (rsp_xbar_demux_015_src0_startofpacket),  //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_015_src0_endofpacket),    //          .endofpacket
		.src1_ready         (rsp_xbar_demux_015_src1_ready),          //      src1.ready
		.src1_valid         (rsp_xbar_demux_015_src1_valid),          //          .valid
		.src1_data          (rsp_xbar_demux_015_src1_data),           //          .data
		.src1_channel       (rsp_xbar_demux_015_src1_channel),        //          .channel
		.src1_startofpacket (rsp_xbar_demux_015_src1_startofpacket),  //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_015_src1_endofpacket)     //          .endofpacket
	);

	mysystem_mm_interconnect_1_rsp_xbar_demux rsp_xbar_demux_016 (
		.clk                (sdram_clk_sdram_clk_clk),                //       clk.clk
		.reset              (pio0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_016_src_ready),                //      sink.ready
		.sink_channel       (id_router_016_src_channel),              //          .channel
		.sink_data          (id_router_016_src_data),                 //          .data
		.sink_startofpacket (id_router_016_src_startofpacket),        //          .startofpacket
		.sink_endofpacket   (id_router_016_src_endofpacket),          //          .endofpacket
		.sink_valid         (id_router_016_src_valid),                //          .valid
		.src0_ready         (rsp_xbar_demux_016_src0_ready),          //      src0.ready
		.src0_valid         (rsp_xbar_demux_016_src0_valid),          //          .valid
		.src0_data          (rsp_xbar_demux_016_src0_data),           //          .data
		.src0_channel       (rsp_xbar_demux_016_src0_channel),        //          .channel
		.src0_startofpacket (rsp_xbar_demux_016_src0_startofpacket),  //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_016_src0_endofpacket),    //          .endofpacket
		.src1_ready         (rsp_xbar_demux_016_src1_ready),          //      src1.ready
		.src1_valid         (rsp_xbar_demux_016_src1_valid),          //          .valid
		.src1_data          (rsp_xbar_demux_016_src1_data),           //          .data
		.src1_channel       (rsp_xbar_demux_016_src1_channel),        //          .channel
		.src1_startofpacket (rsp_xbar_demux_016_src1_startofpacket),  //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_016_src1_endofpacket)     //          .endofpacket
	);

	mysystem_mm_interconnect_1_rsp_xbar_demux rsp_xbar_demux_017 (
		.clk                (sdram_clk_sdram_clk_clk),                //       clk.clk
		.reset              (pio0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_017_src_ready),                //      sink.ready
		.sink_channel       (id_router_017_src_channel),              //          .channel
		.sink_data          (id_router_017_src_data),                 //          .data
		.sink_startofpacket (id_router_017_src_startofpacket),        //          .startofpacket
		.sink_endofpacket   (id_router_017_src_endofpacket),          //          .endofpacket
		.sink_valid         (id_router_017_src_valid),                //          .valid
		.src0_ready         (rsp_xbar_demux_017_src0_ready),          //      src0.ready
		.src0_valid         (rsp_xbar_demux_017_src0_valid),          //          .valid
		.src0_data          (rsp_xbar_demux_017_src0_data),           //          .data
		.src0_channel       (rsp_xbar_demux_017_src0_channel),        //          .channel
		.src0_startofpacket (rsp_xbar_demux_017_src0_startofpacket),  //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_017_src0_endofpacket),    //          .endofpacket
		.src1_ready         (rsp_xbar_demux_017_src1_ready),          //      src1.ready
		.src1_valid         (rsp_xbar_demux_017_src1_valid),          //          .valid
		.src1_data          (rsp_xbar_demux_017_src1_data),           //          .data
		.src1_channel       (rsp_xbar_demux_017_src1_channel),        //          .channel
		.src1_startofpacket (rsp_xbar_demux_017_src1_startofpacket),  //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_017_src1_endofpacket)     //          .endofpacket
	);

	mysystem_mm_interconnect_1_rsp_xbar_mux rsp_xbar_mux (
		.clk                  (sdram_clk_sdram_clk_clk),                                                  //       clk.clk
		.reset                (arm_a9_hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_xbar_mux_src_ready),                                                   //       src.ready
		.src_valid            (rsp_xbar_mux_src_valid),                                                   //          .valid
		.src_data             (rsp_xbar_mux_src_data),                                                    //          .data
		.src_channel          (rsp_xbar_mux_src_channel),                                                 //          .channel
		.src_startofpacket    (rsp_xbar_mux_src_startofpacket),                                           //          .startofpacket
		.src_endofpacket      (rsp_xbar_mux_src_endofpacket),                                             //          .endofpacket
		.sink0_ready          (rsp_xbar_demux_src0_ready),                                                //     sink0.ready
		.sink0_valid          (rsp_xbar_demux_src0_valid),                                                //          .valid
		.sink0_channel        (rsp_xbar_demux_src0_channel),                                              //          .channel
		.sink0_data           (rsp_xbar_demux_src0_data),                                                 //          .data
		.sink0_startofpacket  (rsp_xbar_demux_src0_startofpacket),                                        //          .startofpacket
		.sink0_endofpacket    (rsp_xbar_demux_src0_endofpacket),                                          //          .endofpacket
		.sink1_ready          (rsp_xbar_demux_001_src0_ready),                                            //     sink1.ready
		.sink1_valid          (rsp_xbar_demux_001_src0_valid),                                            //          .valid
		.sink1_channel        (rsp_xbar_demux_001_src0_channel),                                          //          .channel
		.sink1_data           (rsp_xbar_demux_001_src0_data),                                             //          .data
		.sink1_startofpacket  (rsp_xbar_demux_001_src0_startofpacket),                                    //          .startofpacket
		.sink1_endofpacket    (rsp_xbar_demux_001_src0_endofpacket),                                      //          .endofpacket
		.sink2_ready          (rsp_xbar_demux_002_src0_ready),                                            //     sink2.ready
		.sink2_valid          (rsp_xbar_demux_002_src0_valid),                                            //          .valid
		.sink2_channel        (rsp_xbar_demux_002_src0_channel),                                          //          .channel
		.sink2_data           (rsp_xbar_demux_002_src0_data),                                             //          .data
		.sink2_startofpacket  (rsp_xbar_demux_002_src0_startofpacket),                                    //          .startofpacket
		.sink2_endofpacket    (rsp_xbar_demux_002_src0_endofpacket),                                      //          .endofpacket
		.sink3_ready          (rsp_xbar_demux_003_src0_ready),                                            //     sink3.ready
		.sink3_valid          (rsp_xbar_demux_003_src0_valid),                                            //          .valid
		.sink3_channel        (rsp_xbar_demux_003_src0_channel),                                          //          .channel
		.sink3_data           (rsp_xbar_demux_003_src0_data),                                             //          .data
		.sink3_startofpacket  (rsp_xbar_demux_003_src0_startofpacket),                                    //          .startofpacket
		.sink3_endofpacket    (rsp_xbar_demux_003_src0_endofpacket),                                      //          .endofpacket
		.sink4_ready          (rsp_xbar_demux_004_src0_ready),                                            //     sink4.ready
		.sink4_valid          (rsp_xbar_demux_004_src0_valid),                                            //          .valid
		.sink4_channel        (rsp_xbar_demux_004_src0_channel),                                          //          .channel
		.sink4_data           (rsp_xbar_demux_004_src0_data),                                             //          .data
		.sink4_startofpacket  (rsp_xbar_demux_004_src0_startofpacket),                                    //          .startofpacket
		.sink4_endofpacket    (rsp_xbar_demux_004_src0_endofpacket),                                      //          .endofpacket
		.sink5_ready          (rsp_xbar_demux_005_src0_ready),                                            //     sink5.ready
		.sink5_valid          (rsp_xbar_demux_005_src0_valid),                                            //          .valid
		.sink5_channel        (rsp_xbar_demux_005_src0_channel),                                          //          .channel
		.sink5_data           (rsp_xbar_demux_005_src0_data),                                             //          .data
		.sink5_startofpacket  (rsp_xbar_demux_005_src0_startofpacket),                                    //          .startofpacket
		.sink5_endofpacket    (rsp_xbar_demux_005_src0_endofpacket),                                      //          .endofpacket
		.sink6_ready          (rsp_xbar_demux_006_src0_ready),                                            //     sink6.ready
		.sink6_valid          (rsp_xbar_demux_006_src0_valid),                                            //          .valid
		.sink6_channel        (rsp_xbar_demux_006_src0_channel),                                          //          .channel
		.sink6_data           (rsp_xbar_demux_006_src0_data),                                             //          .data
		.sink6_startofpacket  (rsp_xbar_demux_006_src0_startofpacket),                                    //          .startofpacket
		.sink6_endofpacket    (rsp_xbar_demux_006_src0_endofpacket),                                      //          .endofpacket
		.sink7_ready          (rsp_xbar_demux_007_src0_ready),                                            //     sink7.ready
		.sink7_valid          (rsp_xbar_demux_007_src0_valid),                                            //          .valid
		.sink7_channel        (rsp_xbar_demux_007_src0_channel),                                          //          .channel
		.sink7_data           (rsp_xbar_demux_007_src0_data),                                             //          .data
		.sink7_startofpacket  (rsp_xbar_demux_007_src0_startofpacket),                                    //          .startofpacket
		.sink7_endofpacket    (rsp_xbar_demux_007_src0_endofpacket),                                      //          .endofpacket
		.sink8_ready          (rsp_xbar_demux_008_src0_ready),                                            //     sink8.ready
		.sink8_valid          (rsp_xbar_demux_008_src0_valid),                                            //          .valid
		.sink8_channel        (rsp_xbar_demux_008_src0_channel),                                          //          .channel
		.sink8_data           (rsp_xbar_demux_008_src0_data),                                             //          .data
		.sink8_startofpacket  (rsp_xbar_demux_008_src0_startofpacket),                                    //          .startofpacket
		.sink8_endofpacket    (rsp_xbar_demux_008_src0_endofpacket),                                      //          .endofpacket
		.sink9_ready          (rsp_xbar_demux_009_src0_ready),                                            //     sink9.ready
		.sink9_valid          (rsp_xbar_demux_009_src0_valid),                                            //          .valid
		.sink9_channel        (rsp_xbar_demux_009_src0_channel),                                          //          .channel
		.sink9_data           (rsp_xbar_demux_009_src0_data),                                             //          .data
		.sink9_startofpacket  (rsp_xbar_demux_009_src0_startofpacket),                                    //          .startofpacket
		.sink9_endofpacket    (rsp_xbar_demux_009_src0_endofpacket),                                      //          .endofpacket
		.sink10_ready         (rsp_xbar_demux_010_src0_ready),                                            //    sink10.ready
		.sink10_valid         (rsp_xbar_demux_010_src0_valid),                                            //          .valid
		.sink10_channel       (rsp_xbar_demux_010_src0_channel),                                          //          .channel
		.sink10_data          (rsp_xbar_demux_010_src0_data),                                             //          .data
		.sink10_startofpacket (rsp_xbar_demux_010_src0_startofpacket),                                    //          .startofpacket
		.sink10_endofpacket   (rsp_xbar_demux_010_src0_endofpacket),                                      //          .endofpacket
		.sink11_ready         (rsp_xbar_demux_011_src0_ready),                                            //    sink11.ready
		.sink11_valid         (rsp_xbar_demux_011_src0_valid),                                            //          .valid
		.sink11_channel       (rsp_xbar_demux_011_src0_channel),                                          //          .channel
		.sink11_data          (rsp_xbar_demux_011_src0_data),                                             //          .data
		.sink11_startofpacket (rsp_xbar_demux_011_src0_startofpacket),                                    //          .startofpacket
		.sink11_endofpacket   (rsp_xbar_demux_011_src0_endofpacket),                                      //          .endofpacket
		.sink12_ready         (rsp_xbar_demux_012_src0_ready),                                            //    sink12.ready
		.sink12_valid         (rsp_xbar_demux_012_src0_valid),                                            //          .valid
		.sink12_channel       (rsp_xbar_demux_012_src0_channel),                                          //          .channel
		.sink12_data          (rsp_xbar_demux_012_src0_data),                                             //          .data
		.sink12_startofpacket (rsp_xbar_demux_012_src0_startofpacket),                                    //          .startofpacket
		.sink12_endofpacket   (rsp_xbar_demux_012_src0_endofpacket),                                      //          .endofpacket
		.sink13_ready         (rsp_xbar_demux_013_src0_ready),                                            //    sink13.ready
		.sink13_valid         (rsp_xbar_demux_013_src0_valid),                                            //          .valid
		.sink13_channel       (rsp_xbar_demux_013_src0_channel),                                          //          .channel
		.sink13_data          (rsp_xbar_demux_013_src0_data),                                             //          .data
		.sink13_startofpacket (rsp_xbar_demux_013_src0_startofpacket),                                    //          .startofpacket
		.sink13_endofpacket   (rsp_xbar_demux_013_src0_endofpacket),                                      //          .endofpacket
		.sink14_ready         (rsp_xbar_demux_014_src0_ready),                                            //    sink14.ready
		.sink14_valid         (rsp_xbar_demux_014_src0_valid),                                            //          .valid
		.sink14_channel       (rsp_xbar_demux_014_src0_channel),                                          //          .channel
		.sink14_data          (rsp_xbar_demux_014_src0_data),                                             //          .data
		.sink14_startofpacket (rsp_xbar_demux_014_src0_startofpacket),                                    //          .startofpacket
		.sink14_endofpacket   (rsp_xbar_demux_014_src0_endofpacket),                                      //          .endofpacket
		.sink15_ready         (rsp_xbar_demux_015_src0_ready),                                            //    sink15.ready
		.sink15_valid         (rsp_xbar_demux_015_src0_valid),                                            //          .valid
		.sink15_channel       (rsp_xbar_demux_015_src0_channel),                                          //          .channel
		.sink15_data          (rsp_xbar_demux_015_src0_data),                                             //          .data
		.sink15_startofpacket (rsp_xbar_demux_015_src0_startofpacket),                                    //          .startofpacket
		.sink15_endofpacket   (rsp_xbar_demux_015_src0_endofpacket),                                      //          .endofpacket
		.sink16_ready         (rsp_xbar_demux_016_src0_ready),                                            //    sink16.ready
		.sink16_valid         (rsp_xbar_demux_016_src0_valid),                                            //          .valid
		.sink16_channel       (rsp_xbar_demux_016_src0_channel),                                          //          .channel
		.sink16_data          (rsp_xbar_demux_016_src0_data),                                             //          .data
		.sink16_startofpacket (rsp_xbar_demux_016_src0_startofpacket),                                    //          .startofpacket
		.sink16_endofpacket   (rsp_xbar_demux_016_src0_endofpacket),                                      //          .endofpacket
		.sink17_ready         (rsp_xbar_demux_017_src0_ready),                                            //    sink17.ready
		.sink17_valid         (rsp_xbar_demux_017_src0_valid),                                            //          .valid
		.sink17_channel       (rsp_xbar_demux_017_src0_channel),                                          //          .channel
		.sink17_data          (rsp_xbar_demux_017_src0_data),                                             //          .data
		.sink17_startofpacket (rsp_xbar_demux_017_src0_startofpacket),                                    //          .startofpacket
		.sink17_endofpacket   (rsp_xbar_demux_017_src0_endofpacket)                                       //          .endofpacket
	);

	mysystem_mm_interconnect_1_rsp_xbar_mux rsp_xbar_mux_001 (
		.clk                  (sdram_clk_sdram_clk_clk),                                                  //       clk.clk
		.reset                (arm_a9_hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_xbar_mux_001_src_ready),                                               //       src.ready
		.src_valid            (rsp_xbar_mux_001_src_valid),                                               //          .valid
		.src_data             (rsp_xbar_mux_001_src_data),                                                //          .data
		.src_channel          (rsp_xbar_mux_001_src_channel),                                             //          .channel
		.src_startofpacket    (rsp_xbar_mux_001_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket      (rsp_xbar_mux_001_src_endofpacket),                                         //          .endofpacket
		.sink0_ready          (rsp_xbar_demux_src1_ready),                                                //     sink0.ready
		.sink0_valid          (rsp_xbar_demux_src1_valid),                                                //          .valid
		.sink0_channel        (rsp_xbar_demux_src1_channel),                                              //          .channel
		.sink0_data           (rsp_xbar_demux_src1_data),                                                 //          .data
		.sink0_startofpacket  (rsp_xbar_demux_src1_startofpacket),                                        //          .startofpacket
		.sink0_endofpacket    (rsp_xbar_demux_src1_endofpacket),                                          //          .endofpacket
		.sink1_ready          (rsp_xbar_demux_001_src1_ready),                                            //     sink1.ready
		.sink1_valid          (rsp_xbar_demux_001_src1_valid),                                            //          .valid
		.sink1_channel        (rsp_xbar_demux_001_src1_channel),                                          //          .channel
		.sink1_data           (rsp_xbar_demux_001_src1_data),                                             //          .data
		.sink1_startofpacket  (rsp_xbar_demux_001_src1_startofpacket),                                    //          .startofpacket
		.sink1_endofpacket    (rsp_xbar_demux_001_src1_endofpacket),                                      //          .endofpacket
		.sink2_ready          (rsp_xbar_demux_002_src1_ready),                                            //     sink2.ready
		.sink2_valid          (rsp_xbar_demux_002_src1_valid),                                            //          .valid
		.sink2_channel        (rsp_xbar_demux_002_src1_channel),                                          //          .channel
		.sink2_data           (rsp_xbar_demux_002_src1_data),                                             //          .data
		.sink2_startofpacket  (rsp_xbar_demux_002_src1_startofpacket),                                    //          .startofpacket
		.sink2_endofpacket    (rsp_xbar_demux_002_src1_endofpacket),                                      //          .endofpacket
		.sink3_ready          (rsp_xbar_demux_003_src1_ready),                                            //     sink3.ready
		.sink3_valid          (rsp_xbar_demux_003_src1_valid),                                            //          .valid
		.sink3_channel        (rsp_xbar_demux_003_src1_channel),                                          //          .channel
		.sink3_data           (rsp_xbar_demux_003_src1_data),                                             //          .data
		.sink3_startofpacket  (rsp_xbar_demux_003_src1_startofpacket),                                    //          .startofpacket
		.sink3_endofpacket    (rsp_xbar_demux_003_src1_endofpacket),                                      //          .endofpacket
		.sink4_ready          (rsp_xbar_demux_004_src1_ready),                                            //     sink4.ready
		.sink4_valid          (rsp_xbar_demux_004_src1_valid),                                            //          .valid
		.sink4_channel        (rsp_xbar_demux_004_src1_channel),                                          //          .channel
		.sink4_data           (rsp_xbar_demux_004_src1_data),                                             //          .data
		.sink4_startofpacket  (rsp_xbar_demux_004_src1_startofpacket),                                    //          .startofpacket
		.sink4_endofpacket    (rsp_xbar_demux_004_src1_endofpacket),                                      //          .endofpacket
		.sink5_ready          (rsp_xbar_demux_005_src1_ready),                                            //     sink5.ready
		.sink5_valid          (rsp_xbar_demux_005_src1_valid),                                            //          .valid
		.sink5_channel        (rsp_xbar_demux_005_src1_channel),                                          //          .channel
		.sink5_data           (rsp_xbar_demux_005_src1_data),                                             //          .data
		.sink5_startofpacket  (rsp_xbar_demux_005_src1_startofpacket),                                    //          .startofpacket
		.sink5_endofpacket    (rsp_xbar_demux_005_src1_endofpacket),                                      //          .endofpacket
		.sink6_ready          (rsp_xbar_demux_006_src1_ready),                                            //     sink6.ready
		.sink6_valid          (rsp_xbar_demux_006_src1_valid),                                            //          .valid
		.sink6_channel        (rsp_xbar_demux_006_src1_channel),                                          //          .channel
		.sink6_data           (rsp_xbar_demux_006_src1_data),                                             //          .data
		.sink6_startofpacket  (rsp_xbar_demux_006_src1_startofpacket),                                    //          .startofpacket
		.sink6_endofpacket    (rsp_xbar_demux_006_src1_endofpacket),                                      //          .endofpacket
		.sink7_ready          (rsp_xbar_demux_007_src1_ready),                                            //     sink7.ready
		.sink7_valid          (rsp_xbar_demux_007_src1_valid),                                            //          .valid
		.sink7_channel        (rsp_xbar_demux_007_src1_channel),                                          //          .channel
		.sink7_data           (rsp_xbar_demux_007_src1_data),                                             //          .data
		.sink7_startofpacket  (rsp_xbar_demux_007_src1_startofpacket),                                    //          .startofpacket
		.sink7_endofpacket    (rsp_xbar_demux_007_src1_endofpacket),                                      //          .endofpacket
		.sink8_ready          (rsp_xbar_demux_008_src1_ready),                                            //     sink8.ready
		.sink8_valid          (rsp_xbar_demux_008_src1_valid),                                            //          .valid
		.sink8_channel        (rsp_xbar_demux_008_src1_channel),                                          //          .channel
		.sink8_data           (rsp_xbar_demux_008_src1_data),                                             //          .data
		.sink8_startofpacket  (rsp_xbar_demux_008_src1_startofpacket),                                    //          .startofpacket
		.sink8_endofpacket    (rsp_xbar_demux_008_src1_endofpacket),                                      //          .endofpacket
		.sink9_ready          (rsp_xbar_demux_009_src1_ready),                                            //     sink9.ready
		.sink9_valid          (rsp_xbar_demux_009_src1_valid),                                            //          .valid
		.sink9_channel        (rsp_xbar_demux_009_src1_channel),                                          //          .channel
		.sink9_data           (rsp_xbar_demux_009_src1_data),                                             //          .data
		.sink9_startofpacket  (rsp_xbar_demux_009_src1_startofpacket),                                    //          .startofpacket
		.sink9_endofpacket    (rsp_xbar_demux_009_src1_endofpacket),                                      //          .endofpacket
		.sink10_ready         (rsp_xbar_demux_010_src1_ready),                                            //    sink10.ready
		.sink10_valid         (rsp_xbar_demux_010_src1_valid),                                            //          .valid
		.sink10_channel       (rsp_xbar_demux_010_src1_channel),                                          //          .channel
		.sink10_data          (rsp_xbar_demux_010_src1_data),                                             //          .data
		.sink10_startofpacket (rsp_xbar_demux_010_src1_startofpacket),                                    //          .startofpacket
		.sink10_endofpacket   (rsp_xbar_demux_010_src1_endofpacket),                                      //          .endofpacket
		.sink11_ready         (rsp_xbar_demux_011_src1_ready),                                            //    sink11.ready
		.sink11_valid         (rsp_xbar_demux_011_src1_valid),                                            //          .valid
		.sink11_channel       (rsp_xbar_demux_011_src1_channel),                                          //          .channel
		.sink11_data          (rsp_xbar_demux_011_src1_data),                                             //          .data
		.sink11_startofpacket (rsp_xbar_demux_011_src1_startofpacket),                                    //          .startofpacket
		.sink11_endofpacket   (rsp_xbar_demux_011_src1_endofpacket),                                      //          .endofpacket
		.sink12_ready         (rsp_xbar_demux_012_src1_ready),                                            //    sink12.ready
		.sink12_valid         (rsp_xbar_demux_012_src1_valid),                                            //          .valid
		.sink12_channel       (rsp_xbar_demux_012_src1_channel),                                          //          .channel
		.sink12_data          (rsp_xbar_demux_012_src1_data),                                             //          .data
		.sink12_startofpacket (rsp_xbar_demux_012_src1_startofpacket),                                    //          .startofpacket
		.sink12_endofpacket   (rsp_xbar_demux_012_src1_endofpacket),                                      //          .endofpacket
		.sink13_ready         (rsp_xbar_demux_013_src1_ready),                                            //    sink13.ready
		.sink13_valid         (rsp_xbar_demux_013_src1_valid),                                            //          .valid
		.sink13_channel       (rsp_xbar_demux_013_src1_channel),                                          //          .channel
		.sink13_data          (rsp_xbar_demux_013_src1_data),                                             //          .data
		.sink13_startofpacket (rsp_xbar_demux_013_src1_startofpacket),                                    //          .startofpacket
		.sink13_endofpacket   (rsp_xbar_demux_013_src1_endofpacket),                                      //          .endofpacket
		.sink14_ready         (rsp_xbar_demux_014_src1_ready),                                            //    sink14.ready
		.sink14_valid         (rsp_xbar_demux_014_src1_valid),                                            //          .valid
		.sink14_channel       (rsp_xbar_demux_014_src1_channel),                                          //          .channel
		.sink14_data          (rsp_xbar_demux_014_src1_data),                                             //          .data
		.sink14_startofpacket (rsp_xbar_demux_014_src1_startofpacket),                                    //          .startofpacket
		.sink14_endofpacket   (rsp_xbar_demux_014_src1_endofpacket),                                      //          .endofpacket
		.sink15_ready         (rsp_xbar_demux_015_src1_ready),                                            //    sink15.ready
		.sink15_valid         (rsp_xbar_demux_015_src1_valid),                                            //          .valid
		.sink15_channel       (rsp_xbar_demux_015_src1_channel),                                          //          .channel
		.sink15_data          (rsp_xbar_demux_015_src1_data),                                             //          .data
		.sink15_startofpacket (rsp_xbar_demux_015_src1_startofpacket),                                    //          .startofpacket
		.sink15_endofpacket   (rsp_xbar_demux_015_src1_endofpacket),                                      //          .endofpacket
		.sink16_ready         (rsp_xbar_demux_016_src1_ready),                                            //    sink16.ready
		.sink16_valid         (rsp_xbar_demux_016_src1_valid),                                            //          .valid
		.sink16_channel       (rsp_xbar_demux_016_src1_channel),                                          //          .channel
		.sink16_data          (rsp_xbar_demux_016_src1_data),                                             //          .data
		.sink16_startofpacket (rsp_xbar_demux_016_src1_startofpacket),                                    //          .startofpacket
		.sink16_endofpacket   (rsp_xbar_demux_016_src1_endofpacket),                                      //          .endofpacket
		.sink17_ready         (rsp_xbar_demux_017_src1_ready),                                            //    sink17.ready
		.sink17_valid         (rsp_xbar_demux_017_src1_valid),                                            //          .valid
		.sink17_channel       (rsp_xbar_demux_017_src1_channel),                                          //          .channel
		.sink17_data          (rsp_xbar_demux_017_src1_data),                                             //          .data
		.sink17_startofpacket (rsp_xbar_demux_017_src1_startofpacket),                                    //          .startofpacket
		.sink17_endofpacket   (rsp_xbar_demux_017_src1_endofpacket)                                       //          .endofpacket
	);

endmodule
